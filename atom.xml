<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilenceZheng66-BLOG</title>
  
  <subtitle>log</subtitle>
  <link href="http://silencezheng.top/atom.xml" rel="self"/>
  
  <link href="http://silencezheng.top/"/>
  <updated>2023-08-12T12:34:10.769Z</updated>
  <id>http://silencezheng.top/</id>
  
  <author>
    <name>SilenceZheng66</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis安装使用入门</title>
    <link href="http://silencezheng.top/2023/08/12/article115/"/>
    <id>http://silencezheng.top/2023/08/12/article115/</id>
    <published>2023-08-12T12:32:55.000Z</published>
    <updated>2023-08-12T12:34:10.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis安装使用入门，包含基本知识和命令行客户端使用。</p><span id="more"></span><h2 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h2><p>Redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。Redis的全称是<code>REmote DIctionary Server</code>。</p><p>Redis 提供数据结构，例如字符串、哈希、列表、集合、带有范围查询的排序集、位图、HyperLogLog、地理空间索引和流。 Redis 具有内置复制、Lua 脚本、LRU 逐出、事务和不同级别的磁盘持久性，并通过 Redis Sentinel 和 Redis 集群的自动分区提供高可用性。</p><p>另外，膜拜一下<a href="http://antirez.com/latest/0">作者大佬的博客</a>，风格太简约了😄。</p><h2 id="Redis快速安装"><a href="#Redis快速安装" class="headerlink" title="Redis快速安装"></a>Redis快速安装</h2><p>Docker安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66 2023.8.11</span></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker search redis</span><br><span class="line"></span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir myredis</span><br><span class="line">mkdir myredis/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建持久化目录</span></span><br><span class="line">mkdir myredis/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件下载</span></span><br><span class="line">wget -O myredis/config/redis.conf http://download.redis.io/redis-stable/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个名为&quot;myredis&quot;的Redis容器，并根据指定的配置文件和参数进行配置</span></span><br><span class="line">docker run --restart=always --log-opt max-size=50m --log-opt max-file=1 -p 6379:6379 --name myredis -v /path/to/myredis/redis.conf:/etc/redis/redis.conf -v /path/to/myredis/data:/data -d redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是各个参数的解释：</span></span><br><span class="line"><span class="comment"># `--restart=always`: 设置容器在退出时总是自动重启。</span></span><br><span class="line"><span class="comment"># `--log-opt max-size=100m`: 设置容器日志文件的最大大小为100MB。当日志文件达到该大小时，将进行轮转。</span></span><br><span class="line"><span class="comment"># `--log-opt max-file=2`: 设置容器日志文件的最大数量为2个。当日志文件数量超过该值时，最旧的日志文件将被删除。</span></span><br><span class="line"><span class="comment"># `-p 6379:6379`: 将宿主机的6379端口映射到容器的6379端口，允许从宿主机访问Redis服务。</span></span><br><span class="line"><span class="comment"># `--name myredis`: 为容器指定一个名称，即&quot;myredis&quot;。</span></span><br><span class="line"><span class="comment"># `-v /path/to/myredis/redis.conf:/etc/redis/redis.conf`: 将主机上的 `/path/to/myredis/redis.conf` 文件挂载到容器内的 `/etc/redis/redis.conf` 路径，用作Redis配置文件。</span></span><br><span class="line"><span class="comment"># `-v /path/to/myredis/data:/data`: 将主机上的 `/path/to/myredis/data` 目录挂载到容器内的 `/data` 路径，用作Redis数据目录。</span></span><br><span class="line"><span class="comment"># `-d redis`: 在后台运行一个Redis容器。</span></span><br><span class="line"><span class="comment"># `redis-server /etc/redis/redis.conf`: 指定要运行的Redis服务器，并指定使用 `/etc/redis/redis.conf` 作为配置文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器运行日志</span></span><br><span class="line">docker logs --since 30m myredis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有与端口号相关的网络连接和监听端口</span></span><br><span class="line">netstat -an | grep 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器redis命令行客户端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it myredis redis-cli</span><br></pre></td></tr></table></figure></p><h2 id="Redis基础介绍"><a href="#Redis基础介绍" class="headerlink" title="Redis基础介绍"></a>Redis基础介绍</h2><h3 id="查看Redis信息"><a href="#查看Redis信息" class="headerlink" title="查看Redis信息"></a>查看Redis信息</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看全部信息</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:<span class="number">7.0</span>.11</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某板块信息</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; info CPU</span><br><span class="line"><span class="comment"># CPU</span></span><br><span class="line">used_cpu_sys:<span class="number">1.023336</span></span><br><span class="line">used_cpu_user:<span class="number">0.675062</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Redis默认有16个数据库，这个可以在配置文件redis.conf中做出修改:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">databases 16</span><br></pre></td></tr></table></figure><p>这16个数据库以编号0-15命名，不支持修改名字，而且各个数据库之间的数据并不具备完全的隔离性，比如我们切换到任意一个数据库，执行命令<code>flushall</code>就可以清空所有数据库的数据，所以并不建议通过数据库来隔离不同的业务系统数据，但是我们可以针对同一个业务系统中的不同模块将其设置到不同的数据库中。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Redis的基本数据类型如下图：<br><img src="/assets/post_img/article115/redis-data-struct.png" alt="bdt"></p><p>但还有其他一些数据类型可扩展，截至目前，官网包含如下数据类型：<br><img src="/assets/post_img/article115/all-psb-dt.png" alt="alldt"></p><p>以下是常用数据结构的简要介绍：</p><ol><li><p><strong>Strings（字符串）</strong>：</p><ul><li>存储文本、二进制数据等。</li><li>可用于缓存、计数器等。</li></ul></li><li><p><strong>Lists（列表）</strong>：</p><ul><li>有序、可重复的元素集合。</li><li>支持在列表头部和尾部添加、删除元素，以及获取子列表。</li><li>适用于实现消息队列、最新动态等。</li></ul></li><li><p><strong>Sets（集合）</strong>：</p><ul><li>无序、不重复的元素集合。</li><li>支持添加、删除、判断元素是否存在等操作。</li><li>适用于存储不重复的标签、好友关系等。</li></ul></li><li><p><strong>Sorted Sets（有序集合）</strong>：</p><ul><li>与集合类似，但每个元素都有一个分数（score）用于排序。</li><li>支持按照分数范围获取元素。</li><li>适用于排行榜、优先级队列等。</li></ul></li><li><p><strong>Hashs（哈希）</strong>：</p><ul><li>存储对象，每个字段存储一个属性。</li><li>支持单个字段的读写、删除，以及获取所有字段。</li><li>适用于存储用户信息、商品属性等。</li></ul></li><li><p><strong>Bitmaps（位图）</strong>：</p><ul><li>位存储结构，适合表示某些状态或事件。</li><li>支持位的设置、清除、查询等操作。</li><li>适用于用户在线状态、签到等。</li></ul></li><li><p><strong>HyperLogLog（基数估算）</strong>：</p><ul><li>用于估算集合中不重复元素的数量，占用很少的内存。</li><li>支持添加元素，以及计算估算的基数数量。</li><li>适用于统计不重复 IP 数量、UV 数量等。</li></ul></li><li><p><strong>Geospatials（地理位置）</strong>：</p><ul><li>存储地理位置信息。</li><li>支持添加地点、计算两个地点之间的距离等操作。</li><li>适用于附近商店查找、位置服务等。</li></ul></li></ol><p>这些数据结构的特点在于快速的读写操作，以及许多方便的命令和功能。</p><h3 id="Key命名规范"><a href="#Key命名规范" class="headerlink" title="Key命名规范"></a>Key命名规范</h3><p>在 Redis 中，Key 的命名是非常重要的，它不仅影响到数据存储的性能，还会影响到代码的可读性和维护性。以下是一些 Redis Key 命名的规范和建议：</p><ol><li><p><strong>清晰而有意义的命名</strong>：Key 应该能够清楚地表达出它所对应的数据含义，不要使用过于简单的名称，可以使用类似于命名空间的方式来分隔不同业务领域的数据。</p></li><li><p><strong>避免特殊字符</strong>：Key 不应该包含特殊字符，特别是空格、换行符等。建议使用字母、数字、下划线、英文冒号等字符组成。</p></li><li><p><strong>长度适中</strong>：Key 的长度应该适中，不要过长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率。</p></li><li><p><strong>小写字母</strong>：建议使用小写字母来命名 Key，这样可以避免在大小写不敏感的 Redis 配置中引起问题。</p></li><li><p><strong>使用分隔符</strong>：在 Key 中使用分隔符，以提高可读性，比如使用冒号（:）或下划线（_）来分隔不同的层级。注意虽然可以使用分隔符方式划分 Key，但不要过度嵌套，以免增加查找和维护的复杂性。</p></li><li><p><strong>避免重复</strong>：确保不同业务使用不同的 Key，以免冲突和混淆。</p></li><li><p><strong>避免敏感信息</strong>：避免在 Key 中包含敏感信息，比如密码、安全令牌等。</p></li></ol><p>合理的命名规范可以提高代码的可读性和维护性，同时也能更好地利用 Redis 的性能优势。根据业务需求和团队的约定，可以制定适合自己的 Key 命名规范。</p><p>下面列举一些键命名示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命名规范：user:&#123;user_id&#125;:name</span><br><span class="line">示例：user:123:name</span><br><span class="line"></span><br><span class="line">命名规范：post:&#123;post_id&#125;</span><br><span class="line">示例：post:456</span><br><span class="line"></span><br><span class="line">命名规范：online:&#123;date&#125;</span><br><span class="line">示例：online:2023-06-01</span><br></pre></td></tr></table></figure></p><h2 id="Redis使用入门（CLI）"><a href="#Redis使用入门（CLI）" class="headerlink" title="Redis使用入门（CLI）"></a>Redis使用入门（CLI）</h2><p>下面使用Redis命令行客户端进行一些操作，加深对上述知识的理解😄。</p><h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; select <span class="number">1</span>    <span class="comment"># 数据库选择</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; set a a</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; select <span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">2</span>]&gt; get a</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">2</span>]&gt; keys *   <span class="comment"># 显示当前数据库的所有键</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; select <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; flushdb <span class="comment"># 清空当前数据库</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; flushdb <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="字符串（Strings）"><a href="#字符串（Strings）" class="headerlink" title="字符串（Strings）"></a>字符串（Strings）</h3><p>在 Redis 中，字符串是最简单的数据类型，但也是最通用和常用的，它不仅可以存储文本、整数、浮点数，甚至包括任何二进制数据，例如图像和序列化的对象。</p><p>这是因为在 Redis 中，字符串是二进制安全的（Binary-safe）。这意味着 Redis 的字符串值可以包含任何类型的数据，包括文本、图像、序列化的对象等，而不会对其中的二进制数据做任何处理或解释。</p><p>如果需要对存储的二进制数据进行解码，比如将其转换为特定的对象或文件格式，需要在应用程序中处理解码操作。</p><h4 id="设-取值"><a href="#设-取值" class="headerlink" title="设/取值"></a>设/取值</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个设置</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; set test:<span class="number">1</span>:string <span class="string">&quot;Silence&quot;</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; get test:<span class="number">1</span>:string</span><br><span class="line"><span class="string">&quot;Silence&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量设置</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; mset name:<span class="number">1</span> Silence name:<span class="number">2</span> Zheng</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; mget name:<span class="number">1</span> name:<span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Silence&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Zheng&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不存在则设值，存在则设置失败</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; setnx name:<span class="number">1</span> <span class="string">&quot;Eminem&quot;</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; get name:<span class="number">1</span></span><br><span class="line"><span class="string">&quot;Silence&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; set name:<span class="number">3</span> <span class="string">&quot;Eminem&quot;</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><code>SET</code> 命令支持设置过期时间，一般分布式锁就是基于带过期时间的这个命令来实现的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value EX|PX 18 <span class="comment"># EX表示秒，PX表示毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置3秒后自动过期</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> tmp:1 5 EX 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get tmp:1</span><br><span class="line"><span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get tmp:1</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h4 id="增减"><a href="#增减" class="headerlink" title="增减"></a>增减</h4><p>字符串类型包含整数和浮点数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; SET counter <span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; INCR counter</span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; DECR counter</span><br><span class="line">(integer) <span class="number">10</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; INCRBY counter <span class="number">5</span></span><br><span class="line">(integer) <span class="number">15</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; DECRBY counter <span class="number">100</span></span><br><span class="line">(integer) -<span class="number">85</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; DECRBYFLOAT counter <span class="number">5.2465</span></span><br><span class="line">(error) ERR unknown command <span class="string">&#x27;DECRBYFLOAT&#x27;</span>, with args beginning with: <span class="string">&#x27;counter&#x27;</span> <span class="string">&#x27;5.2465&#x27;</span> </span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; INCRBYFLOAT counter -<span class="number">5.2465</span></span><br><span class="line"><span class="string">&quot;-90.2465&quot;</span></span><br></pre></td></tr></table></figure><p>对于浮点运算，不存在<code>DECRBYFLOAT</code>，而是通过<code>INCRBYFLOAT</code>负值来进行减少。</p><p>最重要的是，<code>INCR</code>等指令本身就具有原子操作的特性，所以我们完全可以利用redis的<code>INCR、INCRBY、DECR、DECRBY</code>等指令来实现多客户端原子计数的效果，不少网站都利用redis的这个特性来实现业务上的统计计数需求。</p><h4 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h4><p>在值后新增内容&amp;获取值的子串：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; append <span class="built_in">test</span>:1:string <span class="string">&quot;Zheng66&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span>:1:string</span><br><span class="line"><span class="string">&quot;SilenceZheng66&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE <span class="built_in">test</span>:1:string 2 10</span><br><span class="line"><span class="string">&quot;lenceZhen&quot;</span></span><br></pre></td></tr></table></figure></p><h3 id="列表（Lists）"><a href="#列表（Lists）" class="headerlink" title="列表（Lists）"></a>列表（Lists）</h3><p>在 Redis 中，List 是一个有序的字符串集合，它允许存储多个字符串值，并且保持它们的插入顺序。每个值都被称为元素（element）。Redis 中的 List 是一个<strong>双向链表</strong>（double-ended list），这使得在两端进行插入和删除操作非常快速。</p><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>下面称列表的左侧为头部，右侧为尾部。</p><ol><li><code>lpush</code>：将一个或者多个<code>value</code>插入到列表key的头部，不存在则创建列表key。</li><li><code>lpushx</code>：将<code>value</code>插入到列表key的头部，不存在则不做任何处理。</li><li><code>lpop</code>：移除并返回列表key指定数量的头元素，默认1。</li><li><code>rpush</code>、<code>rpushx</code>：尾部插入，对应关系同上。</li><li><code>rpop</code>：尾部推出，同上。</li><li><code>llen</code>：返回列表key的长度。</li><li><code>lindex</code>：获取列表key指定索引位置上的元素，头部从0开始，尾部从-1开始。</li><li><code>lrange</code>：返回列表key中下标start到stop之间的元素，包含边界。</li><li><code>lset</code>：将value设置到列表key中指定index位置。key不存在或者index超出范围报错。</li><li><code>lrem</code>：从列表key中删除指定数量的匹配值。</li><li><code>ltrim</code>：修剪原列表，只保留指定范围内的元素，包含边界。</li><li><code>linsert</code>：在列表中指定元素前或后插入新元素。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; LPUSH mylist item1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LPUSHX mylist item2 item3</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; RPUSH mylist item4 item5</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; RPUSHX mylist item6</span><br><span class="line">(integer) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpop mylist</span><br><span class="line"><span class="string">&quot;item3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; rpop mylist</span><br><span class="line"><span class="string">&quot;item6&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; llen mylist</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lindex mylist <span class="number">0</span></span><br><span class="line"><span class="string">&quot;item2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lindex mylist -<span class="number">1</span></span><br><span class="line"><span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lindex mylist -<span class="number">2</span></span><br><span class="line"><span class="string">&quot;item4&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LRANGE mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;item1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;item4&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lset mylist <span class="number">0</span> item2:new</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpop mylist</span><br><span class="line"><span class="string">&quot;item2:new&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; ltrim mylist <span class="number">2</span> <span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; llen mylist</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LINSERT mylist BEFORE item5 item100</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LINSERT mylist after item5 item100</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item100&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;item100&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lrem mylist <span class="number">2</span> item100</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpush mylist item1 item2 item3</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; rpop mylist <span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;item1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;item2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;item3&quot;</span></span><br></pre></td></tr></table></figure><h4 id="更多操作-1"><a href="#更多操作-1" class="headerlink" title="更多操作"></a>更多操作</h4><p><strong>BLPOP / BRPOP</strong></p><ul><li><code>BLPOP key [key ...] timeout</code>: 阻塞式左弹出操作，等待并弹出第一个非空列表的元素。</li><li><code>BRPOP key [key ...] timeout</code>: 阻塞式右弹出操作，等待并弹出第一个非空列表的元素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从多个列表中弹出元素，等待时间为10秒</span></span><br><span class="line">BLPOP mylist1 mylist2 10 </span><br></pre></td></tr></table></figure><h3 id="集合（Sets）"><a href="#集合（Sets）" class="headerlink" title="集合（Sets）"></a>集合（Sets）</h3><p>Redis中的集合是一个String类型的无序集合，集合中元素唯一不可重复。</p><p>Sets在Redis中的常用函数有：</p><ol><li><code>SADD key member [member ...]</code>：将一个或多个成员添加到集合key中。</li><li><code>SCARD key</code>：返回集合key的基数（集合中元素的数量）。</li><li><code>SISMEMBER key member</code>：判断member元素是否是集合key的成员。</li><li><code>SREM key member [member ...]</code>：移除集合key中的一个或多个member元素。</li><li><code>SMEMBERS key</code>：返回集合key中的所有成员。</li><li><code>SPOP key [count]</code>：移除并返回集合key中的count个随机元素。</li><li><code>SRANDMEMBER key [count]</code>：从集合key中随机获取count个元素。</li><li><code>SDIFF key [key ...]</code>：返回所有给定集合之间的差集。</li><li><code>SINTER key [key ...]</code>：返回所有给定集合的交集。</li><li><code>SUNION key [key ...]</code>：返回所有给定集合的并集。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; SADD myset value1 value2 value3</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SCARD myset</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SISMEMBER myset value1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sadd aset value2 value3 value4</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SISMEMBER aset value1</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; srem myset value2 value3</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smove myset aset value1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sadd myset value1 value3 value5</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; spop aset <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers aset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value4&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; srandmember myset <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sdiff myset aset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sdiff aset myset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value4&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sinter myset aset</span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sunion myset aset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value4&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;value5&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;value2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="有序集合（Sorted-sets）"><a href="#有序集合（Sorted-sets）" class="headerlink" title="有序集合（Sorted sets）"></a>有序集合（Sorted sets）</h3><p>在Redis中，Sorted Set（有序集合）是一种可以排序的集合数据结构，它的每个成员都有一个相关的分数（score），根据分数的排列顺序对成员进行排序。<br>Sorted Set主要用于处理需要排序和去重的数据。</p><h4 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h4><p>因为添加操作的参数较多，单独拿出来说一下。<code>ZADD</code>命令用于将一个或多个成员添加到有序集合（Sorted Set）中，或者更新已存在成员的分数。</p><p>下面是<code>ZADD</code>命令的各种用法示例：</p><ol><li>添加单个成员到有序集合：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset 3 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><ol><li>添加多个成员到有序集合：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset 2 <span class="string">&quot;member2&quot;</span> 4 <span class="string">&quot;member3&quot;</span> 1 <span class="string">&quot;member4&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><ol><li>使用<code>NX</code>选项，仅在成员不存在时才添加：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset NX 3 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><ol><li>使用<code>XX</code>选项，仅在成员已存在时才更新分数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset XX 5 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><ol><li>使用<code>CH</code>选项，返回更新或添加的成员数量，包括分数未变动的成员：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset CH 5 <span class="string">&quot;member1&quot;</span> 2 <span class="string">&quot;member2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><ol><li>使用<code>INCR</code>选项，将分数作为增量进行更新：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset INCR 2 <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><ol><li>结合<code>NX</code>、<code>CH</code>和<code>INCR</code>选项的多功能用法：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset NX CH INCR 3 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h4><p>Sorted Sets在Redis中的常用函数有：</p><ol><li><code>ZADD key [NX|XX] [CH] [INCR] score member [score member ...]</code>：将一个或多个成员添加到有序集合key中，或者更新已存在成员的分数。</li><li><code>ZCARD key</code>：返回有序集合key的基数（有序集合中元素的数量）。</li><li><code>ZSCORE key member</code>：返回成员member的分数。</li><li><code>ZCOUNT key min max</code>：返回有序集合key中分数介于min和max之间的成员数量。</li><li><code>ZINCRBY key increment member</code>：将成员member的分数增加increment。</li><li><code>ZRANGE key start stop [WITHSCORES]</code>：返回有序集合key中索引从start到stop之间的成员。</li><li><code>ZREVRANGE key start stop [WITHSCORES]</code>：返回有序集合key中索引从start到stop之间的成员，按分数从大到小排列。</li><li><code>ZRANK key member</code>：返回成员member在有序集合key中的排名，从0开始计数。</li><li><code>ZREVRANK key member</code>：返回成员member在有序集合key中的排名，从高到低排列。</li><li><code>ZREM key member [member ...]</code>：移除有序集合key中的一个或多个成员。</li><li><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code>：返回有序集合key中分数介于min和max之间的成员。</li><li><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code>：返回有序集合key中分数介于max和min之间的成员，按分数从大到小排列。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; ZADD mysset <span class="number">1</span> member1 <span class="number">2</span> member2</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zadd mysset NX <span class="number">3</span> member3</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zcard mysset</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zscore mysset member2</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zcount mysset <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zincrby mysset <span class="number">2</span> member1</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrange mysset <span class="number">0</span> -<span class="number">1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;member3&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrevrange mysset <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;member2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrank mysset member2</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrevrank mysset member2</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrem mysset member3</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrangebyscore mysset <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrevrangebyscore mysset <span class="number">3</span> <span class="number">1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;member2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="哈希表（Hashs）"><a href="#哈希表（Hashs）" class="headerlink" title="哈希表（Hashs）"></a>哈希表（Hashs）</h3><p>在Redis中，Hashs是一种用于存储字段和值的数据结构，每个字段都与一个值相关联，类似于Python中的字典。<br>Hashs主要用于存储对象，以及需要多个字段来表示的数据。</p><p>Redis中Hashs的常用函数有：</p><ol><li><code>HSET key field value</code>：将哈希表key中的字段field的值设置为value。</li><li><code>HSETNX key field value</code>：将哈希表key中的字段field的值设置为value，如果field已存在，则不执行任何操作。</li><li><code>HGET key field</code>：返回哈希表key中给定字段field的值。</li><li><code>HMSET key field1 value1 [field2 value2 ...]</code>：同时将多个field-value对设置到哈希表key中。</li><li><code>HMGET key field1 [field2 ...]</code>：返回哈希表key中给定字段的值。</li><li><code>HDEL key field1 [field2 ...]</code>：删除哈希表key中的一个或多个指定字段。</li><li><code>HGETALL key</code>：返回哈希表key中所有字段和值。</li><li><code>HKEYS key</code>：返回哈希表key中的所有字段。</li><li><code>HVALS key</code>：返回哈希表key中的所有值。</li><li><code>HLEN key</code>：返回哈希表key中字段的数量。</li><li><code>HEXISTS key field</code>：查看哈希表key中是否存在指定字段。</li><li><code>HINCRBY key field increment</code>：为哈希表key中的字段field的值增加increment。</li><li><code>HINCRBYFLOAT key field increment</code>：为哈希表key中的字段field的值增加浮点数increment。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; HSET myhash field1 value1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HSET myhash field2 value2</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HGET myhash field1</span><br><span class="line"><span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HMSET myhash field3 value3 field4 value4</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HMGET myhash field1 field2 field3</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HDEL myhash field2</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HGETALL myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;field1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;field3&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HKEYS myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;field1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;field3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HVALS myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HLEN myhash</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HEXISTS myhash field1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HINCRBY myhash field3 <span class="number">2</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HINCRBYFLOAT myhash field3 <span class="number">1.5</span></span><br><span class="line"><span class="string">&quot;3.5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="位图（Bitmaps）"><a href="#位图（Bitmaps）" class="headerlink" title="位图（Bitmaps）"></a>位图（Bitmaps）</h3><p>在Redis中，Bitmaps是一种特殊的数据结构，它可以表示一系列位的集合，每个位的值要么是0，要么是1。<br>比如存储数据格式一般为：100110000111，这里的0和1就是bit值，设置的时候可以设置指定位置(偏移量)的bit值。<br>Bitmaps通常用于存储布尔值的信息，如用户的在线状态、用户活跃情况等。</p><p>Redis中Bitmaps的常用函数有：</p><ol><li><code>SETBIT key offset value</code>：将key对应的Bitmap中的offset位设置为value（0或1）。</li><li><code>GETBIT key offset</code>：返回key对应的Bitmap中offset位的值。</li><li><code>BITCOUNT key [start end]</code>：统计key对应的Bitmap中[start, end]范围内值为1的位的数量。</li><li><code>BITOP operation destkey key [key ...]</code>：对多个Bitmap执行位运算，并将结果保存到destkey中，operation可以是AND、OR、XOR、NOT。</li><li><code>BITPOS key bit [start] [end]</code>：返回key对应的Bitmap中值为bit的第一个位的位置，[start, end]范围内。</li><li><code>BITFIELD key [GET type offset] [SET type offset value]</code>：执行多种位域操作，可以进行位取反、位截取、位增加等操作。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; SETBIT online_users <span class="number">1000</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GETBIT online_users <span class="number">1000</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SETBIT online_users <span class="number">2000</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SETBIT online_users <span class="number">3000</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITCOUNT online_users</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITCOUNT online_users <span class="number">0</span> <span class="number">2000</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITOP OR all_online online_users1 online_users2</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GETBIT all_online <span class="number">1000</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GETBIT all_online <span class="number">2000</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITPOS all_online <span class="number">1</span></span><br><span class="line">(integer) <span class="number">2000</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITPOS all_online <span class="number">1</span> <span class="number">2000</span> <span class="number">3000</span></span><br><span class="line">(integer) <span class="number">3000</span></span><br><span class="line"><span class="comment"># 在名为online_users的Bitmap中，执行位域操作，使用GET命令从偏移量为1000的位开始，获取一个有符号的4位整数（u4类型，无符号4位整数）。</span></span><br><span class="line"><span class="comment"># 结果为字符串&quot;6&quot;，表示在偏移量1000的4位中，值为6。</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITFIELD online_users GET u4 <span class="number">1000</span></span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="comment"># 在名为online_users的Bitmap中，执行位域操作，使用SET命令将偏移量为1000的4位设置为2。命令执行成功，返回整数0。</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITFIELD online_users SET u4 <span class="number">1000</span> <span class="number">2</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="comment"># 再次使用GET命令从偏移量为1000的位开始，获取一个有符号的4位整数（u4类型）。结果为字符串&quot;2&quot;，表示在偏移量1000的4位中，值已经被设置为2。</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITFIELD online_users GET u4 <span class="number">1000</span></span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="基数估算（HyperLogLog）"><a href="#基数估算（HyperLogLog）" class="headerlink" title="基数估算（HyperLogLog）"></a>基数估算（HyperLogLog）</h3><p>HyperLogLog本身是一种算法，其来源于论文《HyperLogLog the analysis of a near-optimal cardinality estimation algorithm》。</p><p>在Redis中，HyperLogLog是一种用于统计基数（集合中不重复元素的数量）的数据结构，它通过使用固定的空间来估计集合的基数，占用的空间相对较小。<br>HyperLogLog主要用于对大型数据集合的去重统计，适用于对数据的<strong>近似计数</strong>，而不需要实际存储所有元素。</p><p>在Redis里面，每个HyperLogLog键只需要花费12KB内存，就可以计算接近2^64 个不同元素的基数，但是也可能有0.81%的错误率。</p><p>HyperLogLog在Redis中的常用函数有：</p><ol><li><code>PFADD key element [element ...]</code>：将一个或多个元素添加到指定的HyperLogLog中。</li><li><code>PFCOUNT key [key ...]</code>：返回指定HyperLogLog的基数估算值。</li><li><code>PFMERGE destkey sourcekey [sourcekey ...]</code>：合并多个HyperLogLog为一个HyperLogLog。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; PFADD myhll element1 element2 element3</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFADD myhll element4 element5</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFCOUNT myhll</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFMERGE merged-hll myhll myhll2</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFCOUNT merged-hll</span><br><span class="line">(integer) <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="地理空间（Geospatials）"><a href="#地理空间（Geospatials）" class="headerlink" title="地理空间（Geospatials）"></a>地理空间（Geospatials）</h3><p>在Redis中，Geospatials数据结构用于存储地理位置信息（经纬度）和相关的数据，然后可以通过位置信息进行距离计算和范围查询。<br>Redis提供了一种叫做Geohash的算法来将地理位置映射到字符串，从而可以在Redis中高效地进行位置查询和计算。</p><p>Geospatial数据在Redis中的常用函数有：</p><ol><li><code>GEOADD key longitude latitude member [longitude latitude member ...]</code>：将一个或多个地理位置成员添加到指定的key中。</li><li><code>GEODIST key member1 member2 [unit]</code>：返回两个地理位置成员之间的距离。</li><li><code>GEOHASH key member [member ...]</code>：返回指定地理位置成员的Geohash字符串。</li><li><code>GEOPOS key member [member ...]</code>：返回指定地理位置成员的经纬度坐标。</li><li><code>GEORADIUS key longitude latitude radius unit [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC]</code>：在指定的经纬度范围内查找地理位置成员。</li><li><code>GEORADIUSBYMEMBER key member radius unit [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC]</code>：在指定地理位置成员附近查找其他地理位置成员。</li><li><code>GEODEL key member [member ...]</code>：从指定key中删除一个或多个地理位置成员。</li></ol><p>以下是一些配合cli示例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; GEOADD mygeo <span class="number">13.361389</span> <span class="number">38.115556</span> <span class="string">&quot;Palermo&quot;</span> <span class="number">15.087269</span> <span class="number">37.502669</span> <span class="string">&quot;Catania&quot;</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEODIST mygeo Palermo Catania km</span><br><span class="line"><span class="string">&quot;166.2740&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEOHASH mygeo Palermo Catania</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;sqc8b49rny0&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;sqdtr74hyu0&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEOPOS mygeo Palermo Catania</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;13.36138933897018433&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="string">&quot;38.11555639549629859&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;15.08726745843887329&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="string">&quot;37.50266842333162032&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEORADIUS mygeo <span class="number">15</span> <span class="number">37</span> <span class="number">200</span> km</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Catania&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEORADIUSBYMEMBER mygeo Palermo <span class="number">200</span> km</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Palermo&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEODEL mygeo Catania</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Redis的使用场景"><a href="#Redis的使用场景" class="headerlink" title="Redis的使用场景"></a>Redis的使用场景</h2><p>Redis是基于内存操作，具备高可用、高性能等特点，同时也提供了丰富的数据类型。一般可用于如下场景：</p><p>1、数据缓存。项目早期一般都是将数据存储到<code>MySQL、oracle</code>等关系型数据库中，所有的数据读写都是基于磁盘操作。随着业务的不断扩大，通过传统的方式进行数据的读取，系统在读写方面都会遇到瓶颈。针对这一情况，将数据存放在内存中，所有的读操作都通过内存进行查询，提高了系统的数据查询能力。对于数据的读，在高并发的业务场景下，也可以将数据先写入内存中，在通过异步的方式持久化到磁盘中，提高了系统的并发能力。</p><p>2、存储用户登录<code>token</code>。针对用户登录鉴权，一般可以基于<code>cookie</code>、jwt来实现。<code>cookie</code>是基于文件存储，并且<code>cookie</code>会涉及到跨域、分布式架构问题，jwt由于是基于客户端断存储方案，服务端无法直接控制登录<code>token</code>的状态。由于Redis是具备分布式部署架构，很好的解决了分布式架构<code>token</code>鉴权、用户登录状态等问题的控制。同时将登录<code>token</code>存放在Redis中，每次读取都采用内存读取，也提高了整个系统的性能。</p><p>3、秒杀场景。对于秒杀业务场景，对于系统的并发能力都是非常高的。在该场景下，将商品数据存储到Redis中，提高了系统的查询能力，减少了MySQL的压力。将商品库存都存储到Redis中，因Redis采用的是单线程架构，也可以实现商品超卖问题。</p><p>4、用户签到。可以使用 <code>bitmap</code> 数据类型，将用户签到存储在Redis中，然后通过异步线程将数据存储到MySQL中。既节约了内存，也提供了系统的读写能力。</p><p>5、消息队列。Redis提供 <code>list</code> 数据类型，技能用来做消息队列，也能用来做栈等场景。在 Redis5.0 开始，也提供了一种 <code>stream</code> 数据类型，提高了消息队列的可靠性。</p><p>6、社交场景。Redis提供了两种集合数据类型(set sortset)，可以用在积分排行、好友推荐等场景。</p><p>7、就近推荐。Redis中提供了一种 <code>Geospatials</code> 的数据类型来进行位运算。可以根据用户当前的经纬度，来计算附近的酒店、商场等场所的搜索与推荐功能。</p><p>8、分布式锁。当分布式架构中，需要对共享数据的读写操作(例如商品秒杀)。为了保证数据的一致性，一般是采用分布式锁实现，Redis能够非常简单的实现分布式锁功能。可以直接使用 <code>setnx key value + expire time</code> 操作，为了实现原子性操作，也可以直接使用 <code>lua</code> 实现。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/411888708">https://zhuanlan.zhihu.com/p/411888708</a><br>[2] <a href="https://redis.io/docs/getting-started/">https://redis.io/docs/getting-started/</a><br>[3] <a href="https://zhuanlan.zhihu.com/p/609596571">https://zhuanlan.zhihu.com/p/609596571</a><br>[4] <a href="https://zhuanlan.zhihu.com/p/270168739">https://zhuanlan.zhihu.com/p/270168739</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Redis安装使用入门，包含基本知识和命令行客户端使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Redis" scheme="http://silencezheng.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Pyinstaller逆向初体验</title>
    <link href="http://silencezheng.top/2023/08/08/article114/"/>
    <id>http://silencezheng.top/2023/08/08/article114/</id>
    <published>2023-08-08T15:28:09.000Z</published>
    <updated>2023-08-08T15:28:55.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写了个Python小工具，突然想到防逆向的问题，写篇小文实践一下。</p><span id="more"></span><h2 id="用PyInstaller打包程序"><a href="#用PyInstaller打包程序" class="headerlink" title="用PyInstaller打包程序"></a>用PyInstaller打包程序</h2><p>对有图形界面的程序，最简单的打包就是<code>pyinstaller -F --noconsole xxx.py</code>。</p><h2 id="反编译该程序"><a href="#反编译该程序" class="headerlink" title="反编译该程序"></a>反编译该程序</h2><p>一个比较经典的工具是<a href="https://github.com/WithSecureLabs/python-exe-unpacker">pyinstxtractor</a>。</p><p>对于Windows中打包的Python应用（python3.9，pyinstaller5.x+），可以直接提取。但对于同配置下MacOS中打包的应用不能提取。下面简单演示如何使用。</p><p>首先下载项目代码，将待提取可执行文件置于项目根目录下，以我反编译的项目<code>replacer.exe</code>为例，运行<code>python python_exe_unpack.py -i replacer.exe</code>。</p><p>运行后根目录下会出现<code>unpacked</code>目录，其中为抽取出的<code>pyc</code>文件。找到其中的程序入口文件，通常与可执行文件名字相同，或为<code>main</code>等，但也很可能不符合这一规律，所以需要自行确定，这里我的程序入口就是<code>replace</code>。修改抽取出的入口文件名，增加后缀为 <code>replace.pyc</code>。</p><p>然后执行<code>uncompyle6 replacer.pyc&gt;replacer.py</code>，反编译<code>pyc</code>文件为源代码。这一步你很可能在反编译出的文件中发现类似<code>Unknown magic number 227 in replacer.pyc</code>的错误，这是因为不同Python版本的<code>pyc</code>文件前缀<code>Magic Number</code>不同，我们需要找到对应版本的<code>Magic Number</code>。一种简单的办法是把抽取出的<code>struct</code>文件，也修改为<code>struct.pyc</code>并对其进行反编译，如果能反编译成功，则将其文件前缀应用到<code>replace.pyc</code>中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">od -c struct.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">0000000    3  \r  \r  \n   p   y   i   0 001 001  \0  \0 343  \0  \0  \0</span><br><span class="line">0000020   \0  \0  \0  \0  \0  \0  \0  \0  \0  \b  \0  \0  \0   @  \0  \0</span><br><span class="line">0000040   \0   s   8  \0  \0  \0   d  \0   d 001   d 002   d 003   d 004</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再反观<code>replacer.pyc</code>，明显缺少前缀。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">od -c replacer.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">0000000  343  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">0000020   \0 004  \0  \0  \0   @  \0  \0  \0   s 350  \0  \0  \0   d  \0</span><br><span class="line">0000040    d 001   l  \0   Z  \0   d  \0   d 001   l 001   Z 001   d  \0</span><br></pre></td></tr></table></figure><p>于是我们给<code>replacer.pyc</code>加上合适的<code>Magic Number</code>文件前缀，在这里是<code>3  \r  \r  \n   p   y   i   0 001 001  \0  \0</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim -b replacer.pyc</span><br><span class="line"><span class="comment"># 命令模式输入</span></span><br><span class="line">:%!xxd</span><br><span class="line"><span class="comment"># 显示左侧是16进制，右侧是原文件</span></span><br><span class="line"><span class="comment"># VIM把这些当做普通的字符串对待，所以，修改了左侧的16进制的字符后右侧的字符并不会跟着改变，反之亦然。</span></span><br><span class="line"><span class="comment"># 注意修改完成后,不要保存,要再用 </span></span><br><span class="line">:%!xxd -r</span><br><span class="line"><span class="comment"># 切换成文本状态格式再保存.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式：</span></span><br><span class="line"><span class="comment"># 找到起始位置，例如这里是e300</span></span><br><span class="line"><span class="comment"># 然后同样方式打开 xxx.pyc，把起始位置之前的内容复制到replacer.pyc中左侧。</span></span><br><span class="line"><span class="comment"># 然后 :%!xxd -r 后wq保存。</span></span><br></pre></td></tr></table></figure><p>但笔者的MacOS13进行如上操作后依然无法解析，报错<code>struct.error: unpack requires a buffer of 2 bytes</code>，换用Windows后解决，成功反编译出了<code>replacer</code>的源码。</p><p>PS：添加前缀后报错：<code>Ill-formed bytecode file replacer.pyc &lt;class &#39;ValueError&#39;&gt;; bad marshal data (unknown type code)</code>通常也是由于<code>Magic Number</code>不对，对于python3.8及以上版本打包的可执行文件反编译似乎需要使用pycdc，还没验证。笔者测试了3.6、3.8和3.9打包的可执行文件，3.8和3.9均无法通过上述方法反编译，猜测是3.8后续更新导致。</p><p>PPS：上述<code>.pyc</code>反编译工具的作者也有点难顶啊<a href="https://github.com/rocky/python-uncompyle6/issues/316">😆</a>，另外Pyinstaller的<a href="https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-executables">官方文档</a>有时间也应该读一下。</p><h2 id="在打包时加密程序"><a href="#在打包时加密程序" class="headerlink" title="在打包时加密程序"></a>在打包时加密程序</h2><p>在<code>pyinstaller</code>打包时进行加密，只需要添加参数<code>--key</code>即可，例如<code>pyinstaller -F --noconsole --key 12345 xxx.py</code>。</p><p>Windows上使用这个参数需要安装<code>tinyaes</code>（或<code>pycrypto</code>），这个库需要<code>Microsoft Visual C++</code>，还要去安装<code>Microsoft Visual C++ Build Tools</code>。</p><h2 id="反编译加密的程序（未实践）"><a href="#反编译加密的程序（未实践）" class="headerlink" title="反编译加密的程序（未实践）"></a>反编译加密的程序（未实践）</h2><p>用上面的方法加密后，<code>PYZ-00.pyz_extracted</code>中的文件就被加密了，也就是说仅能反编译出程序入口的源码。</p><h2 id="用Cython加密程序"><a href="#用Cython加密程序" class="headerlink" title="用Cython加密程序"></a>用Cython加密程序</h2><p>待补充，用Mac磕磕绊绊，丧失兴趣了～</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/109266820">https://zhuanlan.zhihu.com/p/109266820</a><br>[2] <a href="https://blog.csdn.net/as604049322/article/details/119834495">https://blog.csdn.net/as604049322/article/details/119834495</a><br>[3] <a href="https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-archives">https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-archives</a><br>[4] <a href="https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-executables">https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-executables</a><br>[5] <a href="https://github.com/WithSecureLabs/python-exe-unpacker">https://github.com/WithSecureLabs/python-exe-unpacker</a><br>[6] <a href="https://blog.csdn.net/qq_15969343/article/details/120001351">https://blog.csdn.net/qq_15969343/article/details/120001351</a><br>[7] <a href="https://github.com/rocky/python-decompile3">https://github.com/rocky/python-decompile3</a><br>[8] <a href="https://github.com/rocky/python-uncompyle6/">https://github.com/rocky/python-uncompyle6/</a><br>[9] <a href="https://blog.csdn.net/Zheng__Huang/article/details/112380221">https://blog.csdn.net/Zheng__Huang/article/details/112380221</a><br>[10] <a href="https://blog.csdn.net/weixin_44222568/article/details/111672799">https://blog.csdn.net/weixin_44222568/article/details/111672799</a><br>[11] <a href="https://www.cnblogs.com/Here-is-SG/p/15885799.html">https://www.cnblogs.com/Here-is-SG/p/15885799.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写了个Python小工具，突然想到防逆向的问题，写篇小文实践一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
    <category term="逆向" scheme="http://silencezheng.top/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>EqualsAndHashCode注解使用注意</title>
    <link href="http://silencezheng.top/2023/08/06/article113/"/>
    <id>http://silencezheng.top/2023/08/06/article113/</id>
    <published>2023-08-06T11:16:30.000Z</published>
    <updated>2023-08-06T11:18:43.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>派生类中@EqualsAndHashCode注解使用的注意事项。</p><p>其实就是派生类什么时候需要显示指定<code>@EqualsAndHashCode(callSuper = true)</code>的问题。<br><span id="more"></span></p><h2 id="重写equals要重写hashCode"><a href="#重写equals要重写hashCode" class="headerlink" title="重写equals要重写hashCode"></a>重写equals要重写hashCode</h2><p>在 Java 中，<code>hashCode()</code> 方法用于计算对象的哈希码，而哈希码在散列数据结构中用于确定对象的存储位置。当使用散列数据结构存储对象时，首先会根据对象的哈希码来确定存储位置，然后使用 <code>equals()</code> 方法来检查是否有碰撞（即两个不同的对象有相同的哈希码）。如果 <code>hashCode()</code> 和 <code>equals()</code> 方法不一致，可能会导致以下问题：</p><ol><li><p>在散列数据结构中查找对象时，可能无法找到预期的对象，因为 <code>hashCode()</code> 不同导致对象存储在不同的位置。</p></li><li><p>当使用对象作为键（key）存储在 <code>HashMap</code> 或 <code>Hashtable</code> 中时，由于哈希码不一致，可能无法正确地查找或删除对应的值（value）。</p></li><li><p>在使用 <code>HashSet</code> 存储对象时，可能会允许重复的对象进入集合，因为 <code>HashSet</code> 使用哈希码来检查对象是否已经存在，而哈希码不同意味着对象不同，即使它们的 <code>equals()</code> 方法返回 <code>true</code>。</p></li></ol><p>为了避免这些问题，在重写 <code>equals()</code> 方法时同时重写 <code>hashCode()</code> 方法，并且要确保两个方法在比较对象是否相等时一致。在重写 <code>hashCode()</code> 方法时，应该确保相等的对象返回相同的哈希码，这样可以保证对象在散列数据结构中能够正确存储和检索。</p><h2 id="EqualsAndHashCode注解的callSuper属性"><a href="#EqualsAndHashCode注解的callSuper属性" class="headerlink" title="@EqualsAndHashCode注解的callSuper属性"></a>@EqualsAndHashCode注解的callSuper属性</h2><p><code>@EqualsAndHashCode</code> 是 Lombok 注解中的一个，用于自动生成 <code>equals()</code> 和 <code>hashCode()</code> 方法。其中，<code>callSuper</code> 属性是一个布尔值，用于指定是否在生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法中调用父类的对应方法。</p><p>默认情况下，<code>callSuper</code> 属性的值为 <code>false</code>，即不调用父类的 <code>equals()</code> 和 <code>hashCode()</code> 方法。这意味着如果一个类继承自另一个类并使用 <code>@EqualsAndHashCode</code> 注解来生成方法，它只会考虑自己的成员变量，不考虑从父类继承的成员变量。</p><p>当 <code>callSuper</code> 属性的值为 <code>true</code> 时，Lombok 会在生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法中调用父类的对应方法。这样做可以确保在比较两个对象是否相等时，除了考虑子类自己的成员变量外，还会考虑父类的成员变量。这对于包含继承关系的类结构是很有用的，因为它保证了在比较对象时考虑了所有继承链上的成员变量。</p><h2 id="派生类需要显示指定-EqualsAndHashCode-callSuper-true"><a href="#派生类需要显示指定-EqualsAndHashCode-callSuper-true" class="headerlink" title="派生类需要显示指定@EqualsAndHashCode(callSuper = true)"></a>派生类需要显示指定@EqualsAndHashCode(callSuper = true)</h2><p>现在来解释为什么在派生类上已经有 <code>@Data</code> 注解时，仍然需要加入 <code>@EqualsAndHashCode(callSuper = true)</code> 注解：</p><ol><li><p>如果在派生类上仅使用 <code>@Data</code> 注解而没有 <code>@EqualsAndHashCode</code> 注解，那么生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法只会考虑派生类自己的成员变量，而不会考虑从父类继承的成员变量。这可能会导致在比较对象时忽略了所包含的父类属性，从而出现错误的结果。</p></li><li><p>如果在派生类上同时使用 <code>@Data</code> 和 <code>@EqualsAndHashCode(callSuper = true)</code> 注解，那么生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法会考虑派生类自己的成员变量，同时也会调用父类的对应方法，确保了继承链上所有成员变量都会被考虑在内。</p></li></ol><p>综上，当派生类需要考虑继承自父类的成员变量时，应该在派生类上使用 <code>@EqualsAndHashCode(callSuper = true)</code> 注解。而如果派生类只需要考虑自己的成员变量，不涉及继承关系，那么可以仅使用 <code>@Data</code> 注解而不添加 <code>@EqualsAndHashCode</code> 注解。</p><h2 id="Lombok全局配置callSuper"><a href="#Lombok全局配置callSuper" class="headerlink" title="Lombok全局配置callSuper"></a>Lombok全局配置callSuper</h2><p>在 Lombok 中，全局配置 <code>callSuper</code> 属性可以通过使用配置文件或在注解处理器的命令行参数中设置。这样可以为整个项目中的所有类统一配置 <code>callSuper</code> 属性的默认值。</p><p>在项目中配置 Lombok 的全局属性有以下两种方法：</p><ol><li>使用 <code>lombok.config</code> 文件：</li></ol><p>在项目的根目录（通常可以放在<code>src/main/java</code>下）下创建一个名为 <code>lombok.config</code> 的文件，并在该文件中添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明该配置文件是一个根配置文件，从该配置文件所在的目录开始扫描</span></span><br><span class="line"><span class="attr">config.stopBubbling</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 全局配置 equalsAndHashCode 的 callSuper 属性为true</span></span><br><span class="line"><span class="attr">lombok.equalsAndHashCode.callSuper</span>=call</span><br></pre></td></tr></table></figure><p>这样，所有使用 <code>@EqualsAndHashCode</code> 注解的类都会自动设置 <code>callSuper</code> 属性为 <code>true</code>，即在生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法中调用父类的对应方法。</p><ol><li>使用注解处理器的命令行参数：</li></ol><p>在构建工具中配置注解处理器的命令行参数，将 <code>lombok.equalsAndHashCode.callSuper</code> 设置为 <code>true</code>。具体方法根据使用的构建工具有所不同：</p><ul><li>对于 Maven，可以在 <code>pom.xml</code> 文件中添加以下配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArg</span>&gt;</span>-Alombok.equalsAndHashCode.callSuper=true<span class="tag">&lt;/<span class="name">compilerArg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意替换 <code>$&#123;lombok.version&#125;</code> 为你使用的 Lombok 版本。</p><ul><li>对于 Gradle，可以在 <code>build.gradle</code> 文件中添加以下配置（不一定对）：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    annotationProcessor <span class="string">&quot;org.projectlombok:lombok:$&#123;lombokVersion&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="keyword">options</span>.compilerArgs &lt;&lt; <span class="string">&quot;-Alombok.equalsAndHashCode.callSuper=true&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意替换 <code>lombokVersion</code> 为你使用的 Lombok 版本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/460297314">https://zhuanlan.zhihu.com/p/460297314</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;派生类中@EqualsAndHashCode注解使用的注意事项。&lt;/p&gt;
&lt;p&gt;其实就是派生类什么时候需要显示指定&lt;code&gt;@EqualsAndHashCode(callSuper = true)&lt;/code&gt;的问题。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Lombok" scheme="http://silencezheng.top/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate--SpringBoot接口调用整合</title>
    <link href="http://silencezheng.top/2023/08/06/article112/"/>
    <id>http://silencezheng.top/2023/08/06/article112/</id>
    <published>2023-08-06T10:48:12.000Z</published>
    <updated>2023-08-06T10:56:05.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot整合RestTemplate实现接口调用入门。</p><span id="more"></span><h2 id="什么是RestTemplate"><a href="#什么是RestTemplate" class="headerlink" title="什么是RestTemplate"></a>什么是RestTemplate</h2><p><code>RestTemplate</code>是Spring框架中提供的用于以同步方式发送HTTP请求和处理HTTP响应的类。它是一个用于访问RESTful服务的模板类，简化了在Java应用程序中进行HTTP通信的过程。</p><p><code>RestTemplate</code>提供了一系列方法来执行HTTP请求，例如GET、POST、PUT、DELETE等，并能够自动将HTTP响应转换为Java对象（如JSON转换为POJO）。它支持各种HTTP协议，如HTTP、HTTPS，并且可以与其他Spring框架组件（如Spring MVC和Spring Boot）无缝集成。</p><p>底层实现上，<code>RestTemplate</code>默认构造函数使用<code>java.net.HttpURLConnection</code>执行请求。用户可以通过实现<code>ClientHttpRequestFactory</code>接口来切换到不同的HTTP库。内置支持以下库：</p><ul><li>Apache HttpComponents</li><li>Netty</li><li>OkHttp</li></ul><h2 id="RestTemplate提供的方法"><a href="#RestTemplate提供的方法" class="headerlink" title="RestTemplate提供的方法"></a>RestTemplate提供的方法</h2><p>RestTemplate 提供高度封装的接口。</p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>getForObject</td><td>通过GET请求获取资源的表示。</td></tr><tr><td>getForEntity</td><td>通过GET请求获取资源的<code>ResponseEntity</code>（包含状态、响应头和响应体）。</td></tr><tr><td>headForHeaders</td><td>通过HEAD请求获取资源的所有头信息。</td></tr><tr><td>postForLocation</td><td>通过POST请求创建新资源，并从响应中返回Location头信息。</td></tr><tr><td>postForObject</td><td>通过POST请求创建新资源，并从响应中返回资源的表示。</td></tr><tr><td>postForEntity</td><td>通过POST请求创建新资源，并从响应中返回资源的<code>ResponseEntity</code>（包含状态、响应头和响应体）。</td></tr><tr><td>put</td><td>通过PUT请求创建或更新资源。</td></tr><tr><td>patchForObject</td><td>通过PATCH请求更新资源，并从响应中返回资源的表示。请注意，JDK HttpURLConnection不支持PATCH，但Apache HttpComponents和其他库支持。</td></tr><tr><td>delete</td><td>通过DELETE请求删除指定URI的资源。</td></tr><tr><td>optionsForAllow</td><td>通过OPTIONS请求获取资源允许的HTTP方法。</td></tr><tr><td>exchange</td><td>通用的（灵活但不局限于特定用途）请求方法，提供额外的灵活性。它接受<code>RequestEntity</code>作为输入，其中包含HTTP方法、URL、头信息和请求体，并返回<code>ResponseEntity</code>。</td></tr><tr><td>execute</td><td>最通用的执行请求的方式，完全控制请求准备和响应提取，通过回调接口实现。</td></tr></tbody></table></div><h2 id="Springboot整合RestTemplate"><a href="#Springboot整合RestTemplate" class="headerlink" title="Springboot整合RestTemplate"></a>Springboot整合RestTemplate</h2><p>分别采用默认方式和Apache HttpComponents进行实践。</p><h3 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h3><p>仅需要：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加配置类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在控制器中加入<code>restTemplate</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br></pre></td></tr></table></figure></p><p>当然也可以在Service中加入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceImpl</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写简单的接口访问代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHttpGetRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;https://api.example.com/data&quot;</span>;</span><br><span class="line">    ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        String responseBody = response.getBody();</span><br><span class="line">        <span class="comment">// 处理响应数据</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误响应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Apache-HttpComponents发送请求"><a href="#Apache-HttpComponents发送请求" class="headerlink" title="Apache HttpComponents发送请求"></a>Apache HttpComponents发送请求</h3><p>Apache HttpComponents是一个开源的Java HTTP库，用于处理HTTP请求和响应。它是Apache软件基金会下的一个项目，提供了一组可重用的组件，可以轻松地在Java应用程序中进行HTTP通信。</p><p>Apache HttpComponents由两个子项目组成：</p><ol><li><p>HttpClient：这是一个完整的HTTP客户端库，用于发送HTTP请求和处理HTTP响应。它提供了一组简单而强大的API，可以执行各种HTTP方法（GET、POST、PUT、DELETE等），设置请求头，处理响应，处理Cookies等。</p></li><li><p>HttpCore：这是一个核心HTTP处理库，为HTTP客户端和服务器提供了低级别的HTTP支持。它定义了HTTP协议的基本元素，如请求、响应、头部、实体等，为客户端和服务器实现提供了基础功能。</p></li></ol><p>添加HttpClient依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在配置文件中写入参数：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http_pool:</span></span><br><span class="line">  <span class="attr">max_total:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">default_max_per_route:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">connect_timeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">connection_request_timeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">socket_timeout:</span> <span class="number">65000</span></span><br><span class="line">  <span class="attr">validate_after_inactivity:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure></p><p>创建HTTP参数类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpValues</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.max_total&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxTotal;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.default_max_per_route&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPerRoute;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.connect_timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> connTimeOut;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.connection_request_timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> connReqTimeOut;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.socket_timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> socketTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.validate_after_inactivity&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> inactivity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建配置类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HttpValues appValues;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(httpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个自定义的 ClientHttpRequestFactory Bean。</span></span><br><span class="line"><span class="comment">     * ClientHttpRequestFactory 是 Spring 提供的用于创建 ClientHttpRequest 的工厂接口。</span></span><br><span class="line"><span class="comment">     * 这里使用了基于 Apache HttpComponents 的 HttpComponentsClientHttpRequestFactory 实现。</span></span><br><span class="line"><span class="comment">     * HttpComponentsClientHttpRequestFactory 使用了自定义的 HttpClient 对象来发送 HTTP 请求。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 ClientHttpRequestFactory 对象，用于创建 ClientHttpRequest。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">httpRequestFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个新的 HttpComponentsClientHttpRequestFactory 对象，并传入自定义的 HttpClient。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory(httpClient());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个自定义的 HttpClient Bean。</span></span><br><span class="line"><span class="comment">     * 这个方法使用了连接池来管理 HTTP 连接，提高了性能和效率。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 HttpClient 对象，可以用于发送 HTTP 请求。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpClient <span class="title">httpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Registry，用于管理不同协议的连接工厂。</span></span><br><span class="line">        Registry&lt;ConnectionSocketFactory&gt; registry = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()</span><br><span class="line">                <span class="comment">// 注册 HTTP 协议的连接工厂，使用默认的 PlainConnectionSocketFactory。</span></span><br><span class="line">                .register(<span class="string">&quot;http&quot;</span>, PlainConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                <span class="comment">// 注册 HTTPS 协议的连接工厂，使用默认的 SSLConnectionSocketFactory。</span></span><br><span class="line">                .register(<span class="string">&quot;https&quot;</span>, SSLConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个连接池管理器，用于管理连接的复用和回收。</span></span><br><span class="line">        PoolingHttpClientConnectionManager connectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager(registry);</span><br><span class="line">        <span class="comment">// 设置连接池的最大连接数。</span></span><br><span class="line">        connectionManager.setMaxTotal(appValues.getMaxTotal());</span><br><span class="line">        <span class="comment">// 设置每个路由的最大连接数。</span></span><br><span class="line">        connectionManager.setDefaultMaxPerRoute(appValues.getMaxPerRoute());</span><br><span class="line">        <span class="comment">// 设置连接空闲多长时间后进行验证，避免空闲连接过多占用资源。</span></span><br><span class="line">        connectionManager.setValidateAfterInactivity(appValues.getInactivity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个请求配置对象，用于设置连接超时和读写超时等参数。</span></span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                <span class="comment">// 服务器返回数据的时间，超过该时间将抛出 read timeout 异常。</span></span><br><span class="line">                .setSocketTimeout(appValues.getSocketTimeout())</span><br><span class="line">                <span class="comment">// 连接上服务器的时间，超过该时间将抛出 connect timeout 异常。</span></span><br><span class="line">                .setConnectTimeout(appValues.getConnTimeOut())</span><br><span class="line">                <span class="comment">// 从连接池中获取连接的超时时间，超过该时间将抛出 ConnectionPoolTimeoutException 异常。</span></span><br><span class="line">                .setConnectionRequestTimeout(appValues.getConnReqTimeOut())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 HttpClientBuilder 创建一个 HttpClient 对象，并设置连接池管理器和请求配置。</span></span><br><span class="line">        <span class="keyword">return</span> HttpClientBuilder.create()</span><br><span class="line">                .setDefaultRequestConfig(requestConfig)</span><br><span class="line">                .setConnectionManager(connectionManager)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/students/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Students&gt; <span class="title">getStudentById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">    Students student = studentsService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (student != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果找到学生，返回状态码200 OK和学生对象</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(student);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果未找到学生，返回状态码404 NOT FOUND</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/rest/get/students+1/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">restGetTest</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:48081/students/&quot;</span> + String.valueOf(id+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 这里应该加入异常处理</span></span><br><span class="line">    ResponseEntity&lt;Students&gt; response = restTemplate.getForEntity(url, Students.class);</span><br><span class="line">    <span class="comment">// 获取响应</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        Students responseBody = response.getBody();</span><br><span class="line">        <span class="keyword">if</span> (responseBody!=<span class="keyword">null</span>) <span class="keyword">return</span> ResponseEntity.ok(responseBody.toString());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="string">&quot;Not Found&quot;</span>);</span><br><span class="line">        <span class="comment">// 处理响应数据</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误响应</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;Bad Request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于带路径参数的URL，可以用这种方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">String url = <span class="string">&quot;http://localhost:48081/students/&#123;1&#125;&quot;</span>;</span><br><span class="line">ResponseEntity&lt;Students&gt; response = restTemplate.getForEntity(url, Students.class, id+<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>对于添加请求头、Cookie、文件上传等等更多用法，在使用时查阅、积累即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.spring.io/spring-framework/docs/5.1.9.RELEASE/spring-framework-reference/integration.html#rest-resttemplate">https://docs.spring.io/spring-framework/docs/5.1.9.RELEASE/spring-framework-reference/integration.html#rest-resttemplate</a><br>[2] <a href="https://zhuanlan.zhihu.com/p/258121569">https://zhuanlan.zhihu.com/p/258121569</a><br>[3] <a href="https://www.cnblogs.com/javazhiyin/p/9851775.html">https://www.cnblogs.com/javazhiyin/p/9851775.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Spring Boot整合RestTemplate实现接口调用入门。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MinIO部署--SpringBoot文件存储整合</title>
    <link href="http://silencezheng.top/2023/07/23/article111/"/>
    <id>http://silencezheng.top/2023/07/23/article111/</id>
    <published>2023-07-23T14:36:32.000Z</published>
    <updated>2023-08-06T10:56:18.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MinIO对象存储服务开发机部署与Spring Boot项目整合入门。<br><span id="more"></span></p><h2 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h2><blockquote><p>MinIO 是一个基于 Go 实现的高性能、兼容 S3 协议的对象存储。它采用 GNU AGPL v3 开源协议，项目地址是 <a href="https://github.com/minio/minio，官网是">https://github.com/minio/minio，官网是</a> <a href="https://min.io。">https://min.io。</a></p><p>它适合存储海量的非结构化的数据，例如说图片、音频、视频等常见文件，备份数据、容器、虚拟机镜像等等，小到 1 KB，大到 5 TB 都可以支持。</p></blockquote><h2 id="MinIO的运行模式"><a href="#MinIO的运行模式" class="headerlink" title="MinIO的运行模式"></a>MinIO的运行模式</h2><p>MinIO 支持三种部署拓扑结构：</p><ol><li><p>单节点单驱动<br>Single-Node Single-Drive，也可称为SNSD 或 “Standalone”。</p><p>指具有单个存储卷或文件夹的单个 MinIO 服务器。 SNSD部署提供故障转移保护。驱动器级可靠性和故障转移取决于底层存储卷。SNSD部署最适合使用 MinIO 进行对象存储的应用程序的评估和初始开发。</p></li><li><p>单节点多驱动<br>Single-Node Multi-Drive，也可称为SNMD 或 “Standalone Multi-Drive”。</p><p>指具有四个或更多存储卷的单个 MinIO 服务器。 SNMD部署仅提供驱动器级可靠性和故障转移。</p></li><li><p>多节点多驱动<br>Multi-Node Multi-Drive，也可称为MNMD 或 “Distributed”。</p><p>指分布式 MinIO 服务器，所有服务器上至少有四个驱动器。分布式MNMD拓扑支持具有驱动器和节点级可用性和弹性的生产级对象存储。</p></li></ol><p>作为入门部署，下面仅展示SNSD部署。</p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>参考官方文档：<a href="https://min.io/download">https://min.io/download</a></p><p>仅考虑开发环境，用Docker部署是最方便的，下面是部署过程。</p><p>Docker部署（MacOS arm64）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看minio镜像</span></span><br><span class="line">docker search minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull minio/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地路径</span></span><br><span class="line">mkdir myminio myminio/config myminio/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建环境变量配置文件</span></span><br><span class="line">touch myminio/config/config.env</span><br><span class="line"></span><br><span class="line"><span class="comment"># config.env写入内容如下</span></span><br><span class="line"><span class="comment"># 设置 MinIO 服务器的root账号，此用户具有对部署中的任何资源执行 S3 和管理 API 操作的不受限制的权限。</span></span><br><span class="line">MINIO_ROOT_USER=myminioadmin</span><br><span class="line"><span class="comment"># 至少8位</span></span><br><span class="line">MINIO_ROOT_PASSWORD=minio-secret-key-change-me</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用于 MinIO 服务器的存储路径。</span></span><br><span class="line">MINIO_VOLUMES=<span class="string">&quot;/mnt/data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MINIO_SERVER_URL设置本地机器的主机名以用于 MinIO 服务器</span></span><br><span class="line"><span class="comment"># 取消注释以下行，并将该值替换为本地机器的正确主机名和 MinIO 服务器的端口（默认为 9000）</span></span><br><span class="line"><span class="comment">#MINIO_SERVER_URL=&quot;http://minio.example.net:9000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -dt                                  \</span><br><span class="line">  -p 9000:9000 -p 9090:9090                     \</span><br><span class="line">  -v /path/to/myminio/data:/mnt/data            \</span><br><span class="line">  -v /path/to/myminio/config:/etc               \</span><br><span class="line">  -e <span class="string">&quot;MINIO_CONFIG_ENV_FILE=/etc/config.env&quot;</span>    \</span><br><span class="line">  --name <span class="string">&quot;myminio&quot;</span>                              \</span><br><span class="line">  minio/minio server --console-address <span class="string">&quot;:9090&quot;</span></span><br></pre></td></tr></table></figure></p><p>MinIO中默认配置9000端口是用于访问MinIO的对象存储服务的API端口，通过该端口可以执行各种对象存储相关的操作。而9090端口是用于访问MinIO的管理界面，通过该端口可以登录并执行MinIO实例的管理操作。</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>运行容器成功后，可以通过MinIO的管理界面进行简单配置，访问 <a href="http://localhost:9090">http://localhost:9090</a> 进入管理界面。</p><p><img src="/assets/post_img/article111/shouye.png" alt="首页"></p><p>然后新建存储桶，用于文件上传。点击桶，选择<code>Anonymoous</code>创建一条Prefix为<code>/</code>，Access为<code>readonly</code>的匿名访问规则。</p><p><img src="/assets/post_img/article111/mybucket.png" alt="规则"></p><p>这样配置以后，文件访问地址的格式为<code>http://localhost:9000/mybucket/&#123;filename&#125;</code>。</p><p>另外，MinIO Client (mc) 是 MinIO 提供的命令行工具，用于访问 MinIO Server。它的命令设计的非常棒，和我们在使用 ls、cat、cp、mirror、diff、find 等 Unix 命令基本接近，主要如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>       列出文件和文件夹</span><br><span class="line">mb       创建一个存储桶或一个文件夹</span><br><span class="line"><span class="built_in">cat</span>      显示文件和对象内容</span><br><span class="line">pipe     将一个 STDIN 重定向到一个对象或者文件或者 STDOUT</span><br><span class="line">share    生成用于共享的 URL</span><br><span class="line"><span class="built_in">cp</span>       拷贝文件和对象</span><br><span class="line">mirror   给存储桶和文件夹做镜像</span><br><span class="line">find     基于参数查找文件</span><br><span class="line"><span class="built_in">diff</span>     对两个文件夹或者存储桶比较差异</span><br><span class="line"><span class="built_in">rm</span>       删除文件和对象</span><br><span class="line">events   管理对象通知</span><br><span class="line">watch    监听文件和对象的事件</span><br><span class="line">policy   管理访问策略</span><br><span class="line">session  为 <span class="built_in">cp</span> 命令管理保存的会话</span><br><span class="line">config   管理 mc 配置文件</span><br><span class="line">update   检查软件更新</span><br><span class="line">version  输出版本信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用举例：列出有哪些存储桶</span></span><br><span class="line">mc <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="整合Spring-Boot项目"><a href="#整合Spring-Boot项目" class="headerlink" title="整合Spring Boot项目"></a>整合Spring Boot项目</h2><p>下面在Spring Boot项目引入MinIO相关依赖实现文件的上传与删除的功能。</p><p>引入依赖如下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MinIO 客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>新建 <code>MinIOConfiguration</code> 配置类，创建 <code>MinioClient Bean</code>，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinIOConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MinioClient <span class="title">minioClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Minio 配置。实际项目中，定义到 application.yml 配置文件中</span></span><br><span class="line">        String endpoint = <span class="string">&quot;http://localhost:9000&quot;</span>;</span><br><span class="line">        String accessKey = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        String secretKey = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 MinioClient 客户端</span></span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 <code>MinIOFileController</code> 类，实现文件上传与删除的 RESTful API 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/minio&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;MinIO文件操作接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinIOFileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Minio 配置。实际项目中，定义到 application.yml 配置文件中</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint = <span class="string">&quot;http://127.0.0.1:9000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String bucket = <span class="string">&quot;mybucket&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 上传</span></span><br><span class="line">        String path = UUID.randomUUID().toString(); <span class="comment">// 文件名，使用 UUID 随机</span></span><br><span class="line">        minioClient.putObject(PutObjectArgs.builder()</span><br><span class="line">                .bucket(bucket) <span class="comment">// 存储桶</span></span><br><span class="line">                .object(path) <span class="comment">// 文件名</span></span><br><span class="line">                .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>) <span class="comment">// 文件内容</span></span><br><span class="line">                .contentType(file.getContentType()) <span class="comment">// 文件类型</span></span><br><span class="line">                .build());</span><br><span class="line">        <span class="comment">// 拼接路径</span></span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s/%s/%s&quot;</span>, endpoint, bucket, path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="meta">@RequestParam(&quot;path&quot;)</span> String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        minioClient.removeObject(RemoveObjectArgs.builder()</span><br><span class="line">                .bucket(bucket) <span class="comment">// 存储桶</span></span><br><span class="line">                .object(path) <span class="comment">// 文件名</span></span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开Swagger界面就可以进行接口测试了，上传返回结果示例如下。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">127.0.0.1:9000</span>/mybucket/a<span class="number">72</span>a<span class="number">02</span>c<span class="number">5</span>-<span class="number">4</span>dff-<span class="number">44</span>d<span class="number">8</span>-<span class="number">841</span>b-ad<span class="number">5</span>a<span class="number">3</span>b<span class="number">4</span>c<span class="number">5</span>b<span class="number">71</span></span><br></pre></td></tr></table></figure></p><p>直接浏览器输入地址就可以看到，或者在管理界面查看。</p><p><img src="/assets/post_img/article111/upload.png" alt="上传"></p><p>删除时，以文件路径作为参数输入即可，如<code>a72a02c5-4dff-44d8-841b-ad5a3b4c5b71</code>。</p><h2 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h2><p>如果有上传大文件的需求，在没有配置类的情况下，可以通过配置文件设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">multipart:</span></span><br><span class="line">        <span class="attr">max-file-size:</span> <span class="string">500MB</span></span><br><span class="line">        <span class="attr">max-request-size:</span> <span class="string">500MB</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://min.io/docs/minio/container/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html">https://min.io/docs/minio/container/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html</a><br>[2] <a href="https://www.iocoder.cn/Spring-Boot/MinIO/?yudao">https://www.iocoder.cn/Spring-Boot/MinIO/?yudao</a><br>[3] <a href="https://blog.csdn.net/BThinker/article/details/125412751">https://blog.csdn.net/BThinker/article/details/125412751</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;MinIO对象存储服务开发机部署与Spring Boot项目整合入门。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
    <category term="MinIO" scheme="http://silencezheng.top/tags/MinIO/"/>
    
  </entry>
  
  <entry>
    <title>Git换行符警告排查记录</title>
    <link href="http://silencezheng.top/2023/07/22/article110/"/>
    <id>http://silencezheng.top/2023/07/22/article110/</id>
    <published>2023-07-22T13:26:10.000Z</published>
    <updated>2023-07-22T13:28:10.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Git上传文件的时候提示<code>warning: in the working copy of &#39;xxx&#39;, CRLF will be replaced by LF the next time Git touches it</code><br><span id="more"></span></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p><code>warning: in the working copy of &#39;xxx&#39;, CRLF will be replaced by LF the next time Git touches it</code>表示Git检测到在当前代码库中存在不同的换行符风格，它指出Git在下次处理文件时将替换CRLF（回车+换行）换行符为LF（仅换行）换行符。</p><p>我是在使用Hexo上传时出现该问题的，相关文件为文章对应的index.html，因此可能是hexo生成了CRLF换行的html文件导致。</p><h2 id="检查问题文件"><a href="#检查问题文件" class="headerlink" title="检查问题文件"></a>检查问题文件</h2><p><code>hexo clean</code> 后重新生成页面，检查问题页面如下，未发现问题，都是LF换行的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% od -c index.html</span><br><span class="line"></span><br><span class="line">0000000    &lt;   !   D   O   C   T   Y   P   E       h   t   m   l   &gt;  \n</span><br><span class="line">0000020    &lt;   h   t   m   l   &gt;  \n   &lt;   h   e   a   d   &gt;  \n        </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="检查Git配置"><a href="#检查Git配置" class="headerlink" title="检查Git配置"></a>检查Git配置</h2><p>先在非git目录下检查了全局配置<code>git config --list</code>如下，按道理来说没什么问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">core.autocrlf=input</span><br></pre></td></tr></table></figure><blockquote><p><code>core.autocrlf</code>是Git中的一个配置选项，用于处理跨平台开发时的换行符问题。它用于指定Git在提交和检出文件时是否自动转换换行符的行为。对于多平台协作的项目，特别是在Windows和类Unix系统（如MacOS和Linux）之间进行开发时，配置<code>core.autocrlf</code>可以确保换行符的一致性，避免在版本控制时频繁更改换行符导致的冲突。</p><p><code>core.autocrlf</code>有三个可选值：</p><ol><li><code>true</code>：表示Git会在提交时将CRLF（回车+换行）转换为LF（仅换行），在检出时将LF转换为CRLF。适用于Windows开发者在与类Unix系统的开发者合作时使用。</li><li><code>false</code>：表示Git不会自动转换换行符。适用于在Unix类系统上开发，或者确保文件的换行符保持不变时使用。</li><li><code>input</code>：表示Git会在提交时将CRLF转换为LF，在检出时不做任何转换。适用于在Windows上开发，但在版本库中保留LF换行符的项目。</li></ol></blockquote><p>又到hexo根目录下的<code>.deploy_git</code>查看了，也是一样，这个配置应该不会出什么问题。</p><h2 id="检查Git历史提交"><a href="#检查Git历史提交" class="headerlink" title="检查Git历史提交"></a>检查Git历史提交</h2><p>又继续了解了一下，似乎历史提交中出现过CRLF换行的文件也会显示该警告，于是去查看历史提交记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p -- filename</span><br></pre></td></tr></table></figure><p>翻看记录，出现红色<code>^M</code>则是包含CRLF的地方，看到之前在Windows电脑上配置的Gitalk插件是CRLF格式的。</p><p>遂修改，解决。其实第一步就能解决了，查找的时候忘记直接搜<code>\r</code>了…</p><h2 id="CR和LF"><a href="#CR和LF" class="headerlink" title="CR和LF"></a>CR和LF</h2><p>CR（Carriage Return）和LF（Line Feed）是两个控制字符，通常用于表示文本文件中的行尾。</p><ol><li><p><strong>CR（Carriage Return）</strong>：</p><ul><li>在ASCII码中，CR的值为十进制13或十六进制0x0D。</li><li>CR通常表示为<code>\r</code>。</li><li>在早期的打字机和终端设备中，CR用于将打印头或光标移动到行的开头，以便在新的文本输入开始时覆盖之前的内容。</li><li>在计算机文本中，CR通常用于表示行尾，即在CR之后的内容将从新的一行开始。在某些操作系统中（如Mac OS 9及之前版本），CR被用作行尾符。</li></ul></li><li><p><strong>LF（Line Feed）</strong>：</p><ul><li>在ASCII码中，LF的值为十进制10或十六进制0x0A。</li><li>LF通常表示为<code>\n</code>。</li><li>LF在计算机文本中广泛用于表示行尾，即在LF之后的内容将从新的一行开始。在Unix、Linux和现代Mac OS等操作系统中，LF通常被用作行尾符。</li></ul></li></ol><p>在不同的操作系统和文本编辑器中，对于文本文件的行尾表示方式可能不同：</p><ul><li>Unix/Linux/MacOS使用LF（<code>\n</code>）作为行尾符。</li><li>Windows使用CRLF（<code>\r\n</code>   ）作为行尾符。</li></ul><p>在跨平台开发或处理文本文件时，注意行尾符的差异可能是很重要的。现代的文本编辑器和版本控制系统通常能够识别和处理不同行尾符的文件。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用Git上传文件的时候提示&lt;code&gt;warning: in the working copy of &amp;#39;xxx&amp;#39;, CRLF will be replaced by LF the next time Git touches it&lt;/code&gt;&lt;br&gt;</summary>
    
    
    
    
    <category term="Git" scheme="http://silencezheng.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Lombok常用注解</title>
    <link href="http://silencezheng.top/2023/07/22/article109/"/>
    <id>http://silencezheng.top/2023/07/22/article109/</id>
    <published>2023-07-22T11:24:40.000Z</published>
    <updated>2023-07-22T11:25:51.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整理一些Lombok的常用注解和注意事项（几乎包含所有主流注解了）。</p><span id="more"></span><blockquote><p>Lombok是通过在编译阶段进行字节码增强实现的，它利用Java的注解处理器机制，根据注解生成相应的代码，可以大幅减少 Java 代码的冗余和重复，提高开发效率。</p></blockquote><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p><code>@Data</code> 是 Lombok 提供的一个注解，它是一个组合注解，包含了以下注解的功能：</p><ol><li><code>@Getter</code>：生成属性的 getter 方法。</li><li><code>@Setter</code>：生成属性的 setter 方法。</li><li><code>@ToString</code>：生成 toString 方法，用于输出对象的字符串表示。</li><li><code>@EqualsAndHashCode</code>：生成 equals 和 hashCode 方法，用于对象的比较和哈希计算。</li></ol><p>使用 <code>@Data</code> 注解可以简化 POJO 类的编写。</p><p>以下是使用 <code>@Data</code> 注解的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自Java编译器，隐式无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @Getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @EqualsAndHashCode</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> LombokTest)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LombokTest other = (LombokTest)o;</span><br><span class="line">            <span class="keyword">if</span> (!other.canEqual(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getId() != other.getId()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Object <span class="keyword">this</span>$name = <span class="keyword">this</span>.getName();</span><br><span class="line">                Object other$name = other.getName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (other$name != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$name.equals(other$name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> other <span class="keyword">instanceof</span> LombokTest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> PRIME = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        result = result * <span class="number">59</span> + <span class="keyword">this</span>.getId();</span><br><span class="line">        Object $name = <span class="keyword">this</span>.getName();</span><br><span class="line">        result = result * <span class="number">59</span> + ($name == <span class="keyword">null</span> ? <span class="number">43</span> : $name.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @ToString</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LombokTest(id=&quot;</span> + <span class="keyword">this</span>.getId() + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，<code>@Data</code> 注解会生成所有属性的 getter 和 setter 方法，如果需要对某些属性进行特殊处理，可以使用其他注解，对指定的属性进行定制化配置。</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><p><code>@NoArgsConstructor</code> 是 Lombok 提供的一个注解，用于自动生成无参构造函数。它可以用在类上，表示为该类生成一个无参构造函数。如果类已经包含了其他有参构造函数，使用 <code>@NoArgsConstructor</code> 不会覆盖已有的构造函数。</p><p>以下是使用 <code>@NoArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><p><code>@AllArgsConstructor</code> 是 Lombok 提供的一个注解，用于自动生成包含所有属性的构造函数。它可以用在类上，表示为该类生成一个包含所有属性的构造函数。注意此时类中不可以包含全参构造函数代码。</p><p>以下是使用 <code>@AllArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><p><code>@Builder</code> 是 Lombok 提供的一个注解，用于自动生成构建器模式相关的代码。它可以用在类上，表示为该类生成一个构建器，用于简化创建对象的过程。使用构建器模式可以避免过多的构造函数重载，并提供更灵活的对象创建方式。</p><p>以下是使用 <code>@Builder</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lombok自动产生</span></span><br><span class="line">    LombokTest(<span class="keyword">int</span> id, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LombokTestBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LombokTestBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTestBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        LombokTestBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTestBuilder <span class="title">id</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTestBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTest <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LombokTest(<span class="keyword">this</span>.id, <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;LombokTest.LombokTestBuilder(id=&quot;</span> + <span class="keyword">this</span>.id + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就可以通过构造器模式创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">LombokTest lombokTest = LombokTest.builder().id(<span class="number">1</span>).name(<span class="string">&quot;lombok&quot;</span>).build(); <span class="comment">// 创建LombokTest对象</span></span><br><span class="line">System.out.println(LombokTest.builder().id(<span class="number">1</span>).name(<span class="string">&quot;lombok&quot;</span>)); <span class="comment">// LombokTest.LombokTestBuilder(id=1, name=lombok)</span></span><br></pre></td></tr></table></figure><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h2><p>将<code>@NonNull</code>注解放在属性上，表示该属性不能为<code>null</code>，否则会在运行时抛出<code>NullPointerException</code>。</p><p>以下是使用 <code>@NonNull</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但注意这里将 <code>@NonNull</code> 注解用于<code>primitive</code>是无意义的，原始类型本身就不能是<code>null</code>。</p><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h2><p>将<code>@RequiredArgsConstructor</code>注解放在类上，它会生成一个包含所有标记了<code>@NonNull</code>注解的属性的构造函数。</p><p>以下是使用 <code>@RequiredArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String aString;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Double aDouble;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> String aString;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> Double aDouble;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="meta">@NonNull</span> String aString, <span class="meta">@NonNull</span> Double aDouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aString == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;aString is marked non-null but is null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aDouble == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;aDouble is marked non-null but is null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.aString = aString;</span><br><span class="line">            <span class="keyword">this</span>.aDouble = aDouble;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h2><p>将<code>@SneakyThrows</code>注解放在方法上，它会自动将受检异常转换为非受检异常抛出，避免在代码中显式地处理受检异常。</p><p>以下是使用 <code>@RequiredArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里抛出了一个受检异常，但是不需要显式地处理它</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果不使用该注解，通常我们需要如此处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 这里抛出了一个受检异常，需要显式地处理它</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example();</span><br><span class="line">        example.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于受检异常和非受检异常：</p><blockquote><p><code>java.lang.Throwable</code>是Java中所有错误和异常的根类。它是一个类层次结构的顶层类，表示可以被抛出的任何问题，包括错误（<code>Error</code>）和异常（<code>Exception</code>）。</p><p><code>Throwable</code>类包含以下几个重要的子类：</p><ol><li><p><code>Error</code>: 表示严重的系统错误，通常由Java虚拟机（JVM）报告，例如<code>OutOfMemoryError</code>、<code>StackOverflowError</code>等。<code>Error</code>类的实例通常表示不可恢复的错误情况，应用程序通常不应该捕获和处理<code>Error</code>。</p></li><li><p><code>Exception</code>: 表示可被捕获和处理的异常。<code>Exception</code>类又分为两类：</p><ul><li><p>受检异常（Checked Exception）：继承自<code>Exception</code>的子类，但不继承自<code>RuntimeException</code>的异常。受检异常在方法签名中必须显式地声明，或者在方法内部捕获和处理，否则编译器会报错。例如，<code>IOException</code>、<code>SQLException</code>等属于受检异常。</p></li><li><p>非受检异常（Unchecked Exception）：继承自<code>RuntimeException</code>的异常。非受检异常不需要在方法签名中显式地声明，也可以不在方法内部捕获和处理。通常是由程序编程错误引起的，例如<code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>等。</p></li></ul></li></ol><p><code>Throwable</code>类定义了以下一些重要的方法：</p><ul><li><code>getMessage()</code>: 获取关于异常的详细信息。</li><li><code>toString()</code>: 返回异常的字符串表示，包括异常的类名和详细信息。</li><li><code>printStackTrace()</code>: 在控制台打印异常的堆栈跟踪信息，用于调试和错误定位。</li><li><code>getCause()</code>: 获取导致当前异常的原因（即导致当前异常抛出的其他异常）。</li></ul><p><code>Throwable</code>类的子类可以通过继承它的方法和添加自己的方法来定义特定类型的错误和异常。</p></blockquote><h2 id="其他一些注解"><a href="#其他一些注解" class="headerlink" title="其他一些注解"></a>其他一些注解</h2><p><code>@Cleanup</code>：将<code>@Cleanup</code>注解放在需要进行资源关闭的属性上，它会自动生成资源的关闭代码，用于简化资源管理，特别是对于实现<code>java.io.Closeable</code>接口的资源。</p><p><code>@Getter(lazy = true)</code>：将<code>@Getter(lazy = true)</code>注解放在属性上，它会生成属性的懒加载 getter 方法，在第一次调用该方法时才会计算并返回属性的值。</p><p>还有一些日志相关的注解，等写Java日志框架时再一并写了吧。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;整理一些Lombok的常用注解和注意事项（几乎包含所有主流注解了）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Lombok" scheme="http://silencezheng.top/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Nginx使用入门</title>
    <link href="http://silencezheng.top/2023/07/14/article108/"/>
    <id>http://silencezheng.top/2023/07/14/article108/</id>
    <published>2023-07-14T15:43:40.000Z</published>
    <updated>2023-07-15T06:01:45.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx使用入门，让你的闲置云服务器用起来～</p><span id="more"></span><h2 id="Nginx能干什么？"><a href="#Nginx能干什么？" class="headerlink" title="Nginx能干什么？"></a>Nginx能干什么？</h2><p>Nginx是一款开源的高性能Web服务器和反向代理服务器，具有以下主要功能：</p><ol><li><p><strong>Web服务器</strong>：Nginx可以作为一个独立的Web服务器来提供静态内容和动态内容的服务。它支持处理HTTP、HTTPS、HTTP/2和WebSocket等协议，具有高并发处理能力和低资源消耗。</p></li><li><p><strong>反向代理</strong>：Nginx作为反向代理服务器，可以接收客户端请求并将其转发到后端的多个服务器，起到负载均衡和高可用性的作用。它能够智能地分配请求负载，提供更好的性能和可靠性。</p></li><li><p><strong>负载均衡</strong>：Nginx能够在多个后端服务器之间分发请求，实现负载均衡。通过智能地将请求分配给不同的服务器，可以提高系统的整体性能和可伸缩性。</p></li><li><p><strong>HTTP缓存</strong>：Nginx支持对静态和动态内容进行缓存，减少对后端服务器的请求，提高响应速度和吞吐量。它可以根据设置的缓存规则，缓存经常访问的内容，并提供快速的响应。</p></li><li><p><strong>安全性</strong>：Nginx具有内置的安全功能，如反向代理防御（Reverse Proxy Defense）和请求限制（Rate Limiting），以保护网站免受恶意请求和DDoS攻击。</p></li><li><p><strong>SSL/TLS加密</strong>：Nginx支持SSL/TLS协议，可以进行安全的加密通信，并提供HTTPS协议的支持。它可以配置和管理证书，实现安全的数据传输。</p></li><li><p><strong>动态模块</strong>：Nginx支持模块化的架构，可以通过添加第三方模块扩展其功能。这使得Nginx具有更多的扩展性和灵活性，可以根据具体需求进行定制和配置。</p></li></ol><p>本文先从最常用的Web服务器开始。</p><h2 id="基于Docker部署Nginx"><a href="#基于Docker部署Nginx" class="headerlink" title="基于Docker部署Nginx"></a>基于Docker部署Nginx</h2><p>通过Docker部署Nginx对于我们的学习更方便，也提供了更好的隔离性。下面是通过docker启动Nginx的大致操作流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p local_port:container_port \</span><br><span class="line"><span class="comment"># 挂载配置文件</span></span><br><span class="line">-v /path/to/mynginx/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line"><span class="comment"># 挂载目标目录</span></span><br><span class="line">-v /path/to/projects:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:port/target</span><br></pre></td></tr></table></figure><h2 id="Web服务器应用举例"><a href="#Web服务器应用举例" class="headerlink" title="Web服务器应用举例"></a>Web服务器应用举例</h2><p>下面，基于上述基本流程，我们来实现一些Web服务器的实例。</p><p>省略拉取镜像～</p><h3 id="1-图床"><a href="#1-图床" class="headerlink" title="1. 图床"></a>1. 图床</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/img_host/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/img_host/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line"></span><br><span class="line">    worker_processes 1; <span class="comment"># 应该使用多少个worker进程来处理请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事件处理器配置</span></span><br><span class="line">    events &#123;</span><br><span class="line">        worker_connections 1024; <span class="comment"># 每个worker进程可以处理的最大并发连接数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局HTTP服务器配置</span></span><br><span class="line">    http &#123;</span><br><span class="line">        include mime.types;</span><br><span class="line">        default_type application/octet-stream; <span class="comment"># 默认的MIME类型</span></span><br><span class="line">        sendfile on; <span class="comment"># 可以直接将文件从磁盘复制到网络套接字</span></span><br><span class="line">        keepalive_timeout  65; <span class="comment"># 空闲的持久连接将在65秒后关闭</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># images server</span></span><br><span class="line">        server &#123;</span><br><span class="line">            listen       82;</span><br><span class="line">            server_name  ip_or_domain;</span><br><span class="line"></span><br><span class="line">            location /images/ &#123;</span><br><span class="line">                <span class="built_in">alias</span> /home/images/; <span class="comment"># 表示将URL中的 /images/替换为的实际路径</span></span><br><span class="line">                expires max; <span class="comment"># 对这些图片文件的缓存过期时间为最大值，即永不过期。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p 82:82 \</span><br><span class="line">-v /path/to/mynginx/img_host/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /path/to/images/:/home/images/ \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:82/images/pic.jpg</span><br></pre></td></tr></table></figure><h3 id="2-文件服务器"><a href="#2-文件服务器" class="headerlink" title="2. 文件服务器"></a>2. 文件服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/file_server/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/file_server/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line"></span><br><span class="line">    worker_processes 1; <span class="comment"># 应该使用多少个worker进程来处理请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事件处理器配置</span></span><br><span class="line">    events &#123;</span><br><span class="line">        worker_connections 1024; <span class="comment"># 每个worker进程可以处理的最大并发连接数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局HTTP服务器配置</span></span><br><span class="line">    http &#123;</span><br><span class="line">        server &#123;</span><br><span class="line">            listen 82;  <span class="comment"># 监听的端口号</span></span><br><span class="line">            server_name ip_or_domain;  <span class="comment"># 服务器域名或IP地址</span></span><br><span class="line"></span><br><span class="line">            location / &#123; <span class="comment"># 这里需要注意，分配其他前缀时，采用root的路径后要加上该前缀，建议用alias</span></span><br><span class="line">                root /path/to/files/;  <span class="comment"># 文件根目录的绝对路径</span></span><br><span class="line">                <span class="comment"># or alias /path/to/files/, 直接从 ip:82/ 可进入</span></span><br><span class="line">                autoindex on;  <span class="comment"># 启用目录列表功能</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p 82:82 \</span><br><span class="line">-v /path/to/mynginx/file_server/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /path/to/files/:/path/to/files/ \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:82/path/to/files/</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>使用alias时目录名后面一定要加<code>/</code>。</li><li>一般情况下，在<code>location /</code>中配置root，在<code>location /other</code>中配置alias。</li></ol><h3 id="3-Web应用部署"><a href="#3-Web应用部署" class="headerlink" title="3. Web应用部署"></a>3. Web应用部署</h3><p>一样的逻辑，这里只提供一个配置文件参考：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件处理器配置</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP服务器配置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;     <span class="comment"># 设置允许压缩的页面最小字节数</span></span><br><span class="line">    gzip_buffers 4 16k;     <span class="comment"># 用来存储 gzip 的压缩结果</span></span><br><span class="line">    gzip_http_version 1.1;  <span class="comment"># 识别 HTTP 协议版本</span></span><br><span class="line">    gzip_comp_level 2;      <span class="comment"># 设置 gzip 的压缩比 1-9。1 压缩比最小但最快，而 9 相反</span></span><br><span class="line">    gzip_types gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; <span class="comment"># 指定压缩类型</span></span><br><span class="line">    gzip_proxied any;       <span class="comment"># 无论后端服务器的 headers 头返回什么信息，都无条件启用压缩</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端静态文件服务器</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        root /path/to/frontend/dist;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后端API代理</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name api.example.com;</span><br><span class="line"></span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            proxy_pass http://ip:port/api/; <span class="comment">## proxy_pass 需要设置为后端项目所在服务器的 IP</span></span><br><span class="line">            <span class="comment"># 设置代理请求的头信息，以便在转发请求时传递给后端服务器</span></span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>; <span class="comment"># 设置代理请求的Host头，将其设置为与客户端请求中的Host头一致</span></span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>; <span class="comment"># 将客户端真实IP地址作为X-Real-IP头发送给后端服务器</span></span><br><span class="line">            proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>; <span class="comment"># 将客户端IP地址作为REMOTE-HOST头发送给后端服务器</span></span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; <span class="comment"># 将客户端IP地址添加到X-Forwarded-For头中，以便后端服务器可以了解请求的真实客户端IP地址。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Nginx使用入门，让你的闲置云服务器用起来～&lt;/p&gt;</summary>
    
    
    
    
    <category term="Nginx" scheme="http://silencezheng.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git代码合并</title>
    <link href="http://silencezheng.top/2023/07/01/article107/"/>
    <id>http://silencezheng.top/2023/07/01/article107/</id>
    <published>2023-07-01T11:40:45.000Z</published>
    <updated>2023-07-15T09:42:26.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期有多端办公的需求，实操一下代码合并。</p><p>结合IDEA的Git工具更加方便。<br><span id="more"></span></p><h2 id="本地仓库合并"><a href="#本地仓库合并" class="headerlink" title="本地仓库合并"></a>本地仓库合并</h2><p>要合并两个<strong>本地</strong>的 Git 仓库，可以按照以下步骤进行操作：</p><p>1、 进入第一个仓库的目录。</p><p>2、 添加第二个仓库为远程仓库（仓库名可以取任意，与当前仓库有区分即可）：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;远程仓库名称&gt; &lt;第二个仓库的路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git remote add another /path/to/another</span></span><br></pre></td></tr></table></figure></p><p>3、 从远程仓库获取所有最新的提交历史和分支信息：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br></pre></td></tr></table></figure></p><p>4、 查看远程仓库的分支：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></p><p>5、 将远程仓库的代码合并到本地仓库的当前分支：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;远程仓库名称&gt;/&lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git merge another/&lt;brach&gt;</span></span><br></pre></td></tr></table></figure></p><p>   这将把第二个仓库的代码变更合并到当前分支。当然，这一步可以用IDE提供的Git面板进行操作。</p><p>6、 解决可能出现的冲突：<br>   如果两个仓库之间存在冲突，你需要手动解决冲突。Git 会在代码合并过程中标记冲突的部分，你可以使用文本编辑器打开相应的文件并手动编辑以解决冲突。可以用IDE提供的Git面板进行操作，更加方便。</p><p>7、 提交合并后的代码变更：<br>   <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;<span class="keyword">Merge</span> another <span class="keyword">into</span> origin<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></p><p>   这将提交合并后的代码变更。</p><p>通过上述步骤，可以将两个本地的 Git 仓库进行合并。请确保在操作前备份仓库数据，以免意外丢失代码。</p><h2 id="远端仓库合并"><a href="#远端仓库合并" class="headerlink" title="远端仓库合并"></a>远端仓库合并</h2><p>一样的方式，只是远端仓库可能有固定的仓库名，把本地地址替换为url即可。</p><h2 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h2><p>Pull操作等于Fetch + Merge，如果已经确认过远端分支信息，可以直接Pull对应分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git pull another &lt;brach&gt;</span></span><br></pre></td></tr></table></figure><br>这将从远端仓库中获取最新的代码变更并合并到本地当前分支。</p><p>如果出现分歧，可能会报错：<code>fatal: Need to specify how to reconcile divergent branches.</code>，此时需要解决冲突或确认合并策略。</p><h2 id="将远程分支添加到本地并创建一个新的本地分支"><a href="#将远程分支添加到本地并创建一个新的本地分支" class="headerlink" title="将远程分支添加到本地并创建一个新的本地分支"></a>将远程分支添加到本地并创建一个新的本地分支</h2><p>注意执行后切换到新的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt; &lt;remote-name&gt;/&lt;remote-branch-name&gt;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期有多端办公的需求，实操一下代码合并。&lt;/p&gt;
&lt;p&gt;结合IDEA的Git工具更加方便。&lt;br&gt;</summary>
    
    
    
    
    <category term="Git" scheme="http://silencezheng.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>服务器sshd自动关闭问题排查记录</title>
    <link href="http://silencezheng.top/2023/07/01/article106/"/>
    <id>http://silencezheng.top/2023/07/01/article106/</id>
    <published>2023-07-01T08:29:36.000Z</published>
    <updated>2023-07-01T08:34:53.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>服务器的sshd服务在经过多次连接后出现自动关闭的情况，遂进行排查，记录过程。</p><span id="more"></span><h2 id="1-排查sshd日志"><a href="#1-排查sshd日志" class="headerlink" title="1. 排查sshd日志"></a>1. 排查sshd日志</h2><p><code>/var/log/secure</code> — 包含验证和授权方面信息，sshd会将所有信息记录（其中包括失败登录）在这里。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos polkitd[<span class="number">672</span>]: Registered Authentication Agent for unix-process:<span class="number">13867</span>:<span class="number">17282775</span> (system bus name :<span class="number">1</span>.<span class="number">29528</span><span class="meta"> [/usr/bin/pkttyagent --notify-fd 5 --fallback], object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8)</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos sshd[13873]: Server listening on 0.0.0.0 port 22.</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos sshd[13873]: Server listening on :: port 22.</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos polkitd[672]: Unregistered Authentication Agent for unix-process:13867:17282775 (system bus name :1.29528, object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8) (disconnected from bus)</span></span><br><span class="line"><span class="meta">Jun 29 09:29:50 centos sshd[14173]: Connection closed by ip port 37721 [preauth]</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: Accepted password for root from ip port <span class="number">25638</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: Accepted password for root from ip port <span class="number">25844</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo:    root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/sbin/service sshd stop</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo: pam_unix(sudo:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo: pam_unix(sudo:session): session closed for user root</span><br></pre></td></tr></table></figure><p>可以看到有一个sudo命令被执行，通过<code>/sbin/service sshd stop</code>来停止sshd服务。日志显示命令是由root用户执行的，并且sudo会话在执行命令后立即关闭。可能有其他的进程或脚本在后台运行，调用了该sudo命令来停止sshd服务。</p><h2 id="2-排查系统日志"><a href="#2-排查系统日志" class="headerlink" title="2. 排查系统日志"></a>2. 排查系统日志</h2><p>为了搞清楚是什么命令停止了sshd服务，排查<code>/var/log/messages</code>，一般包括整体系统信息，以及cron、daemon等等。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos systemd: Starting OpenSSH server daemon...</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos systemd: <span class="literal">Started</span> OpenSSH server daemon.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">26</span>:<span class="number">01</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14452</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">...</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14477</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd-logind: New session <span class="number">14477</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]: [system] Activating service <span class="attr">name=</span>&#x27;org.freedesktop.problems&#x27; (using servicehelper)</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14478</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos systemd-logind: New session <span class="number">14478</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: sshd.service: main process exited, <span class="attr">code=</span>killed, <span class="attr">status=</span><span class="number">9</span>/KILL</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: Unit sshd.service entered failed state.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: sshd.service failed.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: <span class="literal">Stopped</span> OpenSSH server daemon.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: <span class="literal">Started</span> Session c291 of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd-logind: Removed session <span class="number">14478</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">28</span> centos systemd-logind: Removed session <span class="number">14477</span>.</span><br></pre></td></tr></table></figure><p>日志表明<code>sshd.service</code>服务的主进程被终止，最终导致了OpenSSH守护进程的停止。但看不出具体是什么脚本。</p><h2 id="3-排查journalctl"><a href="#3-排查journalctl" class="headerlink" title="3. 排查journalctl"></a>3. 排查journalctl</h2><p>journalctl 是 systemd-journald 服务的一部分，用于管理和检索系统日志。它使用二进制日志格式（Binary Log Format），可以包含比传统日志文件更详细的信息</p><p>查看指定时间区间的日志：<code>journalctl --since &quot;2023-06-29 09:25:55&quot; --until &quot;2023-06-29 09:30:28&quot;</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> centos systemd[<span class="number">1</span>]: Started Session <span class="number">14475</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: Accepted password for root from ip port <span class="number">25638</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd[<span class="number">1</span>]: Started Session <span class="number">14477</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd-logind[<span class="number">673</span>]: New session <span class="number">14477</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]:<span class="meta"> [system] Activating service name=&#x27;org.freedesktop.problems&#x27; (using servicehelper)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:11 centos dbus[663]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: Accepted password for root from ip port 25844 ssh2</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: pam_unix(sshd:session): session opened for user root by (uid=0)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos systemd[1]: Started Session 14478 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos systemd-logind[673]: New session 14478 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: sshd.service: main process exited, code=killed, status=9/KILL</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Unit sshd.service entered failed state.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: sshd.service failed.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Stopped OpenSSH server daemon.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]:     root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/sbin/service sshd stop</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]: pam_unix(sudo:session): session opened for user root by (uid=0)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Started Session c291 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]: pam_unix(sudo:session): session closed for user root</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd-logind[673]: Removed session 14478.</span></span><br></pre></td></tr></table></figure><p>看起来唯一像问题的就是：<code>sshd[14512]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</code></p><h2 id="4-问题查找"><a href="#4-问题查找" class="headerlink" title="4. 问题查找"></a>4. 问题查找</h2><p>依据发现问题的日志，找到问题原因可能是“用户的默认 Shell 被修改”。</p><p>通过<code>cat /etc/passwd | grep usr</code>查看，例如查看<code>root</code>输出：<code>root:x:0:0:root:/root:/bin/bash</code>则表示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root：登录名，即用户名。</span><br><span class="line">x：密码占位符，实际密码存储在 <span class="regexp">/etc/</span>shadow 文件中。</span><br><span class="line"><span class="number">0</span>：用户 ID (UID)，表示 root 用户的特殊标识符，<span class="number">0</span> 是超级用户的标识符。</span><br><span class="line"><span class="number">0</span>：组 ID (GID)，表示 root 用户所属的主要组的标识符。</span><br><span class="line">root：用户全名或注释字段，通常为用户的真实姓名。</span><br><span class="line">/root：主目录，表示 root 用户的主要工作目录。</span><br><span class="line"><span class="regexp">/bin/</span>bash：登录 shell，表示用户登录时所使用的默认命令解释器。</span><br></pre></td></tr></table></figure><p>但我排查过后，也不是这个问题。下一步应该继续排查<code>/var/log/btmp</code>，先搁置了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/213/37925">腾讯云手册</a><br>[2] <a href="https://www.cnblogs.com/sunsky303/p/8862040.html">https://www.cnblogs.com/sunsky303/p/8862040.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;服务器的sshd服务在经过多次连接后出现自动关闭的情况，遂进行排查，记录过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://silencezheng.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven多模块项目结构实践</title>
    <link href="http://silencezheng.top/2023/06/30/article105/"/>
    <id>http://silencezheng.top/2023/06/30/article105/</id>
    <published>2023-06-30T14:10:56.000Z</published>
    <updated>2023-06-30T14:12:20.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多Maven Module的项目结构，实践一下。</p><span id="more"></span><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>基本上来说，我们希望构建的项目结构是这样的：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">my-project</span><br><span class="line">├── pom<span class="selector-class">.xml</span></span><br><span class="line">├── bom</span><br><span class="line">│   ├── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-app</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.myapp</span></span><br><span class="line">│   │       │       └── MyAppApplication<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── application<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-module1</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module1</span></span><br><span class="line">│   │       │       └── Module1Class1<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── module1<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-module2</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module2</span></span><br><span class="line">│   │       │       └── Module2Class1<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── module2<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">└── my-module3</span><br><span class="line">    ├── <span class="attribute">src</span></span><br><span class="line">    │   └── <span class="selector-tag">main</span></span><br><span class="line">    │       ├── java</span><br><span class="line">    │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module3</span></span><br><span class="line">    │       │       └── Module3Class1<span class="selector-class">.java</span></span><br><span class="line">    │       └── resources</span><br><span class="line">    │           └── module3<span class="selector-class">.properties</span></span><br><span class="line">    └── pom.xml</span><br></pre></td></tr></table></figure></p><p>其中，<code>MyAppApplication.java</code>是程序入口，bom下存放的是BOM（Bill of Materials）。</p><blockquote><p>BOM（Bill of Materials）是由Maven提供的功能,它通过定义一整套相互兼容的jar包版本集合，使用时只需要依赖该BOM文件，即可放心的使用需要的依赖jar包，且无需再指定版本号。BOM的维护方负责版本升级，并保证BOM中定义的jar包版本之间的兼容性。</p><p>BOM本质上是一个普通的POM文件，区别是对于使用方而言，生效的只有<code>&lt;dependencyManagement&gt;</code>这一个部分。只需要在<code>&lt;dependencyManagement&gt;</code>定义对外发布的客户端版本即可。</p></blockquote><p>在这种项目结构中，主项目（my-project）作为父模块，包含了所有子模块（my-app、my-module1、my-module2、my-module3…）。每个子模块都有自己的源代码目录（src/main/java）和资源目录（src/main/resources），并且每个子模块都有自己的 pom.xml 文件来定义其依赖和配置。</p><p>下面我们开始逐步构建项目。</p><h2 id="1-构建初始项目结构"><a href="#1-构建初始项目结构" class="headerlink" title="1. 构建初始项目结构"></a>1. 构建初始项目结构</h2><p>新建Maven父项目，并在根目录下新建三个Maven Module，分别为<code>bom、myapp、myappmodule1</code>。</p><h2 id="2-编写BOM"><a href="#2-编写BOM" class="headerlink" title="2. 编写BOM"></a>2. 编写BOM</h2><p>定义BOM如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archetype - bom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>基础 bom 文件，管理整个项目的依赖版本<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.0-snapshot<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-j.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql-connector-j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-编写父项目POM"><a href="#3-编写父项目POM" class="headerlink" title="3. 编写父项目POM"></a>3. 编写父项目POM</h2><p>引入BOM。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archetype - multi-maven-module<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>多模块Maven项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Server 主项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 各种 module 拓展 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.0-snapshot<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  这里选8是因为Maven兼容性问题，本来要上17但是还需要换Maven  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-compiler-plugin.version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">maven-compiler-plugin.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 对多模块项目结构似乎是必须的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注意编码很重要，否则可能导致MojoExecutionException --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用 aliyun 的 Maven 源，提升下载速度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-编写程序入口POM"><a href="#4-编写程序入口POM" class="headerlink" title="4. 编写程序入口POM"></a>4. 编写程序入口POM</h2><p>这里不需要再指定java版本和包版本了。如果需要使用不同于当前bom中所维护的jar包版本，则加上<code>&lt;version&gt;</code>覆盖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置构建的 jar 包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 如果 spring.boot.version 版本修改，则这里也要跟着修改 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> <span class="comment">&lt;!-- 将引入的 jar 打入其中 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="5-编写模块POM"><a href="#5-编写模块POM" class="headerlink" title="5. 编写模块POM"></a>5. 编写模块POM</h2><p>提供一个示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="6-打包"><a href="#6-打包" class="headerlink" title="6. 打包"></a>6. 打包</h2><p>随便找个表用MyBatisX生成代码，然后运行通过后就可以打包了：<code>mvn clean package -Dmaven.test.skip=true</code>。</p><p><img src="/assets/post_img/article105/directory-structure.png" alt="ds"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;多Maven Module的项目结构，实践一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Maven" scheme="http://silencezheng.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis快速入门</title>
    <link href="http://silencezheng.top/2023/06/18/article104/"/>
    <id>http://silencezheng.top/2023/06/18/article104/</id>
    <published>2023-06-18T05:10:01.000Z</published>
    <updated>2023-06-18T05:13:24.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>攒一个MyBatis快速入门，MP用的多，但对于MyBatis还不够了解，学习之。</p><p>写了两个Demo，分别是不用框架和用Spring。<br><span id="more"></span></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MyBatis 是一款持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录。</p><p>下面以两个示例演示如何构建基于MyBatis的应用。</p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>假设有一个学生表（students），包含以下字段：</p><ul><li>id (主键，自增)</li><li>name (学生姓名)</li><li>age (学生年龄)</li><li>grade (学生年级)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> author: SilenceZheng66</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  grade <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, age, grade) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Alice&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Grade 10&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;Grade 11&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;Grade 9&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1、不用框架构建基于MyBatis的应用"><a href="#1、不用框架构建基于MyBatis的应用" class="headerlink" title="1、不用框架构建基于MyBatis的应用"></a>1、不用框架构建基于MyBatis的应用</h2><h3 id="1-安装MyBatis"><a href="#1-安装MyBatis" class="headerlink" title="1. 安装MyBatis"></a>1. 安装MyBatis</h3><p><a href="https://github.com/mybatis/mybatis-3/releases">下载</a>MyBatis的jar包并放置于类路径中。此外还需要mysql-connector-java。</p><h3 id="2-编写MyBatis配置文件-mybatis-config-xml"><a href="#2-编写MyBatis配置文件-mybatis-config-xml" class="headerlink" title="2. 编写MyBatis配置文件 mybatis-config.xml"></a>2. 编写MyBatis配置文件 mybatis-config.xml</h3><p>当使用MyBatis框架时，如果将配置文件命名为<code>mybatis-config.xml</code>，那么MyBatis会默认去加载这个文件作为配置文件。否则需要在代码中显式指定配置文件的名称，通过<code>SqlSessionFactoryBuilder</code>的build方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- XML 文件的声明部分，指定了 XML 的版本和编码方式。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- DTD（文档类型定义）声明，指定了 MyBatis 配置文件的格式和规范。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根元素，表示 MyBatis 的配置文件的起始点。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义了环境配置，其中 default 属性指定了默认的环境。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义了一个环境，其中 id 属性指定了环境的唯一标识。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定事务管理器的类型为 JDBC，表示使用 JDBC 进行事务管理。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定数据源的类型为 POOLED，表示使用连接池管理数据库连接。MyBatis框架内部包含一个简单的连接池实现。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库驱动的类名。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库的 URL。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myuser&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mypassword&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义一个或多个映射器（Mapper）配置。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定了映射器配置文件的路径，其中 resource 属性值为相对于配置文件的路径。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-编写映射文件-StudentMapper-xml"><a href="#3-编写映射文件-StudentMapper-xml" class="headerlink" title="3. 编写映射文件 StudentMapper.xml"></a>3. 编写映射文件 StudentMapper.xml</h3><p>简单的查找。注意配置文件通常放在<code>resources</code>目录下，例如<code>src/main/resources</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mybatis.simple.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;mybatis.simple.Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="4-编写实体类-Student-java"><a href="#4-编写实体类-Student-java" class="headerlink" title="4. 编写实体类 Student.java"></a>4. 编写实体类 Student.java</h3><p>用了一下Lombok，也加进类路径就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, grade=&quot;</span> + grade + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-编写数据访问接口-StudentMapper"><a href="#5-编写数据访问接口-StudentMapper" class="headerlink" title="5. 编写数据访问接口 StudentMapper"></a>5. 编写数据访问接口 StudentMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-编写数据访问接口实现类"><a href="#6-编写数据访问接口实现类" class="headerlink" title="6. 编写数据访问接口实现类"></a>6. 编写数据访问接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMapperImpl</span> <span class="keyword">implements</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentMapperImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            StudentMapper mapper = session.getMapper(StudentMapper.class);</span><br><span class="line">            <span class="keyword">return</span> mapper.getAllStudents();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-编写主程序"><a href="#7-编写主程序" class="headerlink" title="7. 编写主程序"></a>7. 编写主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 加载 MyBatis 配置文件</span></span><br><span class="line">    String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 StudentMapper 对象</span></span><br><span class="line">    StudentMapper studentMapper = <span class="keyword">new</span> StudentMapperImpl(sqlSessionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用方法获取所有学生信息</span></span><br><span class="line">    List&lt;Student&gt; students = studentMapper.getAllStudents();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印学生信息</span></span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">      System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Student [id=<span class="number">1</span>, name=Alice, age=<span class="number">18</span>, grade=Grade <span class="number">10</span>]</span><br><span class="line">Student [id=<span class="number">2</span>, name=Bob, age=<span class="number">17</span>, grade=Grade <span class="number">11</span>]</span><br><span class="line">Student [id=<span class="number">3</span>, name=Charlie, age=<span class="number">16</span>, grade=Grade <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="2、-用Spring-Boot构建基于MyBatis的应用"><a href="#2、-用Spring-Boot构建基于MyBatis的应用" class="headerlink" title="2、 用Spring Boot构建基于MyBatis的应用"></a>2、 用Spring Boot构建基于MyBatis的应用</h2><p>从一个空Maven项目开始。</p><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在-application-properties-配置数据库"><a href="#2-在-application-properties-配置数据库" class="headerlink" title="2. 在 application.properties 配置数据库"></a>2. 在 application.properties 配置数据库</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/mydatabase</span><br><span class="line"><span class="attr">spring.datasource.username</span>=myuser</span><br><span class="line"><span class="attr">spring.datasource.password</span>=mypassword</span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=classpath*:/mapper/*.xml</span><br></pre></td></tr></table></figure><h3 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3. 创建实体类"></a>3. 创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, grade=&quot;</span> + grade + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-创建-Mapper-接口和对应的-XML-映射文件。"><a href="#4-创建-Mapper-接口和对应的-XML-映射文件。" class="headerlink" title="4. 创建 Mapper 接口和对应的 XML 映射文件。"></a>4. 创建 Mapper 接口和对应的 XML 映射文件。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>XML映射文件放置在resources下的mapper目录中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;slz.mybatis.spring.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;slz.mybatis.spring.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-编写服务类"><a href="#5-编写服务类" class="headerlink" title="5. 编写服务类"></a>5. 编写服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentService</span><span class="params">(StudentMapper studentMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentMapper = studentMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getAllStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@Autowired</code>表示需要通过自动装配的方式将 StudentMapper 对象注入到 StudentService 类中。</p><h3 id="6-编写控制器"><a href="#6-编写控制器" class="headerlink" title="6. 编写控制器"></a>6. 编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentController</span><span class="params">(StudentService studentService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/students&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentService.getAllStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-编写入口类"><a href="#7-编写入口类" class="headerlink" title="7. 编写入口类"></a>7. 编写入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;slz.mybatis.spring.mapper.**&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        org.springframework.boot.SpringApplication.run(SpringApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动后访问：<code>http://localhost:8080/students</code>即可查看学生信息。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a><br>[2] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466914339296">https://www.liaoxuefeng.com/wiki/1252599548343744/1260466914339296</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>通过<code>mybatis-spring-boot-starter</code>配置MyBatis比原版有了一些便利，例如通过注解指定Mapper类扫描路径自动注册、自动配置SqlSessionFactory、自动注入Mapper实例等。</p><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;攒一个MyBatis快速入门，MP用的多，但对于MyBatis还不够了解，学习之。&lt;/p&gt;
&lt;p&gt;写了两个Demo，分别是不用框架和用Spring。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
    <category term="MyBatis" scheme="http://silencezheng.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>打包Flask应用为Docker镜像</title>
    <link href="http://silencezheng.top/2023/06/12/article103/"/>
    <id>http://silencezheng.top/2023/06/12/article103/</id>
    <published>2023-06-12T01:23:31.000Z</published>
    <updated>2023-06-12T01:29:37.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一次打包Flask应用的过程，在Ubuntu(amd64)下。</p><p>虽然看着简单，但处理软件依赖和系统环境可能会遇到很多小问题，需要耐心逐个解决。<br><span id="more"></span></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>打包Flask应用及其所有所需的环境为镜像，用户拉取镜像后直接运行即可使用服务。</p><p>环境依赖包含显卡驱动、编译器、所需文件和Python包等。</p><p>注意打包的机器的操作系统不很重要，但架构很重要，最好保持打包机的架构与要部署的服务器架构一致（amd64、arm64）。</p><blockquote><p>有一些工具和技术可以帮助实现跨架构的镜像构建，例如 buildx 工具和多架构的 Docker 镜像。buildx 是 Docker 的官方多架构构建工具，它可以让你在一台机器上同时构建多个不同架构的镜像。多架构的 Docker 镜像则允许你在同一个镜像中包含多个架构的二进制文件，使其适用于不同的机器。</p></blockquote><h2 id="修改地址"><a href="#修改地址" class="headerlink" title="修改地址"></a>修改地址</h2><p>为了使服务能够被本机外的设备访问，需要将主机地址修改为<code>0.0.0.0</code>（或其他指定地址）。</p><p>方式一，在代码中指定配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p>方式二，通过终端命令指定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">flask run</span><br></pre></td></tr></table></figure></p><p>显然方式二更灵活些，要修改服务的配置，直接在Dockerfile中修改就可以了。</p><h2 id="导出Python的依赖"><a href="#导出Python的依赖" class="headerlink" title="导出Python的依赖"></a>导出Python的依赖</h2><p>借助pipreqs导出依赖文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line">python -m pip install pipreqs <span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line">pipreqs ./ --encoding=utf8 <span class="comment"># 在项目根目录下导出</span></span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>在项目根目录下创建Dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line"><span class="comment"># 基础镜像，这里直接选择带显卡驱动的</span></span><br><span class="line"><span class="keyword">FROM</span> nvidia/cuda:<span class="number">10.0</span>-cudnn7-runtime-ubuntu18.<span class="number">04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置程序依赖的环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="bash">        build-essential \</span></span><br><span class="line"><span class="bash">        cmake \</span></span><br><span class="line"><span class="bash">        curl \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">        python3-dev \</span></span><br><span class="line"><span class="bash">        python3-pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理APT包管理器缓存列表</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前项目复制到容器内，这里选择在/workspace目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动时工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装setuptools，外部库需要</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget --no-check-certificate https://pypi.python.org/packages/<span class="built_in">source</span>/s/setuptools/setuptools-19.6.tar.gz<span class="comment">#md5=c607dd118eae682c44ed146367a17e26 &amp;&amp; tar -zxvf setuptools-19.6.tar.gz &amp;&amp; cd setuptools-19.6 &amp;&amp; python3 setup.py build &amp;&amp; python3 setup.py install &amp;&amp; cd .. &amp;&amp; rm -rf setuptools-19.6</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python包</span></span><br><span class="line"><span class="comment"># 清华源： -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="comment"># 安装额外依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install torch_sparse torch_scatter</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置本地化环境变量，否则之后的Flask配置会报错</span></span><br><span class="line"><span class="comment"># 注意不要用RUN，RUN仅在本层配置</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL=C.UTF_8</span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Flask环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动命令</span></span><br><span class="line"><span class="comment"># .py启动</span></span><br><span class="line"><span class="comment"># CMD [&quot;/usr/bin/python3&quot;, &quot;/workspace/app.py&quot;]</span></span><br><span class="line"><span class="comment"># 直接启动</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>在修改环境变量的时候也是既可以在Dockerfile里写死，也可以通过容器运行命令<code>docker run</code>的<code>-e</code>参数指定。</p><h2 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h2><p>进入项目根目录执行以下命令构建Docker镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask-api .</span><br></pre></td></tr></table></figure></p><p>构建完成后可以通过<code>docker images</code>查看。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>格式为：<br><code>docker run -p host-port:container-port image-name</code></p><p>放在我这里映射到5001端口就是：<br><code>docker run -p 5001:5000 flask-api</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>以请求体为json格式为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d @path/to/file.json URL</span><br></pre></td></tr></table></figure><br>注意curl中@用于表示从文件中读取数据。</p><h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><p>保存为压缩文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o &lt;保存路径/文件名.tar&gt; &lt;镜像名称:标签&gt;</span><br></pre></td></tr></table></figure></p><h2 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h2><p>通过压缩文件导入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i &lt;镜像文件.tar&gt;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录一次打包Flask应用的过程，在Ubuntu(amd64)下。&lt;/p&gt;
&lt;p&gt;虽然看着简单，但处理软件依赖和系统环境可能会遇到很多小问题，需要耐心逐个解决。&lt;br&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="http://silencezheng.top/tags/Docker/"/>
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>特殊网络地址</title>
    <link href="http://silencezheng.top/2023/06/12/article102/"/>
    <id>http://silencezheng.top/2023/06/12/article102/</id>
    <published>2023-06-12T00:43:16.000Z</published>
    <updated>2023-06-12T01:04:11.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>127.0.0.1、localhost和0.0.0.0是网络地址中常见的一些特殊用法，它们在网络通信中有不同的含义和用途。<br><span id="more"></span></p><h2 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h2><ul><li>127.0.0.1 是 IPv4 的回环地址（loopback address），通常称为本地回环地址。所有127开头的都是回环地址。</li><li>当一个应用程序使用 127.0.0.1 作为主机地址时，它将与本地计算机上运行的应用程序进行通信。</li><li>例如，当你在浏览器中输入 <code>http://127.0.0.1</code> 或 <code>http://localhost</code> 时，它们都指向本地计算机上运行的 Web 服务器（通常是你自己的机器）。</li><li>计算机以回环地址发送的消息，并不会由链路层送走，而是被本机网络层捕获。</li></ul><h2 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h2><ul><li>localhost 是一个域名，它默认解析为 IPv4 的回环地址 127.0.0.1。</li><li>当你在浏览器或其他应用程序中使用 localhost 作为主机地址时，它实际上是指向本地计算机上运行的同一应用程序。</li><li>localhost 也可以解析为 IPv6 的回环地址 <code>::1</code>，它是 IPv6 版本的 127.0.0.1。</li></ul><h2 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title="0.0.0.0"></a>0.0.0.0</h2><ul><li>0.0.0.0 是一个特殊的 IP 地址，通常用于表示所有网络接口（所有可用的网络接口）的地址。</li><li>当一个应用程序将监听地址设置为 0.0.0.0 时，它将在所有可用的网络接口上监听传入的连接。</li><li>这样可以使应用程序对于任何通过网络接口访问的请求都可见，而不仅仅是来自本地计算机的请求。</li><li>0.0.0.0 并不是一个具体的可寻址地址，它只是一个占位符，表示监听所有可用的地址。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;127.0.0.1、localhost和0.0.0.0是网络地址中常见的一些特殊用法，它们在网络通信中有不同的含义和用途。&lt;br&gt;</summary>
    
    
    
    
    <category term="计算机网络" scheme="http://silencezheng.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot集成Swagger</title>
    <link href="http://silencezheng.top/2023/06/05/article101/"/>
    <id>http://silencezheng.top/2023/06/05/article101/</id>
    <published>2023-06-05T14:21:14.000Z</published>
    <updated>2023-06-05T14:25:24.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Swagger入门与Spring Boot集成Swagger。</p><p>简单尝试了Springfox和Springdoc，感觉Springdoc问题更少些，但文档也相对少。<br><span id="more"></span></p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>Swagger最初是由Tony Tam在2010年创建的一套开源工具，用于描述和定义RESTful API。Swagger提供了一组注解和元数据，用于描述API的基本信息、接口操作、请求参数、响应模型等。它的目标是提供一种标准的方式来定义和文档化API，以便于开发人员和消费者能够更好地理解和使用API。Tony Tam在2015年加盟SmartBear Software任VP，并将Swagger相关的企业级服务都带到了 SmartBear。</p><p>Swagger团队与OpenAPI规范进行了合作，并将Swagger规范作为OpenAPI规范的基础。OpenAPI规范是一个开放标准，用于描述和定义RESTful API的详细信息。它提供了一种机器可读的方式来描述API的结构、路径、请求和响应的参数、模型定义等。OpenAPI规范允许开发人员、工具和平台之间的互操作性，使得API的设计、开发和测试更加统一和便捷。</p><p>因此，可以说Swagger是OpenAPI规范的实现之一，Swagger提供了一套工具和框架，使得使用OpenAPI规范来描述和定义API更加简单和方便。通过Swagger工具，您可以生成符合OpenAPI规范的API文档，以及使用Swagger UI界面来浏览和测试API。</p><p>用一句话总结：Swagger围绕一个既有的规范，创造了一系列的软件工具，为开发和使用API提供了极大的便利。</p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>Swagger是一个规范和完整的框架，一个用于生成、描述、调用和可视化RESTful风格的Web服务。</p><p>有三个最知名的工具需要入门者去了解，它们分别是swagger-ui、swagger-editor和swagger-codegen。</p><h3 id="1-Swagger-UI："><a href="#1-Swagger-UI：" class="headerlink" title="1. Swagger UI："></a>1. Swagger UI：</h3><p>Swagger UI是Swagger的官方工具，用于展示和测试API文档。它提供了一个交互式的界面，使得开发人员和用户可以直观地查看和理解API的各个细节。</p><p><img src="/assets/post_img/article101/ui-api.png" alt="api"></p><p><img src="/assets/post_img/article101/ui-model.png" alt="model"></p><p>Swagger UI的主要特点包括：</p><ul><li>自动生成交互式API文档界面：Swagger UI根据API的Swagger规范生成一个可交互的网页界面，以展示API的路径、参数、模型定义、请求和响应等信息。</li><li>支持请求测试：Swagger UI允许用户在界面中直接测试API，通过提供参数、发送请求并查看响应结果，帮助开发人员进行API的调试和测试。</li><li>多种展示方式：Swagger UI提供了多种展示方式，如可折叠的API路径列表、可切换的主题样式等，使得用户能够以自己喜欢的方式查看和使用API文档。</li></ul><h3 id="2-Swagger-Editor："><a href="#2-Swagger-Editor：" class="headerlink" title="2. Swagger Editor："></a>2. Swagger Editor：</h3><p>Swagger Editor是Swagger提供的一个在线编辑器，用于编写、定义和验证Swagger规范的API文档。它为开发人员提供了一个方便的界面来创建和编辑API文档，并即时反馈验证结果和错误信息。</p><p><img src="/assets/post_img/article101/editor.png" alt="editor"></p><p>Swagger Editor的主要特点包括：</p><ul><li>在线编辑器：Swagger Editor可以直接在网页中进行API文档的编写和编辑，而无需额外的编辑器或工具。</li><li>即时验证：Swagger Editor可以即时验证API文档的正确性和合法性，通过检查Swagger规范的语法、格式和规则，提供实时的反馈和错误提示。</li><li>Swagger规范支持：Swagger Editor完全支持Swagger规范，并提供了丰富的自动补全、代码提示和文档辅助功能，使得编写和编辑Swagger规范更加高效和准确。</li></ul><h3 id="3-Swagger-Codegen："><a href="#3-Swagger-Codegen：" class="headerlink" title="3. Swagger Codegen："></a>3. Swagger Codegen：</h3><p>Swagger Codegen是Swagger提供的一个代码生成工具，用于根据API文档生成各种编程语言的客户端和服务器端代码。它简化了开发人员根据API文档手动编写代码的过程，提高了开发效率和代码的一致性。</p><p>Swagger Codegen的主要特点包括：</p><ul><li>多语言支持：Swagger Codegen支持生成多种编程语言的代码，包括Java、JavaScript、Python、Ruby、C#等，使得开发人员可以根据自己的喜好和需求选择适合的语言。</li><li>自定义模板：Swagger Codegen允许开发人员根据自己的需求自定义代码生成的模板，以适应不同的编码风格和规范要求。</li><li>代码生成命令行工具：Swagger Codegen提供了命令行工具，可以方便地从Swagger规范文件生成代码，减少了手动编写代码的工作量。</li></ul><h2 id="Springfox"><a href="#Springfox" class="headerlink" title="Springfox"></a>Springfox</h2><p>Springfox是一个用于自动生成和展示RESTful API文档的Java库（Spring社区项目，非官方），与Swagger规范兼容，并提供了一套工具使得在Spring Boot应用程序中使用Swagger变得更加简单和便捷。   </p><p>下面我用一个例子来演示如何在Spring Boot应用中集成Springfox。</p><h3 id="1-引入Springfox依赖"><a href="#1-引入Springfox依赖" class="headerlink" title="1. 引入Springfox依赖"></a>1. 引入Springfox依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// author: SilenceZheng66</span><br><span class="line"><span class="comment">&lt;!--引入swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建配置类"><a href="#2-创建配置类" class="headerlink" title="2. 创建配置类"></a>2. 创建配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.slz.swagger.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .pathMapping(<span class="string">&quot;/&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-写个响应类"><a href="#3-写个响应类" class="headerlink" title="3. 写个响应类"></a>3. 写个响应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAILED = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-写个控制器"><a href="#4-写个控制器" class="headerlink" title="4. 写个控制器"></a>4. 写个控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;DummyHello&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Say Hello&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(Result.SUCCESS, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h3><p>直接进入地址 <code>http://localhost:8080/swagger-ui/index.html#/</code></p><p><img src="/assets/post_img/article101/springfox.png" alt="springfox"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Springfox在部署过程中，会出现一些问题：</p><h4 id="在-Spring-Boot3-x-x-下报Servlet缺失错误"><a href="#在-Spring-Boot3-x-x-下报Servlet缺失错误" class="headerlink" title="在 Spring Boot3.x.x 下报Servlet缺失错误"></a>在 Spring Boot3.x.x 下报Servlet缺失错误</h4><p>报错信息：<code>Type javax.servlet.http.HttpServletRequest not present</code></p><p>原因分析：Spring Boot3要求最低Java17，它使用jakarta命名空间而不是javax，但是Swagger仍然使用旧版本的命名空间。</p><blockquote><p>自Java EE 8起，Java EE已改名为Jakarta EE。Jakarta EE是一个开放的企业级Java平台，由Eclipse Foundation进行管理和发展。它是构建企业级Java应用程序的一组规范和技术。</p><p>Jakarta EE使用Jakarta命名空间，以避免与Oracle拥有的Java EE命名空间产生冲突。Jakarta命名空间用于标识与Java EE兼容的API和技术。例如，以前的javax.servlet包已经迁移到了jakarta.servlet包。类似地，其他Java EE规范和API也被迁移到了对应的Jakarta命名空间。</p></blockquote><p>解决方案：添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// author: SilenceZheng66</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-Spring-Boot2-7-8-下报空指针错误"><a href="#在-Spring-Boot2-7-8-下报空指针错误" class="headerlink" title="在 Spring Boot2.7.8 下报空指针错误"></a>在 Spring Boot2.7.8 下报空指针错误</h4><p>报错信息：<code>Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException: Cannot invoke &quot;org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()&quot; because &quot;this.condition&quot; is null</code></p><p>原因分析：Spring Boot2.6.x 以上的版本默认情况下使用的是基于Servlet的路径匹配方案，该方案使用了PathPatternParser来解析和匹配路径模式。Springfox中关于<code>getPatternsCondition</code>的代码有问题，导致空指针异常。</p><blockquote><p>PathPatternParser和AntPathMatcher是Spring Framework中用于路径匹配的两个不同的类。</p><p>AntPathMatcher是在较早的版本中引入的，它使用Ant风格的路径模式语法进行路径匹配，例如/users/*/profile。它提供了一些功能强大的特性，例如通配符匹配、路径变量、路径扩展等。AntPathMatcher是Spring Framework中常用的路径匹配工具，被广泛用于处理URL路径的匹配和请求映射等场景。</p><p>PathPatternParser是在较新的版本中引入的，它提供了更灵活和强大的路径模式解析和匹配功能。它支持多种路径模式语法，包括Ant风格和Servlet风格，并提供了更精确的路径匹配规则。PathPatternParser在设计上更加统一和一致，可以处理更复杂的路径匹配需求，并且与Servlet规范更加兼容。</p></blockquote><p>解决方案：更改Spring MVC的路径匹配策略为AntPathMatcher，在Spring Boot 默认配置文件中增加<code>spring.mvc.pathmatch.matching-strategy=ant_path_matcher</code>（KV格式）。</p><h2 id="Springdoc（推荐）"><a href="#Springdoc（推荐）" class="headerlink" title="Springdoc（推荐）"></a>Springdoc（推荐）</h2><p>Springdoc-openapi java库有助于使用 spring boot 项目自动生成 API 文档。 Springdoc通过在运行时检查应用程序以根据 spring 配置、类结构和各种注释推断 API 语义来工作。可以使用 swagger-api 通过注释来自动生成 JSON/YAML 和 HTML 格式 API 的文档。</p><p>该库支持：</p><ul><li>OpenAPI 3</li><li>Spring-boot v3 (Java 17 &amp; Jakarta EE 9)</li><li>JSR-303, specifically for @NotNull, @Min, @Max, and @Size.</li><li>Swagger-ui</li><li>OAuth 2</li><li>GraalVM native images</li></ul><p>下面演示如何在Spring Boot3.x.x中集成Springdoc，参考文档见<a href="https://springdoc.org/index.html#migrating-from-springfox">这里</a>。</p><h3 id="1-引入Springdoc依赖"><a href="#1-引入Springdoc依赖" class="headerlink" title="1. 引入Springdoc依赖"></a>1. 引入Springdoc依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// author: SilenceZheng66</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建配置类-1"><a href="#2-创建配置类-1" class="headerlink" title="2. 创建配置类"></a>2. 创建配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdocConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GroupedOpenApi <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .packagesToScan(<span class="string">&quot;com.slz.swagger.controller&quot;</span>)</span><br><span class="line">                .group(<span class="string">&quot;springdoc-demo&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-写个响应类-1"><a href="#3-写个响应类-1" class="headerlink" title="3. 写个响应类"></a>3. 写个响应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAILED = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-写个控制器-1"><a href="#4-写个控制器-1" class="headerlink" title="4. 写个控制器"></a>4. 写个控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;hello api&quot;, description = &quot;Dummy Hello&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;hello api&quot;, description = &quot;hello api for test&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(value = &#123;</span></span><br><span class="line"><span class="meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;Valid input&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(responseCode = &quot;405&quot;, description = &quot;Invalid input&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(Result.SUCCESS, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-启动-1"><a href="#5-启动-1" class="headerlink" title="5. 启动"></a>5. 启动</h3><p>直接进入地址 <code>http://localhost:8080/swagger-ui/index.html#/</code></p><p><img src="/assets/post_img/article101/springdoc.png" alt="springdoc"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://swagger.io/resources/open-api/">https://swagger.io/resources/open-api/</a><br>[2] <a href="https://github.com/swagger-api">https://github.com/swagger-api</a><br>[3] <a href="https://github.com/springfox/springfox">https://github.com/springfox/springfox</a><br>[4] <a href="https://blog.csdn.net/long199366/article/details/114388171">https://blog.csdn.net/long199366/article/details/114388171</a><br>[5] <a href="http://springfox.github.io/springfox/docs/current/">http://springfox.github.io/springfox/docs/current/</a><br>[6] <a href="https://blog.csdn.net/qq_42495847/article/details/121424122">https://blog.csdn.net/qq_42495847/article/details/121424122</a><br>[7] <a href="https://stackoverflow.com/questions/71549614/springfox-type-javax-servlet-http-httpservletrequest-not-present">https://stackoverflow.com/questions/71549614/springfox-type-javax-servlet-http-httpservletrequest-not-present</a><br>[8] <a href="https://blog.csdn.net/m0_52457066/article/details/129094931">https://blog.csdn.net/m0_52457066/article/details/129094931</a><br>[9] <a href="https://blog.csdn.net/kkorkk/article/details/123774484">https://blog.csdn.net/kkorkk/article/details/123774484</a><br>[10] <a href="https://springdoc.org/v2/">https://springdoc.org/v2/</a><br>[11] <a href="https://springdoc.org/index.html#migrating-from-springfox">https://springdoc.org/index.html#migrating-from-springfox</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Swagger入门与Spring Boot集成Swagger。&lt;/p&gt;
&lt;p&gt;简单尝试了Springfox和Springdoc，感觉Springdoc问题更少些，但文档也相对少。&lt;br&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>公钥检索与常见错误</title>
    <link href="http://silencezheng.top/2023/04/11/article100/"/>
    <id>http://silencezheng.top/2023/04/11/article100/</id>
    <published>2023-04-11T06:46:45.000Z</published>
    <updated>2023-04-11T06:51:00.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在写Java的时候发现的一个报错:<br><code>java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed</code></p><p>经过一番搜索，发现主要是与MySQL版本相关，由TLS连接引起。<br><span id="more"></span></p><h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><p>考虑到有些同学只想“知其然”，先把解决方式贴出来。</p><p>引起该报错首先确定MySQL服务器的版本多半大于<code>MySQL 5.7.28</code>（当然不排除是这之前的版本但手动开启了TLS加密）。并且，多半是由于在连接时禁用了SSL。</p><p>考虑以下解决方式：</p><ol><li>开启SSL连接。</li><li>添加连接参数<code>allowPublicKeyRetrieval=true</code>。</li><li>提高JDBC版本，与服务器版本匹配（玄学）。</li></ol><h2 id="JDBC连接参数：useSSL"><a href="#JDBC连接参数：useSSL" class="headerlink" title="JDBC连接参数：useSSL"></a>JDBC连接参数：useSSL</h2><p>JDBC的useSSL是一个连接选项，用于控制在JDBC连接过程中是否启用加密连接，虽然叫SSL，但其实是TLS了。</p><p>当<code>useSSL=true</code>时，JDBC会使用SSL连接到MySQL服务器。在这种情况下，JDBC会在握手过程中验证MySQL服务器的证书，以确保与正确的服务器建立连接。同时，JDBC也会使用SSL协议对数据进行加密和解密，以保护数据传输的安全性。</p><p>当<code>useSSL=false</code>时，JDBC不会使用SSL连接到MySQL服务器。在这种情况下，JDBC会以普通的方式连接到MySQL服务器，并使用明文传输数据。这种情况下的连接可能会存在安全隐患，因为数据在传输过程中可能会被拦截和窃听。</p><p>我们可以通过抓包来验证，首先是在开启SSL的情况下：</p><p><img src="/assets/post_img/article100/useSSL.png" alt="useSSL"></p><p>此时Username不可见，然后关闭SSL再抓：</p><p><img src="/assets/post_img/article100/notUseSSL.png" alt="noUseSSL"></p><p>此时数据以明文的方式传输，但密码仍然经过加密处理（RSA），这是由于MySQL的身份验证机制。</p><h2 id="MySQL身份验证"><a href="#MySQL身份验证" class="headerlink" title="MySQL身份验证"></a>MySQL身份验证</h2><p>在MySQL 8.0之前，当MySQL客户端连接到启用了SSL加密的MySQL服务器时，会自动从服务器端下载SSL证书的公钥，以便进行SSL握手协议，从而确保客户端与服务器之间通信的机密性和完整性。但是，这个过程可能存在潜在的安全风险，因为MySQL客户端在下载公钥的过程中，可能会遭受中间人攻击。</p><p>为了解决这个安全问题，MySQL 8.0引入了Public Key Retrieval特性，它允许MySQL服务器在SSL握手协议中，发送服务器端SSL证书的SHA-256指纹（SHA-256 Fingerprint）而不是公钥。MySQL客户端可以使用这个指纹，从一个可信任的位置（如本地文件系统、内存缓存或PKCS#11设备）获取服务器端SSL证书的公钥，从而避免了中间人攻击。</p><p>在 MySQL 8.0 版本中，身份验证插件是一个可插拔的模块，用于控制 MySQL 用户身份验证的方式。在以前的 MySQL 版本中，使用的身份验证插件是 “mysql_native_password”，而在 MySQL 8.0 中，则使用   “caching_sha2_password”，这是一个更强大和更安全的插件，它使用 SHA-256 哈希函数（好像也不一定，只是SHA2）来加密密码，并提供了密码过期和密码历史记录功能，以增强数据库的安全性。</p><p>在 MySQL 8.0 中，还提供了另外两个身份验证插件，分别是 “sha256_password” 和 “mysql_old_password”。其中 “sha256_password” 也使用 SHA-256 哈希函数进行密码加密，但它不支持密码过期和密码历史记录功能。而 “mysql_old_password” 是用于向前兼容以前版本的 MySQL，它使用旧的加密方法。</p><h2 id="报错分析"><a href="#报错分析" class="headerlink" title="报错分析"></a>报错分析</h2><blockquote><p>对于使用 caching_sha2_password 插件的客户端，在连接到服务器时，密码永远不会以明文形式公开。密码传输的方式取决于是否使用安全连接或 RSA 加密：</p><p>如果连接是安全的，则不需要 RSA 密钥对，也不会使用它。这适用于使用 TLS 加密的 TCP 连接，以及 Unix 套接字文件和共享内存连接。密码以明文形式发送，但不能被窥探，因为连接是安全的。</p><p>如果连接不安全，则使用 RSA 密钥对。这适用于未使用 TLS 加密的 TCP 连接和命名管道连接。RSA 仅用于客户端和服务器之间的密码交换，以防止密码窥探。当服务器收到加密的密码时，它会对其进行解密。在加密中使用加扰来防止重复攻击。</p></blockquote><p>由于笔者使用的MySQL为8.0版本，默认使用”caching_sha2_password”插件进行身份验证，当关闭SSL时，该插件发现连接未加密，因此要求使用 RSA 加密传输密码。但是服务端并没有将公钥发送给客户端，而客户端又无法在可信位置检索到公钥，所以无法加密密码，导致报错。</p><p>基于以上分析，可以提出两种解决方案：</p><ol><li>改用加密连接。</li><li>在不用加密连接的同时，让客户端从服务器获取公钥。</li></ol><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>MySQL服务器版本：8.0.32，在每次成功连接后重启服务器，否则连接成功后会出现登录缓存，导致错误无法复现。</p><div class="table-container"><table><thead><tr><th style="text-align:center">mysql-connector-java</th><th style="text-align:center">useSSL</th><th style="text-align:center">allowPublicKeyRetrieval</th><th style="text-align:center">success</th></tr></thead><tbody><tr><td style="text-align:center">5.1.47</td><td style="text-align:center">false</td><td style="text-align:center"></td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">5.1.47</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">5.1.47</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.23</td><td style="text-align:center">false</td><td style="text-align:center"></td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">8.0.23</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.23</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.32</td><td style="text-align:center">false</td><td style="text-align:center"></td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">8.0.32</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.32</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr></tbody></table></div><p>根据实验结果，基本上可以验证之前的想法，且可以判断JDBC连接默认开启SSL并关闭allowPublicKeyRetrieval。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html">https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html</a><br>[2] <a href="https://silencezheng.top/2022/05/26/article41/">https://silencezheng.top/2022/05/26/article41/</a><br>[3] <a href="https://cloud.tencent.com/developer/news/791903">https://cloud.tencent.com/developer/news/791903</a><br>[4] <a href="https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html">https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在写Java的时候发现的一个报错:&lt;br&gt;&lt;code&gt;java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;经过一番搜索，发现主要是与MySQL版本相关，由TLS连接引起。&lt;br&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://silencezheng.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus之select报错</title>
    <link href="http://silencezheng.top/2023/03/23/article99/"/>
    <id>http://silencezheng.top/2023/03/23/article99/</id>
    <published>2023-03-23T13:13:54.000Z</published>
    <updated>2023-06-18T05:11:00.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mybatis-Plus中使用Mapper进行select查询实体时，可能会遇到Invalid value for getInt()的报错，然而对应字段往往和Integer无关。</p><span id="more"></span><p>这个错误很好理解，通常是由于数据库表中的字段数据类型和实体类的对应属性数据类型不匹配，但这些很容易检查，基本不可能出错。</p><p>但在确认没有正常问题时，需要检查是否存在对实体定义了含参构造函数，而没有给出无参构造函数的情况。在这种情况下，这个错误就会莫名出现。</p><p>关于这个BUG的一种猜测是：Java在没有自定义构造函数的时候会默认有一个空构造函数，但是自定义后就没有了。也许Mybatis执行select的时候是先创建对象（找不到无参构造），再给对象设置参数的。</p><p>具体原因需要看源码才能知道。</p><p>参考：<a href="https://blog.csdn.net/W1948730080/article/details/105123966">https://blog.csdn.net/W1948730080/article/details/105123966</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Mybatis-Plus中使用Mapper进行select查询实体时，可能会遇到Invalid value for getInt()的报错，然而对应字段往往和Integer无关。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="MyBatis" scheme="http://silencezheng.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>M系Mac重装MySQL</title>
    <link href="http://silencezheng.top/2023/03/17/article98/"/>
    <id>http://silencezheng.top/2023/03/17/article98/</id>
    <published>2023-03-17T05:39:15.000Z</published>
    <updated>2023-03-17T05:40:07.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于原本的MySQL8抽风，经常<code>Communications link failure</code>和<code>ERROR 2013 (HY000): Lost connection to MySQL server during query</code>，各种方法试过后都无法解决，只好卸载重装了。</p><span id="more"></span><h2 id="卸载原有的MySQL"><a href="#卸载原有的MySQL" class="headerlink" title="卸载原有的MySQL"></a>卸载原有的MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo下进入/usr/<span class="built_in">local</span>，关闭mysql后执行如下命令：</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/mysql*</span><br><span class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</span><br><span class="line">sudo rm -rf /Library/PreferencePanes/My*</span><br><span class="line">rm -rf ~/Library/PreferencePanes/My*</span><br><span class="line">sudo rm -rf /Library/Receipts/mysql*</span><br><span class="line">sudo rm -rf /Library/Receipts/MySQL*</span><br><span class="line">sudo rm -rf /var/db/receipts/com.mysql.*</span><br><span class="line">sudo rm /tmp/mysqlx.sock /tmp/mysqlx.sock.lock</span><br></pre></td></tr></table></figure><blockquote><p>如果你不是默认路径安装的或者忘记了是不是默认路径安装的，那么除了执行上面的命令之外，还要检查以下文件中是否有对应的文件，有的话删除即可。<br>检查 /usr/local/Cellar 目录是否有mysql文件，有的话删除。<br>检查 /usr/local/var 里的mysql文件，有的话删除。<br>检查 /tmp 里的 mysql.sock、mysql.sock.lock、my.cnf 文件，有的话删除。<br>err文件以及pid文件都是在 /usr/local/var/mysql 中，有的话删除。<br>brew安装的安装包存储在 /usr/local/Library/Cache/Homebrew ，有的话删除。<br>一定要记得执行brew cleanup。</p></blockquote><h2 id="下载对应版本的MySQL"><a href="#下载对应版本的MySQL" class="headerlink" title="下载对应版本的MySQL"></a>下载对应版本的MySQL</h2><p><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>一路默认安装，记得输入管理员密码～</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于原本的MySQL8抽风，经常&lt;code&gt;Communications link failure&lt;/code&gt;和&lt;code&gt;ERROR 2013 (HY000): Lost connection to MySQL server during query&lt;/code&gt;，各种方法试过后都无法解决，只好卸载重装了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://silencezheng.top/tags/MySQL/"/>
    
    <category term="MacOS" scheme="http://silencezheng.top/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Java常见对象辨析</title>
    <link href="http://silencezheng.top/2023/03/12/article97/"/>
    <id>http://silencezheng.top/2023/03/12/article97/</id>
    <published>2023-03-12T09:34:02.000Z</published>
    <updated>2023-03-12T09:35:45.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些Java常见Object简称解读。</p><p>VO、PO、BO、TO、DAO、DTO<br><span id="more"></span></p><h2 id="Data-Access-Object-DAO"><a href="#Data-Access-Object-DAO" class="headerlink" title="Data Access Object(DAO)"></a>Data Access Object(DAO)</h2><p>数据访问对象，是sun的一个标准j2ee设计模式，此对象用于访问数据库。通常和PO结合使用，DAO中包含了各种数据库的操作方法，夹在业务逻辑与数据库操作中间的操作层。</p><h2 id="Persistant-Object-PO"><a href="#Persistant-Object-PO" class="headerlink" title="Persistant Object(PO)"></a>Persistant Object(PO)</h2><p>PO可以看成是与数据库中的表相映射的java对象。最简单的PO就是对应数据库中某个表中的一条记录，多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。 好处就是可以把一条记录作为一个对象处理，可以方便的转为其他对象。</p><p>PO由一组属性和属性的get和set方法组成，这些属性是跟数据库表的字段一一对应的。PO对象需要实现序列化接口，它们在向数据库中添加新数据时被创建，删除数据库中数据时削除。并且PO只能存活在一个数据库连接中，断开连接就被销毁。</p><p>PO是有状态的，每个属性代表其当前的状态，他是物理数据的对象表示。使用它，可以使我们的程序与物理数据解耦，并且可以简化对象数据与物理数据之间的转换。</p><h2 id="Business-Object-BO"><a href="#Business-Object-BO" class="headerlink" title="Business Object(BO)"></a>Business Object(BO)</h2><p>业务对象，封装业务相关内容的java对象，其内容既可以只包含业务对象属性，也可以只包含业务方法，或是全包含。</p><p>一种常见的模式是把BO的信息在PO信息的基础上进行扩充，可以理解为多个PO对象的信息按照业务流程必要的拼凑在一起形成的对象。</p><h2 id="Data-Transfer-Object-DTO"><a href="#Data-Transfer-Object-DTO" class="headerlink" title="Data Transfer Object(DTO)"></a>Data Transfer Object(DTO)</h2><p>数据传输对象主要用于需要大量传输对象的地方，在已有数据基础上进行过滤筛选。 比如说，我们一张表有100个字段，那么对应的PO就有100个属性。但是我们界面上只要显示10个字段，客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构。到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO。 </p><p>DTO是一组需要跨进程或网络边界传输的聚合数据的简单容器。它不应该包含业务逻辑，也不应该将其行为限制为诸如内部一致性检查和基本验证之类的活动。</p><h2 id="Value-Object-VO"><a href="#Value-Object-VO" class="headerlink" title="Value Object(VO)"></a>Value Object(VO)</h2><p>值对象，通常用于业务层之间（前后端之间）的数据传递，仅包含数据。可以理解为展示要用的数据，传递到前端页面上，直接进行展示。</p><h2 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h2><p>一种常见的各对象间的层级关系如下图所示，但最终还是要回归于业务，根据业务对数据处理流程进行缩减或扩充。</p><p><img src="/assets/post_img/article97/objs.png" alt="obj layers"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.csdn.net/weixin_42501850/article/details/114309927">https://blog.csdn.net/weixin_42501850/article/details/114309927</a></p><p>[2] <a href="https://blog.csdn.net/weixin_33038783/article/details/114603926">https://blog.csdn.net/weixin_33038783/article/details/114603926</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一些Java常见Object简称解读。&lt;/p&gt;
&lt;p&gt;VO、PO、BO、TO、DAO、DTO&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows10深度学习环境配置</title>
    <link href="http://silencezheng.top/2023/02/25/article96/"/>
    <id>http://silencezheng.top/2023/02/25/article96/</id>
    <published>2023-02-25T03:54:00.000Z</published>
    <updated>2023-02-25T03:55:39.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Windows10深度学习环境配置，cuda11.6。</p><ul><li>anaconda</li><li>cudatoolkit</li><li>cudnn</li><li>pytorch</li><li>tensorflow<span id="more"></span></li></ul><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p><a href="https://www.anaconda.com/products/individual">anaconda</a></p><h2 id="Cudatoolkit"><a href="#Cudatoolkit" class="headerlink" title="Cudatoolkit"></a>Cudatoolkit</h2><p><a href="https://developer.nvidia.com/cuda-11-6-0-download-archive">11.6</a></p><p>全程默认安装，cmd输入<code>nvcc -V</code>检验是否按照成功。</p><h3 id="可能需要的环境变量"><a href="#可能需要的环境变量" class="headerlink" title="可能需要的环境变量"></a>可能需要的环境变量</h3><p><img src="/assets/post_img/article96/path.png" alt="path"></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如正常应用程序卸载即可，只留下：<code>NVIDIA的图形驱动程序、NVIDIA Physx系统软件、NVIDIA GeForce Experience</code>。</p><h2 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h2><p><a href="https://developer.nvidia.cn/rdp/cudnn-archive">https://developer.nvidia.cn/rdp/cudnn-archive</a></p><p>需要注册账户，选择与cudatoolkit对应的cuDNN版本进行下载。</p><p>下载下来后，把各文件夹的内容放到CUDA对应目录下。</p><h2 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h2><p>对于<code>cudatoolkit==11.6</code>，按照官网教程安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=11.6 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure><p>检验：<code>torch.cuda.isavailable()</code></p><h2 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h2><p><code>python -m pip install tensorflow==2.10.0</code>，2.10.0为最后一个支持Windows调用GPU的版本。</p><p>检验：<code>tf.config.list_physical_devices(&#39;GPU&#39;)</code></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Windows10深度学习环境配置，cuda11.6。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anaconda&lt;/li&gt;
&lt;li&gt;cudatoolkit&lt;/li&gt;
&lt;li&gt;cudnn&lt;/li&gt;
&lt;li&gt;pytorch&lt;/li&gt;
&lt;li&gt;tensorflow</summary>
    
    
    
    
    <category term="深度学习" scheme="http://silencezheng.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Windows" scheme="http://silencezheng.top/tags/Windows/"/>
    
  </entry>
  
</feed>
