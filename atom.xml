<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilenceZheng66-BLOG</title>
  
  <subtitle>silencezheng.top</subtitle>
  <link href="http://silencezheng.top/atom.xml" rel="self"/>
  
  <link href="http://silencezheng.top/"/>
  <updated>2023-09-14T15:11:44.556Z</updated>
  <id>http://silencezheng.top/</id>
  
  <author>
    <name>SilenceZheng66</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Optional使用入门</title>
    <link href="http://silencezheng.top/2023/09/14/article122/"/>
    <id>http://silencezheng.top/2023/09/14/article122/</id>
    <published>2023-09-14T15:08:57.000Z</published>
    <updated>2023-09-14T15:11:44.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Optional 是 Java 8 引进的一个新特性，它是一个容器对象，可以包含或不包含非空值。</p><span id="more"></span><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>Optional的机制类似于受检异常，强迫API调用者面对没有返回值的现实，因为程序直接返回 null 很可能导致调用端产生错误（空指针异常！）。</p><p>Optional 是用来作为方法返回值的，目的是清晰地表达返回值中没有结果的可能性。</p><h2 id="常用方法及调用方式"><a href="#常用方法及调用方式" class="headerlink" title="常用方法及调用方式"></a>常用方法及调用方式</h2><ul><li><p><code>of(value)</code>：创建一个包含指定非空值的 <code>Optional</code> 对象。</p></li><li><p><code>ofNullable(value)</code>：创建一个可能为空的 <code>Optional</code> 对象。如果传入的值为 <code>null</code>，则返回一个空的 <code>Optional</code>。</p></li><li><p><code>empty()</code>：创建一个空的 <code>Optional</code> 对象。</p></li><li><p><code>isPresent()</code>：检查 <code>Optional</code> 对象是否包含值。</p></li><li><p><code>get()</code>：获取 <code>Optional</code> 对象中的值。在调用之前应先使用 <code>isPresent()</code> 进行判断。</p></li></ul><p><code>Optional</code> 支持方法链式调用，使得我们可以在一系列操作中进行空值检查和转换。</p><p>下面是一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optionalValue = Optional.of(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (optionalValue.isPresent()) &#123;</span><br><span class="line">    String value = optionalValue.get();</span><br><span class="line">    System.out.println(value); <span class="comment">// 输出：Hello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; nullableValue = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">String result = nullableValue.orElse(<span class="string">&quot;Default Value&quot;</span>);</span><br><span class="line">System.out.println(result); <span class="comment">// 输出：Default Value</span></span><br></pre></td></tr></table></figure><p>除了常用方法，还有一些方法可以对<code>Optional</code>对象进行快捷操作，如上面出现的<code>orElse</code>，下面介绍其中一些。</p><ul><li><p><code>orElse(T other)</code>：如果包含的值存在，则返回该值；如果不存在，则返回默认值 <code>other</code>。无论值是否存在，都会进行计算，并返回结果。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optionalValue = Optional.of(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">String value = optionalValue.orElse(<span class="string">&quot;Default Value&quot;</span>);</span><br><span class="line">System.out.println(value); <span class="comment">// 输出：Hello</span></span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">String defaultValue = emptyOptional.orElse(<span class="string">&quot;Default Value&quot;</span>);</span><br><span class="line">System.out.println(defaultValue); <span class="comment">// 输出：Default Value</span></span><br></pre></td></tr></table></figure></li><li><p><code>orElseGet(Supplier&lt;? extends T&gt; other)</code>：如果包含的值存在，则返回该值；如果不存在，则使用提供的 <code>Supplier</code> 函数来计算并返回值。与 <code>orElse()</code> 类似，但在值不存在时，<code>Supplier</code> 函数才会被调用。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optionalValue = Optional.of(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">String value = optionalValue.orElseGet(() -&gt; expensiveOperation());</span><br><span class="line">System.out.println(value); <span class="comment">// 输出：Hello</span></span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">String computedValue = emptyOptional.orElseGet(() -&gt; expensiveOperation());</span><br><span class="line">System.out.println(computedValue); <span class="comment">// 调用 expensiveOperation() 方法，并输出其返回值</span></span><br></pre></td></tr></table></figure></li><li><p><code>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code>：如果包含的值存在，则返回该值；如果不存在，则抛出指定的异常。通过提供一个exceptionSupplier来生成异常对象。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optionalValue = Optional.of(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">String value = optionalValue.orElseThrow(() -&gt; <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Value not found&quot;</span>));</span><br><span class="line">System.out.println(value); <span class="comment">// 输出：Hello</span></span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">String computedValue = emptyOptional.orElseThrow(() -&gt; <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Value not found&quot;</span>)); <span class="comment">// 抛出异常</span></span><br></pre></td></tr></table></figure></li><li><p><code>ifPresent(Consumer&lt;? super T&gt; consumer)</code>：接受一个 Consumer 函数作为参数，并在包含的值存在时执行该函数。该方法无返回值。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optionalValue = Optional.of(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">optionalValue.ifPresent(value -&gt; System.out.println(<span class="string">&quot;Value is present: &quot;</span> + value)); <span class="comment">// 输出：Value is present: Hello</span></span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">emptyOptional.ifPresent(value -&gt; System.out.println(<span class="string">&quot;Value is present: &quot;</span> + value)); <span class="comment">// 由于值不存在，所以不执行任何操作</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>1、不要使用<code>Optional</code>作为Java Bean实例域的类型<br>即避免以下这种代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    [access_modifier] [<span class="keyword">static</span>] [<span class="keyword">final</span>] Optional&lt;String&gt; zip;</span><br><span class="line">    [access_modifier] [<span class="keyword">static</span>] [<span class="keyword">final</span>] Optional&lt;String&gt; telephone = Optional.empty();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为 <code>Optional</code> 没有实现Serializable接口（不可序列化）</p><p>2、不要把容器类型包装在<code>Optional</code>中<br>即避免：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;List&lt;String&gt;&gt; fetchCartItems(<span class="keyword">long</span> id) &#123;</span><br><span class="line">    Cart cart = ... ;    </span><br><span class="line">    List&lt;String&gt; items = cart.getItems(); <span class="comment">// this may return null</span></span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为容器类都有自己空值设计，如 <code>Collections.emptyList() Collections.emptySet() Collections.emptyMap() Stream.empty()</code> 等：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fetchCartItems</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Cart cart = ... ;    </span><br><span class="line">    List&lt;String&gt; items = cart.getItems(); <span class="comment">// this may return null</span></span><br><span class="line">    <span class="keyword">return</span> items == <span class="keyword">null</span> ? Collections.emptyList() : items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、不要给<code>Optional</code>对象赋值 null<br>避免：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVOID</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Cart&gt; <span class="title">fetchCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;Cart&gt; emptyCart = <span class="keyword">null</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而应该用 <code>Optional.empty()</code> 表达空值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PREFER</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Cart&gt; <span class="title">fetchCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;Cart&gt; emptyCart = Optional.empty();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、尽量使用<code>Optional</code>提供的快捷API避免手写条件语句<br>代码更简洁。</p><p>5、使用 <code>equals</code> 而不是 <code>==</code> 来比较 <code>Optional</code> 的值<br><code>Optional</code> 的 <code>equals</code> 方法已经实现了内部值比较。</p><p>6、对于可能是空值的函数返回使用<code>Optional</code><br>对于读取值类型的函数使用是很好的实践。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html</a><br>[2] <a href="https://zhuanlan.zhihu.com/p/128481434">https://zhuanlan.zhihu.com/p/128481434</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Optional 是 Java 8 引进的一个新特性，它是一个容器对象，可以包含或不包含非空值。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Lombok原理简析</title>
    <link href="http://silencezheng.top/2023/09/11/article121/"/>
    <id>http://silencezheng.top/2023/09/11/article121/</id>
    <published>2023-09-11T13:32:25.000Z</published>
    <updated>2023-09-11T13:36:03.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Lombok实现原理简析。<br><span id="more"></span></p><h2 id="JCP与JSR"><a href="#JCP与JSR" class="headerlink" title="JCP与JSR"></a>JCP与JSR</h2><p>JCP（Java Community Process）是管理 Java 生态（包括 J2SE、J2EE 等等）发展及指导和推动Java平台发展的合作组织，而JSR（Java Specification Request）则是由JCP提出的一种规范请求。</p><blockquote><p>JCP是由Sun Microsystems（现在是Oracle Corporation）创建的一个组织，负责制定和管理Java技术的发展。它包括了一系列专家组和工作组，这些组织和个人共同合作制定和更新Java规范。</p><p>JSR 是 Java 规范请求。这是由一个或多个成员提交给 PMO 的文件，以提议开发新规范或对现有规范进行重大修订。 JCP 计划目前正在开发许多 Java 技术规范，包括 Java™ Micro Edition (Java ME™)、Java™ Platform Enterprise Edition (Java EE™) 和 Java™ Standard Edition (Java SE™) 的下一版本。 JSR 还指由这些提案产生的规范开发工作。</p><p>JSR经历多个阶段，包括草案、提案、公开评论、维护和最终发布等。</p><p>PMO 即 Program Management Office，项目管理办公室是 Oracle 内部负责监督 Java 社区流程并管理项目日常运行的小组。该规范的实际开发是在专家组内进行的。</p></blockquote><p>JCP：<a href="https://jcp.org/en/home/index">https://jcp.org/en/home/index</a></p><h2 id="JSR-000269"><a href="#JSR-000269" class="headerlink" title="JSR-000269"></a>JSR-000269</h2><p>JSR-000269（JSR-269）的目标是定义并实现Java编译时注解处理器的标准API，或称为可插拔注解处理（Pluggable Annotation Processing），该JSR提供了一种机制，使开发人员能够在Java源代码编译过程中访问和处理注解，从而实现更高级的语义效果和自动化任务。</p><p>要完全的了解JSR-269的前因后果及技术细节，不应该在本文中寻找答案，本文仅铺垫一些形象化描述Lombok实现原理所必需的前置知识。总之，通过JSR-269的实现，开发人员可以利用编译时注解处理器的能力，以一种标准化和可扩展的方式对源代码进行自动化处理。这种处理包括生成额外的代码、进行静态分析、验证约束条件等。</p><p>JSR-000269的原始提出第一节如下：</p><blockquote><p>J2SE 1.5引入了一种新的Java语言机制“注解”，允许使用注解类型对类、字段和方法进行注解。这些注解通常由编译时工具或运行时库来处理，以实现新的语义效果。为了支持编译时的注解处理，这个JSR将定义API，允许使用标准可插拔的API创建注解处理器。这将简化创建注解处理器的任务，并且还可以自动发现适用于给定源文件的合适的注解处理器。</p><p>该规范将包括至少两个部分：一个部分是对Java编程语言进行建模的API部分，另一个部分用于声明注解处理器并控制它们的运行方式。由于注解是放置在程序元素上的，注解处理框架需要反映程序结构。注解处理器将能够指定它们处理的注解，并且多个处理器将能够合作运行。</p><p>处理器和程序结构API可以在编译时访问；即此功能补充了核心反射支持读取注解的能力。</p></blockquote><h2 id="Lombok代码注入原理"><a href="#Lombok代码注入原理" class="headerlink" title="Lombok代码注入原理"></a>Lombok代码注入原理</h2><p>Lombok使用了JSR-269的API，即<code>javax.annotation.processing</code>下的一组接口，在编译期时把 Lombok 的注解代码，转换为常规的 Java ⽅法⽽实现注⼊。</p><p>使用 <code>javac</code> 进行编译时，Lombok生成目标方法的流程如下：</p><ol><li>首先 <code>javac</code> 对源代码进行分析生成一棵抽象语法树(AST)</li><li>接着在运行过程中调用实现了 JSR-269 API 的 lombok 程序</li><li>接着编译器会调用 lombok 程序对上面得到的抽象语法树 AST 进行处理，找到其注解所在类对应的语法树(AST)，然后修改该语法树，增加注解对应的方法或代码片段到定义的相应树节点</li><li><code>javac</code> 使用修改后的抽象语法树生成最终的 class 文件</li></ol><h2 id="利用269API实现Setter注解"><a href="#利用269API实现Setter注解" class="headerlink" title="利用269API实现Setter注解"></a>利用269API实现Setter注解</h2><p>1、⾃定义注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lombok.setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MySetter &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、自定义注解处理器<br>注解处理器是代码生成的核心，对语法树的操作需要使用自己JDK的<code>tools.jar</code>，涉及到的核心库主要为<code>com.sun.tools.javac</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> lombok.setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.source.tree.Tree.Kind;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.api.JavacTrees;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.code.Flags;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.code.Type;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.processing.JavacProcessingEnvironment;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.JCTree;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.TreeMaker;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.TreeTranslator;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.Context;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.ListBuffer;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.Name;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.Names;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.*;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.SourceVersion;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Element;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.TypeElement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes(&quot;lombok.setter.MySetter&quot;)</span></span><br><span class="line"><span class="meta">@SupportedSourceVersion(SourceVersion.RELEASE_8)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySetterProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JavacTrees javacTrees; <span class="comment">// 提供了待处理的抽象语法树</span></span><br><span class="line">    <span class="keyword">private</span> TreeMaker treeMaker; <span class="comment">// 封装了创建AST节点的一些方法</span></span><br><span class="line">    <span class="keyword">private</span> Names names; <span class="comment">// 提供了创建标识符的方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">        <span class="comment">// 获取资源</span></span><br><span class="line">        <span class="keyword">this</span>.javacTrees = JavacTrees.instance(processingEnv);</span><br><span class="line">        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();</span><br><span class="line">        <span class="keyword">this</span>.treeMaker = TreeMaker.instance(context);</span><br><span class="line">        <span class="keyword">this</span>.names = Names.instance(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取MySetter注解的元素</span></span><br><span class="line">        Set&lt;? extends Element&gt; elementsAnnotatedWith = roundEnv.getElementsAnnotatedWith(MySetter.class);</span><br><span class="line">        elementsAnnotatedWith.forEach(element -&gt; &#123;</span><br><span class="line">            JCTree tree = javacTrees.getTree(element);</span><br><span class="line">            <span class="comment">// 使用 TreeTranslator 遍历抽象语法树</span></span><br><span class="line">            tree.accept(<span class="keyword">new</span> TreeTranslator() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitClassDef</span><span class="params">(JCTree.JCClassDecl jcClassDecl)</span> </span>&#123;</span><br><span class="line">                    List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">                    <span class="comment">// 在抽象树中找出所有变量</span></span><br><span class="line">                    <span class="keyword">for</span>(JCTree jcTree:jcClassDecl.defs) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(jcTree.getKind().equals(Kind.VARIABLE)) &#123;</span><br><span class="line">                            JCTree.JCVariableDecl jcVariableDecl = (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">                            jcVariableDeclList = jcVariableDeclList.append(jcVariableDecl);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 对变量生成方法</span></span><br><span class="line">                    jcVariableDeclList.forEach(jcVariableDecl -&gt; &#123;</span><br><span class="line">                        jcClassDecl.defs = jcClassDecl.defs.prepend(makeGetterMethodDecl(jcVariableDecl));</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">super</span>.visitClassDef(jcClassDecl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JCTree.<span class="function">JCMethodDecl <span class="title">makeGetterMethodDecl</span><span class="params">(JCTree.JCVariableDecl jcVariableDecl)</span> </span>&#123;</span><br><span class="line">        ListBuffer&lt;JCTree.JCStatement&gt; statements = <span class="keyword">new</span> ListBuffer&lt;&gt;();</span><br><span class="line">        <span class="comment">// 生成表达式，例如 this.a = a;</span></span><br><span class="line">        JCTree.JCExpressionStatement aThis = makeAssignment(</span><br><span class="line">            treeMaker.Select(treeMaker.Ident(names.fromString(<span class="string">&quot;this&quot;</span>)), jcVariableDecl.getName()),</span><br><span class="line">            treeMaker.Ident(jcVariableDecl.getName())</span><br><span class="line">        );</span><br><span class="line">        statements.append(aThis);</span><br><span class="line">        JCTree.JCBlock block = treeMaker.Block(<span class="number">0</span>, statements.toList()); <span class="comment">// 创建代码块抽象语法树节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成入参</span></span><br><span class="line">        JCTree.JCVariableDecl param = treeMaker.VarDef( <span class="comment">// 创建一个变量定义节点</span></span><br><span class="line">            treeMaker.Modifiers(Flags.PARAMETER), <span class="comment">// 指定修饰符为入参</span></span><br><span class="line">            jcVariableDecl.getName(), <span class="comment">// 使用原始变量定义节点的名称作为入参的名称</span></span><br><span class="line">            jcVariableDecl.vartype, <span class="comment">// 使用原始变量定义节点的变量类型作为入参的类型</span></span><br><span class="line">            <span class="keyword">null</span> <span class="comment">// 表示入参没有初始值</span></span><br><span class="line">        );</span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; parameters = List.of(param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成返回对象</span></span><br><span class="line">        JCTree.JCExpression methodType = treeMaker.Type(</span><br><span class="line">            <span class="keyword">new</span> Type.JCVoidType()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结合内容生成方法</span></span><br><span class="line">        <span class="keyword">return</span> treeMaker.MethodDef(</span><br><span class="line">            treeMaker.Modifiers(Flags.PUBLIC),</span><br><span class="line">            getNewMethodName(jcVariableDecl.getName()),</span><br><span class="line">            methodType, List.nil(), parameters, List.nil(), block, <span class="keyword">null</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Name <span class="title">getNewMethodName</span><span class="params">(Name name)</span> </span>&#123;</span><br><span class="line">        String s = name.toString();</span><br><span class="line">        <span class="comment">// 驼峰命名方法</span></span><br><span class="line">        <span class="keyword">return</span> names.fromString(</span><br><span class="line">            <span class="string">&quot;set&quot;</span> + s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>, name.length())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JCTree.<span class="function">JCExpressionStatement <span class="title">makeAssignment</span><span class="params">(JCTree.JCExpression lhs, JCTree.JCExpression rhs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生成赋值语句的抽象语法树节点</span></span><br><span class="line">        <span class="keyword">return</span> treeMaker.Exec(</span><br><span class="line">            treeMaker.Assign(</span><br><span class="line">                lhs, <span class="comment">// left-hand side</span></span><br><span class="line">                rhs  <span class="comment">// right-hand side</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编译注解处理器<br>之后所有操作都在MySetter的目录下进行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -cp /path/to/tools.jar MySetter* -d .</span><br></pre></td></tr></table></figure><p>4、编写和编译目标类<br>目标类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MySetter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMySetter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Integer intt;</span><br><span class="line">    <span class="keyword">public</span> String strr;</span><br><span class="line">    <span class="keyword">public</span> Byte bytee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用自定义注解处理器编译目标类：<code>javac -processor  lombok.setter.MySetterProcessor TestMySetter.java</code></p><p>编译结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMySetter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Integer intt;</span><br><span class="line">    <span class="keyword">public</span> String strr;</span><br><span class="line">    <span class="keyword">public</span> Byte bytee;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBytee</span><span class="params">(Byte var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytee = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrr</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strr = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntt</span><span class="params">(Integer var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.intt = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestMySetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Lombok插件"><a href="#Lombok插件" class="headerlink" title="Lombok插件"></a>Lombok插件</h2><p>前面形象化的讲述了Lombok的代码生成原理，但这些都发生在编译期，代码编辑器如何获取到这些信息并提前应用到代码提示上呢？Lombok给主流集成开发环境编写了Lombok插件，在使用Lombok的过程中不需要编译即可实现代码提示和代码补全，相关源码都公开在GitHub上（见[9]），有兴趣的读者可以自行阅读研究。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://developer.aliyun.com/article/1081626">https://developer.aliyun.com/article/1081626</a><br>[2] <a href="https://blog.csdn.net/shouchenchuan5253/article/details/111658356">https://blog.csdn.net/shouchenchuan5253/article/details/111658356</a><br>[3] <a href="https://blog.csdn.net/weixin_43983762/article/details/105867398">https://blog.csdn.net/weixin_43983762/article/details/105867398</a><br>[4] <a href="https://juejin.cn/post/7103011031672176677">https://juejin.cn/post/7103011031672176677</a><br>[5] <a href="https://jcp.org/en/jsr/detail?id=269">https://jcp.org/en/jsr/detail?id=269</a><br>[6] <a href="https://jcp.org/aboutJava/communityprocess/mrel/jsr269/index6.html">https://jcp.org/aboutJava/communityprocess/mrel/jsr269/index6.html</a><br>[7] <a href="https://projectlombok.org/">https://projectlombok.org/</a><br>[8] <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/apt/GettingStarted.html">https://docs.oracle.com/javase/7/docs/technotes/guides/apt/GettingStarted.html</a><br>[9] <a href="https://github.com/projectlombok/lombok">https://github.com/projectlombok/lombok</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Lombok实现原理简析。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Lombok" scheme="http://silencezheng.top/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Lombok之@Builder碎碎念</title>
    <link href="http://silencezheng.top/2023/09/10/article120/"/>
    <id>http://silencezheng.top/2023/09/10/article120/</id>
    <published>2023-09-10T12:23:30.000Z</published>
    <updated>2023-09-10T12:24:14.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Lombok@Builder实现链式构建的弊病及替代方案。<br><span id="more"></span></p><h2 id="Builder的弊病"><a href="#Builder的弊病" class="headerlink" title="@Builder的弊病"></a>@Builder的弊病</h2><h3 id="存在继承关系时十分复杂"><a href="#存在继承关系时十分复杂" class="headerlink" title="存在继承关系时十分复杂"></a>存在继承关系时十分复杂</h3><p>错误用法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String parentName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String childName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> childAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：Implicit super constructor Parent() is undefined. Must explicitly invoke another constructor</span></span><br></pre></td></tr></table></figure></p><p>正确用法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String parentName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String childName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> childAge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String parentName, <span class="keyword">int</span> parentAge, String childName, <span class="keyword">int</span> childAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parentName, parentAge);</span><br><span class="line">        <span class="keyword">this</span>.childName = childName;</span><br><span class="line">        <span class="keyword">this</span>.childAge = childAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">Child child = Child.builder()</span><br><span class="line">  .parentName(<span class="string">&quot;Andrea&quot;</span>)</span><br><span class="line">  .parentAge(<span class="number">38</span>)</span><br><span class="line">  .childName(<span class="string">&quot;Emma&quot;</span>)</span><br><span class="line">  .childAge(<span class="number">6</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></p><p>但如果父类使用了@Builder注解呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String parentName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时用原子类会报错：<code>Child中的builder()无法覆盖Parent中的builder()</code>。可以通过修改子类为如下形式解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String childName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> childAge;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Builder(builderMethodName = &quot;childBuilder&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String parentName, <span class="keyword">int</span> parentAge, String childName, <span class="keyword">int</span> childAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parentName, parentAge);</span><br><span class="line">        <span class="keyword">this</span>.childName = childName;</span><br><span class="line">        <span class="keyword">this</span>.childAge = childAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在链式构建子类对象时，就需要调用<code>Child.childBuilder()</code>了。即便如此，在继承层级多时也十分繁琐。</p><p>在Lombok1.18中，提供了@SuperBuilder注解，可以解决上述问题。使用示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String parentName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String childName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> childAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="不可与-Data同时使用"><a href="#不可与-Data同时使用" class="headerlink" title="不可与@Data同时使用"></a>不可与@Data同时使用</h3><p>很多框架会使用类的无参构造函数创建对象，但是如果同时使⽤@Data和@Builder的话，会导致类的无参构造函数缺失。</p><p>并且，这种情况并不能通过手动添加无参构造函数或添加@NoArgsConstructor解决。</p><p>该问题只能通过引⼊注解@Tolerate来解决。</p><p>Lombok同时使⽤@Data和@Builder的时候，如果要⽣成⽆参构造，需要在代码⾥⾯⼿动引⼊注解@Tolerate，让Lombok在⽣成类的时候，对指定的构造函数不感知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer int1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tolerate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用-Accessors替代-Builder"><a href="#用-Accessors替代-Builder" class="headerlink" title="用@Accessors替代@Builder"></a>用@Accessors替代@Builder</h2><p>在为了链式编程而使用@Builder时，它并非最佳实践。@Builder会额外创建内部类，无法与@Data兼容，且处理继承关系十分复杂。</p><p>使用@Accessors(chain = true)实现链式编程是更好的选择，简单示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T payload;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Status status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T payload;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Status status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getPayload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> APIResponse&lt;T&gt; <span class="title">setPayload</span><span class="params">(T payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.payload = payload;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> APIResponse&lt;T&gt; <span class="title">setStatus</span><span class="params">(Status status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="comment">// 假设Status也使用了@Accessors(chain = true)</span></span><br><span class="line">Status status = <span class="keyword">new</span> Status().setResponseCode(<span class="string">&quot;RESPONSE_CODE_IDENTIFIER&quot;</span>).setDescription(<span class="string">&quot;Bla Bla Bla&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> APIResponse().setStatus(status);</span><br></pre></td></tr></table></figure></p><p>实际运用时，如果属性较多，且分为必传属性和选填属性时，可以将必传参数定义在构造方法中，加上 @Accessors 注解，这样就可以实现必传参数的传入，又可以实现选填参数的链式调用。</p><p>假设 Student 类，它的 学生ID和年级和班级是必填的，姓名、性别、住址是选填的，那么示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义必传属性，使用 final 修饰，不提供 setter 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> studentId; <span class="comment">// 学生ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> grade; <span class="comment">// 年级</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> classNum; <span class="comment">// 班级</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义选填属性，提供 setter 方法</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String gender; <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">// 住址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义构造方法，接收必传参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> studentId, <span class="keyword">int</span> grade, <span class="keyword">int</span> classNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentId = studentId;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">        <span class="keyword">this</span>.classNum = classNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 getter 和 setter 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student(<span class="number">1001</span>, <span class="number">3</span>, <span class="number">8</span>) <span class="comment">// 创建一个学生对象，传入必传参数</span></span><br><span class="line">        .setName(<span class="string">&quot;张三&quot;</span>) <span class="comment">// 设置姓名</span></span><br><span class="line">        .setGender(<span class="string">&quot;男&quot;</span>) <span class="comment">// 设置性别</span></span><br><span class="line">        .setAddress(<span class="string">&quot;北京市朝阳区&quot;</span>); <span class="comment">// 设置住址</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.baeldung.com/lombok-builder-inheritance">https://www.baeldung.com/lombok-builder-inheritance</a><br>[2] <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA%3D%3D&amp;mid=2247534735&amp;idx=1&amp;sn=c6363bff49edbe8b03b5789d2f5b18b9&amp;chksm=e92a7580de5dfc967aaaa7d696a95a7361c4188fe8a626037f51cb70c53466f9ee78efef369d&amp;scene=262&amp;from=industrynews">https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA%3D%3D&amp;mid=2247534735&amp;idx=1&amp;sn=c6363bff49edbe8b03b5789d2f5b18b9&amp;chksm=e92a7580de5dfc967aaaa7d696a95a7361c4188fe8a626037f51cb70c53466f9ee78efef369d&amp;scene=262&amp;from=industrynews</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Lombok@Builder实现链式构建的弊病及替代方案。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Lombok" scheme="http://silencezheng.top/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>匿名内部类</title>
    <link href="http://silencezheng.top/2023/09/02/article119/"/>
    <id>http://silencezheng.top/2023/09/02/article119/</id>
    <published>2023-09-02T10:10:40.000Z</published>
    <updated>2023-09-02T10:11:20.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中的匿名类，Java8及以后。</p><p>涉及概念包括：<strong>等效<code>final</code></strong>，成员，变量，作用域。<br><span id="more"></span></p><h2 id="匿名内部类-Anonymous-Classes"><a href="#匿名内部类-Anonymous-Classes" class="headerlink" title="匿名内部类(Anonymous Classes)"></a>匿名内部类(Anonymous Classes)</h2><p>匿名内部类（匿名类）是一种在Java中用于创建临时性、一次性使用的类的特殊语法结构。它可以用来实现接口、继承类或创建临时对象等操作，通常在需要一个类的实例，但又不希望单独为之创建一个独立的类文件时使用。</p><p>匿名类可以使你的代码更加简洁，你可以在定义一个类的同时对其进行实例化。它与局部类很相似，不同的是它没有类名，如果某个局部类你只需要用一次，就可以使用匿名类来表达。</p><p>匿名类通常用于以下场景：</p><ol><li><p><strong>实现接口：</strong> 通过匿名类实现一个接口，从而创建一个接口的实例。</p></li><li><p><strong>继承类：</strong> 通过匿名类继承一个类，从而创建一个子类的实例。</p></li><li><p><strong>创建临时对象：</strong> 在一些临时需要的情况下，可以使用匿名类来创建对象。</p></li></ol><h2 id="匿名类与局部类对比"><a href="#匿名类与局部类对比" class="headerlink" title="匿名类与局部类对比"></a>匿名类与局部类对比</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAnonymousClasses</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包含两个方法的HelloWorld接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、局部类EnglishGreeting实现了HelloWorld接口</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">EnglishGreeting</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">            String name = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HelloWorld englishGreeting = <span class="keyword">new</span> EnglishGreeting();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、匿名类实现HelloWorld接口</span></span><br><span class="line">        HelloWorld frenchGreeting = <span class="keyword">new</span> HelloWorld() &#123;</span><br><span class="line">            String name = <span class="string">&quot;tout le monde&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;tout le monde&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Salut &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、匿名类实现HelloWorld接口</span></span><br><span class="line">        HelloWorld spanishGreeting = <span class="keyword">new</span> HelloWorld() &#123;</span><br><span class="line">            String name = <span class="string">&quot;mundo&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;mundo&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hola, &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        englishGreeting.greet();</span><br><span class="line">        frenchGreeting.greetSomeone(<span class="string">&quot;Fred&quot;</span>);</span><br><span class="line">        spanishGreeting.greet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        HelloWorldAnonymousClasses myApp = <span class="keyword">new</span> HelloWorldAnonymousClasses();</span><br><span class="line">        myApp.sayHello();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// Hello world</span></span><br><span class="line">        <span class="comment">// Salut Fred</span></span><br><span class="line">        <span class="comment">// Hola, mundo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例中用局部类来初始化变量<code>englishGreeting</code>，用匿类来初始化变量<code>frenchGreeting</code>和<code>spanishGreeting</code>，两种实现之间有明显的区别：</p><p>1）局部类<code>EnglishGreeting</code>继承<code>HelloWorld</code>接口，有自己的类名，定义完成之后需要再用new关键字实例化才可以使用；</p><p>2）<code>frenchGreeting、spanishGreeting</code>在定义的时候就实例化了，定义完了就可以直接使用；</p><p>3）<strong>匿名类是一个表达式</strong>，因此在定义的最后用分号”;”结束。</p><h2 id="匿名类的语法"><a href="#匿名类的语法" class="headerlink" title="匿名类的语法"></a>匿名类的语法</h2><p>匿名类表达式的通用语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建匿名类实例</span></span><br><span class="line">SuperClassOrInterface obj = <span class="keyword">new</span> SuperClassOrInterface() &#123;</span><br><span class="line">    <span class="comment">// 成员变量（如果需要）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化块（如果需要）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">returnType <span class="title">methodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中的关键点包括：</p><ul><li><p><code>SuperClassOrInterface</code>：匿名类可以继承一个类或实现一个接口，这个部分就是你要继承或实现的类或接口的类型。</p></li><li><p>成员变量：如果需要，在匿名类内部可以定义成员变量，可以在构造器、初始化块以及方法中使用。</p></li><li><p>初始化块：如果需要，在匿名类内部可以定义初始化块，用来初始化成员变量。</p></li><li><p>方法重写：匿名类可以重写父类或接口中的方法。</p></li><li><p><code>returnType</code>：重写方法的返回类型。</p></li><li><p><code>methodName()</code>：要重写的方法名。</p></li></ul><h2 id="匿名类对局部变量的访问规则，及对成员的声明及访问规则"><a href="#匿名类对局部变量的访问规则，及对成员的声明及访问规则" class="headerlink" title="匿名类对局部变量的访问规则，及对成员的声明及访问规则"></a>匿名类对局部变量的访问规则，及对成员的声明及访问规则</h2><p>与局部类一样，匿名类可以捕获变量，它们对外部域的局部变量具有相同的访问权限：</p><ol><li>匿名类可以访问其外部类的成员。</li><li>匿名类无法访问其外部域内未声明为<code>final</code>或实际上未声明为<code>final</code>的<strong>局部变量</strong>。</li><li>与嵌套类一样，匿名类中的类型（例如变量）声明会隐藏（<strong>shadow</strong>）外部域中具有相同名称的任何其他声明。</li></ol><p>匿名类对于其成员也有与局部类相同的限制：</p><ol><li>不能在匿名类中声明<strong>静态初始化块</strong>或<strong>成员接口</strong>。</li><li>匿名类可以具有静态成员，前提是它们是<strong>常量变量</strong>。</li></ol><p>匿名类中可以声明以下内容：</p><ul><li>字段</li><li>额外的方法（即使它们不实现父类的任何方法）</li><li>实例初始化块（Instance initializers）</li><li>局部类（Local classes）</li></ul><p>但是，<strong>在匿名类中不能声明构造函数</strong>（constructors）。</p><h2 id="匿名类访问外部类成员"><a href="#匿名类访问外部类成员" class="headerlink" title="匿名类访问外部类成员"></a>匿名类访问外部类成员</h2><p>一个有继承父类的匿名类示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String ANIMAL = <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 外部类成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名类访问其外部类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAnimalName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(bird.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鸟类，匿名子类，继承自Animal类，可以覆写父类方法</span></span><br><span class="line">    Animal bird = <span class="keyword">new</span> Animal(<span class="string">&quot;布谷鸟&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAnimalName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            accessTest();   <span class="comment">// 访问外部类成员方法</span></span><br><span class="line">            System.out.println(ANIMAL);  <span class="comment">// 访问外部类成员变量</span></span><br><span class="line">            <span class="keyword">super</span>.printAnimalName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bird.printAnimalName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AnimalTest animalTest = <span class="keyword">new</span> AnimalTest();</span><br><span class="line">        animalTest.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// 匿名类访问其外部类方法</span></span><br><span class="line">        <span class="comment">// 动物</span></span><br><span class="line">        <span class="comment">// 布谷鸟</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，匿名类可以访问外部类的所有成员。事实上，他们甚至可以修改这些成员。</p><h2 id="匿名类访问局部变量"><a href="#匿名类访问局部变量" class="headerlink" title="匿名类访问局部变量"></a>匿名类访问局部变量</h2><p>匿名类与局部类对外部域<strong>局部变量</strong>的访问权限是相同的，先看下面局部类的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outerValue = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 尝试修改局部变量 localValue，会发生什么？</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> localValue = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LocalInner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 输出Value</span></span><br><span class="line">                System.out.println(<span class="string">&quot;内部方法内部类访问外部变量Int: &quot;</span> + outerValue);</span><br><span class="line">                System.out.println(<span class="string">&quot;内部方法内部类访问局部变量Int: &quot;</span> + localValue);</span><br><span class="line">                outerValue = <span class="number">20</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;内部方法内部类修改外部变量Int: &quot;</span> + outerValue);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 尝试修改局部变量 localValue，会发生什么？</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LocalInner localInner = <span class="keyword">new</span> LocalInner();</span><br><span class="line">        localInner.innerMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass outer = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        outer.outerMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// 内部类方法访问外部类成员变量Int: 10</span></span><br><span class="line">        <span class="comment">// 内部类方法访问局部变量Int: 20</span></span><br><span class="line">        <span class="comment">// 内部类方法修改外部类成员变量Int: 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出说明局部类可以访问外部类成员，也可以访问局部变量。但修改局部变量会发生什么？我们添加<code>localValue = 10;</code>在对应注释下并执行，会报错：<code>java: 从内部类引用的本地变量必须是最终变量或实际上的最终变量</code>。</p><p>这是因为局部类访问局部变量的先决条件是局部变量满足<code>final</code>或<strong>等效<code>final</code></strong>。简单来说，该局部变量必须在初始化后不被修改，无论是否声明为<code>final</code>。</p><p>匿名类对于局部变量的访问规则与局部类相同，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EffectivelyFinalExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>; <span class="comment">// Effectively Final，虽然没有声明为final，但不会再次修改</span></span><br><span class="line">        <span class="comment">// x = 20; // 如果尝试修改x的值，编译器将产生错误</span></span><br><span class="line"></span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Value of x: &quot;</span> + x); <span class="comment">// 在匿名内部类中访问Effectively Final变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名类隐藏外部域声明"><a href="#匿名类隐藏外部域声明" class="headerlink" title="匿名类隐藏外部域声明"></a>匿名类隐藏外部域声明</h2><p>当在匿名类中声明具有与外部类相同名称的类型（例如变量）时，会发生隐藏（shadowing）现象。这意味着匿名类中的类型声明会覆盖外部类中具有相同名称的任何其他声明，从而隐藏外部类中的相应内容。</p><p>下面是一个示例，用于说明这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShadowingExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">10</span>; <span class="comment">// 外部类中的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">20</span>; <span class="comment">// 外部类中的局部变量</span></span><br><span class="line"></span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> value = <span class="number">30</span>; <span class="comment">// 匿名类中的局部变量，会隐藏外部类的局部变量</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Value in anonymous class: &quot;</span> + value); <span class="comment">// 访问匿名类中的局部变量</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Value in outer class method: &quot;</span> + ShadowingExample.<span class="keyword">this</span>.value); <span class="comment">// 访问外部类成员变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        r.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShadowingExample example = <span class="keyword">new</span> ShadowingExample();</span><br><span class="line">        example.performAction();</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// Value in anonymous class: 30</span></span><br><span class="line">        <span class="comment">// Value in outer class method: 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在匿名类中，我们可以通过 <code>ShadowingExample.this.value</code> 访问外部类的成员变量，因为匿名类中的局部变量 <code>value</code> 隐藏了外部类的局部变量 <code>value</code>，但没有隐藏外部类的成员变量 <code>value</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html</a><br>[2] <a href="https://www.cnblogs.com/wuhenzhidu/p/anonymous.html">https://www.cnblogs.com/wuhenzhidu/p/anonymous.html</a><br>[3] <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing">https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing</a><br>[4] <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html">https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java中的匿名类，Java8及以后。&lt;/p&gt;
&lt;p&gt;涉及概念包括：&lt;strong&gt;等效&lt;code&gt;final&lt;/code&gt;&lt;/strong&gt;，成员，变量，作用域。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus之配置自动填充</title>
    <link href="http://silencezheng.top/2023/08/26/article118/"/>
    <id>http://silencezheng.top/2023/08/26/article118/</id>
    <published>2023-08-26T05:12:19.000Z</published>
    <updated>2023-08-26T05:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过<code>MetaObjectHandler</code>接口，配置MyBatis-Plus的自动填充。</p><p>MyBatis-Plus版本：<code>3.4.3.4</code><br><span id="more"></span></p><h2 id="什么是自动填充"><a href="#什么是自动填充" class="headerlink" title="什么是自动填充"></a>什么是自动填充</h2><p>通常在建表时，会设置一些公共字段，例如创建人（creator）、更新人（uptater）、创建时间（create_time）、更新时间（update_time）等等。</p><p>每次将实体对象新增入库时，都要设置创建人和创建时间；每次更新实体对象时，都要设置更新人和更新时间；如果这些都放在业务代码中，很是繁琐，于是就需要配置自动填充来简化工作。</p><h2 id="MetaObjectHandler"><a href="#MetaObjectHandler" class="headerlink" title="MetaObjectHandler"></a>MetaObjectHandler</h2><p><code>MetaObjectHandler</code> 是 MyBatis-Plus 提供的一个接口类，通过实现该接口并重写其中的方法，可以在执行数据库操作（插入和更新）时自动填充某些字段的值。</p><p><code>MetaObjectHandler</code> 中有若干默认方法（已实现）和两个接口方法（需实现），接口方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MetaObject 是 MyBatis 的一个反射工具类，用于操作 Java 对象的属性。它提供了一系列方法来获取、设置、判断和操作 Java 对象的属性，使得在不直接调用 JavaBean 的 getter 和 setter 方法的情况下进行属性操作变得更加方便和灵活。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个基础的自动填充配置示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新增时填充</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime.class, LocalDateTime.now()); <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">            <span class="comment">// 或者</span></span><br><span class="line">            <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改时填充</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now()); <span class="comment">// 起始版本 3.3.0(推荐)</span></span><br><span class="line">            <span class="comment">// 或者</span></span><br><span class="line">            <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想使用 <code>MetaObjectHandler</code>，需要在其实现类上添加 <code>@Component</code> 注解，然后将其注册为 Spring 的一个 Bean，这样 MyBatis Plus 就会自动调用其中定义的方法来进行字段值的填充。</p><p>然后，在实体类上添加注解，告知Mybatis-Plus需要预留注入SQL字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(value = &quot;create_time&quot;,fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure><p>填充策略包括：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FieldFill</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入和更新填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、如果属性有值则不覆盖，如果sql中赋值了，自动填充又设置为其他值，则以sql中的值为准。</p><p>2、如果填充值为null则不填充，比如<code>this.setFieldValByName(“update_time”, null, metaObject);</code>实际是不会更新为null的。</p><p>3、填充处理器（如<code>MyMetaObjectHandler</code>）在 Spring Boot 中需要声明<code>@Component</code>或<code>@Bean</code>注入</p><p>4、最好不要在自定义mapper方法中使用填充，非要使用的话需要使用特定参数注解，如<code>@Param(&quot;et&quot;)</code>等。</p><p>5、<code>update(T t,Wrapper updateWrapper)</code>时<code>t</code>不能为空,否则自动填充失效，如<code>this.update(new User(), new UpdateWrapper&lt;User&gt;().set(&quot;name&quot;, &quot;张三&quot;)));</code>不能省略<code>new User()</code>。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过&lt;code&gt;MetaObjectHandler&lt;/code&gt;接口，配置MyBatis-Plus的自动填充。&lt;/p&gt;
&lt;p&gt;MyBatis-Plus版本：&lt;code&gt;3.4.3.4&lt;/code&gt;&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="MyBatis" scheme="http://silencezheng.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>图卷积(GCN)学习</title>
    <link href="http://silencezheng.top/2023/08/15/article117/"/>
    <id>http://silencezheng.top/2023/08/15/article117/</id>
    <published>2023-08-15T15:11:28.000Z</published>
    <updated>2023-08-15T15:16:44.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图卷积学习记录，同时也涉及离散拉普拉斯算子内容，可能对视觉方向有帮助。</p><p>相关内容：卷积、傅立叶变换、拉普拉斯算子、狄利克雷能量、图卷积<br><span id="more"></span></p><h2 id="传统卷积"><a href="#传统卷积" class="headerlink" title="传统卷积"></a>传统卷积</h2><p>传统的卷积主要应用于Euclidean Structure的数据上（排列很整齐、Grid形式的），如图像、语句等，主要是因为欧式结构数据能够保证卷积的性质，即平移不变性，而Non-Euclidean无法保证平移不变性，通俗理解就是在拓扑图中每个顶点的相邻顶点数目都可能不同，那么当然无法用一个同样尺寸的卷积核来进行卷积运算。</p><h2 id="推广卷积到图"><a href="#推广卷积到图" class="headerlink" title="推广卷积到图"></a>推广卷积到图</h2><p>卷积定理指出，<strong>函数卷积的傅里叶变换是函数傅里叶变换的乘积</strong>。即一个域中的卷积对应于另一个域中的乘积, 例如时域中的卷积对应于频域中的乘积。</p><script type="math/tex; mode=display">\mathcal{F}\{f * g\}=\mathcal{F}\{f\} \cdot \mathcal{F}\{g\}</script><p>其中 $\mathcal{F}(f)$ 表示 $f$ 的傅里叶变换。下面这种形式也成立：</p><script type="math/tex; mode=display">\mathcal{F}\{f \cdot g\}=\mathcal{F}\{f\} * \mathcal{F}\{g\}</script><p>借由傅里叶逆变换 $\mathcal{F}^{-1}$, 也可以写成：</p><script type="math/tex; mode=display">f * g=\mathcal{F}^{-1}\{\mathcal{F}\{f\} \cdot \mathcal{F}\{g\}\}</script><p>注意以上的写法只对特定形式定义的变换正确，变换可能由其它方式正规化，使得上面的关系式中出现其它的常数因子。</p><p>这一定理对拉普拉斯变换、双边拉普拉斯变换、Z变换、梅林变换和Hartley变换等各种傅里叶变换的变体同样成立。</p><p>利用卷积定理可以简化卷积的运算量。对于长度为 $n$ 的序列，按照卷积的定义进行计算，需要做 $2 n-1$ 组对位乘法，其计算复杂度为 $\mathcal{O}\left(n^2\right)$；而利用傅里叶变换将序列变换到频域上后，只需要一组对位乘法，利用傅里叶变换的快速算法之后，总的计算复杂度为 $\mathcal{O}(n \log n)$ 。这一结果可以在快速乘法计算中得到应用。</p><p>傅里叶变换又可以通过<strong>谱图理论</strong>推广到图上进行变换。</p><blockquote><p>谱图理论是图论与线性代数相结合的产物，它通过分析图的某些矩阵的特征值与特征向量而研究图的性质。拉普拉斯矩阵是谱图理论中的核心与基本概念，在机器学习与深度学习中有重要的应用。包括但不仅限于：流形学习数据降维算法中的拉普拉斯特征映射、局部保持投影，无监督学习中的谱聚类算法，半监督学习中基于图的算法，以及目前炙手可热的图神经网络等。还有在图像处理、计算机图形学以及其他工程领域应用广泛的图切割问题。理解拉普拉斯矩阵的定义与性质是掌握这些算法的基础。</p></blockquote><p>所以，Convolution —— Fourier —— Spectral Graph，卷积通过傅里叶变换和图（频谱域）发生了联系。</p><p>从整个的研究进程来看，首先是研究GSP（Graph Signal Processing）的学者提出了Graph上的Fourier Transformation，进而定义了Graph的Convolution，最后与深度学习结合起来，发展出来GCN。</p><h2 id="图傅立叶变换的实施"><a href="#图傅立叶变换的实施" class="headerlink" title="图傅立叶变换的实施"></a>图傅立叶变换的实施</h2><p>关于时域和频域，我在<a href="https://silencezheng.top/2022/10/05/article67/">高斯滤波和双边滤波</a>一文中已有一些介绍。</p><p>此处需要强调的一点是<strong>傅里叶级数是向量</strong>，一般描述向量的时候，都有对应的基，即在某组基下的坐标表示构成了向量。默认是单位基时，则不显式提到。频域下，某个曲线是表示成了关于正弦函数正交基下的傅里叶级数向量。而在时域下，某个曲线是表示成了关于时间的周期函数。不管时域还是频域，其实反映的都是同一个曲线，只是一个是用函数的观点，一个是用向量的观点。</p><p>图上的傅里叶变换是通过下述联系实施的：</p><ol><li>图拉普拉斯算子， Laplacian Operator —- Graph Laplacian Matrix。</li><li>图拉普拉斯的谱分解，Graph Laplacian Matrix —- Spectral Decomposition。</li><li>图上狄利克雷能量最小的基， Dirichlet Energy —- Orthonormal Basis —- Spectral Decomposition —- Eigenvectors</li><li>傅里叶变换，Fourier —- Fourier Basis —- Laplacian eigenfunctions</li></ol><p>根据4，可以证明，Fourier basis = Laplacian eigenfunctions，即傅立叶级数的基(和频率一一对应)是拉普拉斯算子的特征函数 (满足特征方程)。根据1，在图上，拉普拉斯算子为拉普拉斯矩阵。根据2，拉普拉斯矩阵的谱分解得到的特征向量(和特征值一一对应)类比特征函数。因此，<strong>传统傅里叶变换在图的拓展就是将正弦函数基替换换成图拉普拉斯矩阵的特征向量</strong>，正弦函数与频率一一对应，特征向量与特征值一一对应。而根据3，这一替换的根源意义在于，图拉普拉斯矩阵的特征向量作为一组基的话，这组基是图上狄利克雷能量最小的基。</p><blockquote><p>Laplacian Operator（拉普拉斯算子）和Laplacian eigenfunctions（拉普拉斯特征函数）是在图论和图信号处理中密切相关的概念。</p><ol><li><p>Laplacian Operator:<br>在图论中，Laplacian Operator是用来描述图的拓扑结构和节点之间连接关系的算子。对于一个无向图G，Laplacian Operator通常定义为度矩阵（Degree Matrix）D和邻接矩阵（Adjacency Matrix）A之间的差，即L = D - A。其中，度矩阵D是一个对角矩阵，其对角线元素是每个节点的度数（与该节点相连接的边的数量），邻接矩阵A描述了节点之间的连接关系。<br>Laplacian Operator有多种形式，常见的有度标准化Laplacian、随机游走标准化Laplacian等，不同的形式在不同的图信号处理任务中有不同的应用。</p></li><li><p>Laplacian eigenfunctions:<br>Laplacian eigenfunctions是指Laplacian Operator对应的特征函数，也称为拉普拉斯特征向量。Laplacian Operator的特征函数是在图上定义的一组正交函数，它们描述了图的振动模式和频率。</p></li></ol><p>对于图的Laplacian Operator L，它可以进行谱分解，得到一组特征向量（Laplacian eigenfunctions）和对应的特征值（Laplacian eigenvalues）。这些特征向量在图信号处理中具有重要的意义，它们构成了一个基，可以用于将图信号从原始的节点空间转换到频域空间，类似于傅里叶变换中的基函数。</p><p>Laplacian eigenfunctions对应的特征值可以用来表示图的结构和节点之间的连接关系，不同的特征值对应不同的频率，反映了图的振动特性。在图信号处理任务中，Laplacian eigenfunctions常常被用作图嵌入、图卷积神经网络（GCN）等方法的基础，以便有效地学习图的特征和结构。</p></blockquote><h2 id="图拉普拉斯算子"><a href="#图拉普拉斯算子" class="headerlink" title="图拉普拉斯算子"></a>图拉普拉斯算子</h2><p>先讨论常规连续拉普拉斯算子，然后通过<strong>有限差分法</strong>在离散网格上近似计算拉普拉斯算子，对其进行离散化。</p><blockquote><p>有限差分法是将导数或微分算子替换为差分的形式，从而将微分方程转化为差分方程。</p><p>差分方程是一种数学方程，用于描述离散点之间的关系，通常在数值计算和离散模型中使用。与微分方程类似，差分方程是在离散时间或空间上建立函数之间的关系，而不是连续变量的关系。</p></blockquote><p>最后，我们推广到图结构上。</p><h3 id="拉普拉斯算子（Laplacian-Operator）"><a href="#拉普拉斯算子（Laplacian-Operator）" class="headerlink" title="拉普拉斯算子（Laplacian Operator）"></a>拉普拉斯算子（Laplacian Operator）</h3><p>拉普拉斯算子的严格数学定义：多元函数$f(x_1,…,x_n)$的拉普拉斯算子是<strong>所有自变量的非混合二阶偏导数之和</strong>。</p><script type="math/tex; mode=display">\Delta f=\sum_{i=1}^n \frac{\partial^2 f}{\partial x_i^2}</script><p>基于定义，所有的__拉普拉斯算子都是其一个特例，或是某种情况下(比如离散情况下)的一种近似。很多时候我们之只能近似计算导数值，称为<strong>数值微分</strong>。</p><blockquote><p>数值微分是一种通过数值计算来近似计算函数的导数的方法。它在数值分析和科学计算中经常用于解决无法通过解析方法求得导数的问题，或者用于验证解析导数的结果。</p><p>数值微分的基本思想是利用函数在某一点附近的函数值来近似计算该点的导数。常见的数值微分方法包括：</p><ol><li><p><strong>中心差分法：</strong> 中心差分法使用函数在当前点的前后两个邻近点的函数值来近似计算导数。它的计算公式如下：</p><script type="math/tex; mode=display">f'(x) \approx \frac{f(x+h) - f(x-h)}{2h}</script><p>这里，$h$ 是一个小的正数，代表点的间隔。</p></li><li><p><strong>前向差分法：</strong> 前向差分法使用函数在当前点和该点之后的一个邻近点的函数值来近似计算导数。它的计算公式如下：</p><script type="math/tex; mode=display">f'(x) \approx \frac{f(x+h) - f(x)}{h}</script></li><li><p><strong>后向差分法：</strong> 后向差分法使用函数在当前点和该点之前的一个邻近点的函数值来近似计算导数。它的计算公式如下：</p><script type="math/tex; mode=display">f'(x) \approx \frac{f(x) - f(x-h)}{h}</script></li></ol><p>数值微分方法的精度取决于间隔$h$的大小，过大的$h$可能引入较大的近似误差，而过小的$h$可能引入舍入误差。选择合适的$h$值是确保数值微分结果精度的关键。</p></blockquote><p>对于二阶导数，则有：</p><script type="math/tex; mode=display">\begin{aligned}f^{\prime \prime}(x) & \approx \frac{f^{\prime}(x)-f^{\prime}(x-\Delta x)}{\Delta x} \approx \frac{\frac{f(x+\Delta x)-f(x)}{\Delta x}-\frac{f(x)-f(x-\Delta x)}{\Delta x}}{\Delta x} \\& =\frac{f(x+\Delta x)+f(x-\Delta x)-2 f(x)}{(\Delta x)^2}\end{aligned}</script><p>下面考虑多元函数的偏导数。对于二元函数$f(x,y)$，其拉普拉斯算子可以用下面的公式近似计算：</p><script type="math/tex; mode=display">\begin{aligned}\Delta f & =\frac{\partial^2 f}{\partial x^2}+\frac{\partial^2 f}{\partial y^2} \\& \approx \frac{f(x+\Delta x, y)+f(x-\Delta x, y)-2 f(x, y)}{(\Delta x)^2}+\frac{f(x, y+\Delta y)+f(x, y-\Delta y)-2 f(x, y)}{(\Delta y)^2}\end{aligned}</script><h3 id="离散拉普拉斯算子"><a href="#离散拉普拉斯算子" class="headerlink" title="离散拉普拉斯算子"></a>离散拉普拉斯算子</h3><p>图像和图结构都是离散数据，其拉普拉斯算子必然要进行离散化。如果上面的二元函数进行离散化，对自变量的一系列点处的函数值进行采样，得到下面一系列点处的函数值，构成一个矩阵。</p><script type="math/tex; mode=display">\left[\begin{array}{cccc}f\left(x_1, y_1\right) & f\left(x_2, y_1\right) & \ldots & f\left(x_n, y_1\right) \\f\left(x_1, y_2\right) & f\left(x_2, y_2\right) & \ldots & f\left(x_n, y_2\right) \\\ldots & \ldots & \ldots & \ldots \\f\left(x_1, y_n\right) & f\left(x_2, y_n\right) & \ldots & f\left(x_n, y_n\right)\end{array}\right]</script><p>在这里 $x$ 为水平方向， $y$ 为垂直方向。为了简化， 假设 $x$ 和 $y$ 的增量（步长）全为 $1$ ， 即：</p><script type="math/tex; mode=display">\Delta x=x_{i+1}-x_i=1, \Delta y=y_{i+1}-y_i=1</script><p>则点 $\left(x_i, y_j\right)$ 处的拉普拉斯算子可以用下面的公式近似计算：</p><script type="math/tex; mode=display">\begin{aligned}& \frac{f\left(x_i+\Delta x, y_j\right)+f\left(x_i-\Delta x, y_j\right)-2 f\left(x_i, y_j\right)}{(\Delta x)^2}+\frac{f\left(x_i, y_j+\Delta y\right)+f\left(x_i, y_j-\Delta y\right)-2 f\left(x_i, y_j\right)}{(\Delta y)^2} \\& \quad=\frac{f\left(x_{i+1}, y_j\right)+f\left(x_{i-1}, y_j\right)-2 f\left(x_i, y_j\right)}{1^2}+\frac{f\left(x_i, y_{j+1}\right)+f\left(x_i, y_{j-1}\right)-2 f\left(x_i, y_j\right)}{1^2} \\& \quad=f\left(x_{i+1}, y_j\right)+f\left(x_{i-1}, y_j\right)+f\left(x_i, y_{j+1}\right)+f\left(x_i, y_{j-1}\right)-4 f\left(x_i, y_j\right)\end{aligned}</script><p>这是一个非常优美的结果， 它就是 $\left(x_i, y_j\right)$ 的 4 个相邻点处的函数值之和与 $\left(x_i, y_j\right)$ 点处的函数值乘以 4 后的差值。如下图所示：</p><p><img src="/assets/post_img/article117/lisan-lapo.png" alt="lisan"></p><p>基于这种离散表示，拉普拉斯算子的计算公式可以写成如下形式：</p><script type="math/tex; mode=display">\begin{aligned}\Delta f & =f\left(x_{i+1}, y_j\right)+f\left(x_{i-1}, y_j\right)+f\left(x_i, y_{j+1}\right)+f\left(x_i, y_{j-1}\right)-4 f\left(x_i, y_j\right) \\& =f\left(x_{i+1}, y_j\right)-f\left(x_i, y_j\right)+f\left(x_{i-1}, y_j\right)-f\left(x_i, y_j\right) \\& +f\left(x_i, y_{j+1}\right)-f\left(x_i, y_j\right)+f\left(x_i, y_{j-1}\right)-f\left(x_i, y_j\right) \\& =\sum_{(k, l) \in N(i, j)}\left(f\left(x_k, y_l\right)-f\left(x_i, y_j\right)\right)\end{aligned}</script><p>其中 $N(i, j)$ 是 $\left(x_i, y_j\right)$ 邻居节点的集合。</p><p>这也给我们一种形象的结论：二维网格（离散二元函数）上计算某点的拉普拉斯算子就是计算上下左右四个自由度上的“变化和”。</p><p>PS：变化和是笔者的个人理解，也有人说是“微小变化后获得的增益”。另外，对于二维网格，也可以拓展出八个自由度的拉普拉斯算子。</p><h3 id="图上的拉普拉斯算子"><a href="#图上的拉普拉斯算子" class="headerlink" title="图上的拉普拉斯算子"></a>图上的拉普拉斯算子</h3><p>在图中，顶点的连接关系是任意的，这意味着顶点的邻居节点数量不固定。将拉普拉斯算子推广到图上，如果将图的顶点处的值看作是函数值，则在顶点$i$处的拉普拉斯算子为：</p><script type="math/tex; mode=display">\Delta f_i=\sum_{j \in N_i}\left(f_i-f_j\right)</script><p>其中 $N_i$ 是顶点 $i$ 的所有邻居顶点的集合。这里我们调换了 $f_i$ 和 $f_j$ 的位置， 和之前的拉普拉斯算子相比， 相当于多了一个负号。由于图的边可以带有权重， 我们可以在上面的计算公式中加上权重：</p><script type="math/tex; mode=display">\Delta f_i=\sum_{j \in N_i} w_{i j}\left(f_i-f_j\right)</script><p>如果 $j$ 不是 $i$ 的邻居, 则 $w_{i j}=0$ 。因此上面的式子也可以写成如下形式：</p><script type="math/tex; mode=display">\Delta f_i=\sum_{j \in V} w_{i j}\left(f_i-f_j\right)=\sum_{j \in V} w_{i j} f_i-\sum_{j \in V} w_{i j} f_j=d_i f_i-\mathbf{w}_i \mathbf{f}</script><p>这里的 $d_i$ 是顶点 $i$ 的加权度，$w_i$ 是邻接矩阵的第 $i$ 行, $f$ 是所有顶点的值构成的列向量, $w_i f$ 是二者的内积。对于图的所有顶点, 有</p><script type="math/tex; mode=display">\begin{aligned}\Delta f & =\left[\begin{array}{c}\Delta f_1 \\\ldots \\\Delta f_n\end{array}\right]=\left[\begin{array}{c}d_1 f_1-\mathbf{w}_1 \mathbf{f} \\\ldots \\d_n f_n-\mathbf{w}_n \mathbf{f}\end{array}\right]=\left[\begin{array}{ccc}d_1 & \ldots & \ldots \\\ldots & \ldots & \ldots \\\ldots & \ldots & d_n\end{array}\right]\left[\begin{array}{c}f_1 \\\ldots \\f_n\end{array}\right]-\left[\begin{array}{c}\mathbf{w}_1 \\\ldots \\\mathbf{w}_n\end{array}\right]\left[\begin{array}{c}f_1 \\\ldots \\f_n\end{array}\right] \\& =(\mathbf{D}-\mathbf{A}) \mathbf{f}\end{aligned}</script><p>上式的全称是：图拉普拉斯算子作用在由图节点信息构成的向量$f$上得到的结果等于<strong>图拉普拉斯矩阵</strong>和向量$f$的点积。</p><p>这也说明，<strong>在图上，拉普拉斯算子等于拉普拉斯矩阵</strong>。</p><h3 id="图拉普拉斯矩阵（Laplacian-Matrix）"><a href="#图拉普拉斯矩阵（Laplacian-Matrix）" class="headerlink" title="图拉普拉斯矩阵（Laplacian Matrix）"></a>图拉普拉斯矩阵（Laplacian Matrix）</h3><p>由此，我们推出了无向图上定义拉普拉斯矩阵的一种方式：</p><script type="math/tex; mode=display">L = D - A</script><p>其中，$L$是图拉普拉斯矩阵，$D$是加权度矩阵（Weighted Degree Matrix），$A$是邻接矩阵（Adjacency Matrix）。</p><p>由于$D$ 和 $A$都是对称矩阵，则无向图的拉普拉斯矩阵也是对称矩阵，它实际上代表了图的二阶导数。</p><p>显然无向图拉普拉斯矩阵每一行元素之和都为 0 。下面介绍拉普拉斯矩阵的若干重要性质（省略证明）：</p><p>1、对任意向量 $\mathbf{f} \in \mathbb{R}^n$ 有：</p><script type="math/tex; mode=display">\mathbf{f}^{\mathrm{T}} \mathbf{L} \mathbf{f}=\frac{1}{2} \sum_{i=1}^n \sum_{j=1}^n w_{i j}\left(f_i-f_j\right)^2</script><p>2、拉普拉斯矩阵是对称半正定矩阵;</p><p>3、拉普拉斯矩阵的最小特征值为 0 ，其对应的特征向量为常向量 1 ，即所有分量为 1 ;</p><p>4、拉普拉斯矩阵有 $n$ 个非负实数特征值，并且满足：</p><script type="math/tex; mode=display">0=\lambda_1 \leq \lambda_2 \leq \ldots \leq \lambda_n</script><p>5（结论）、假设 $G$ 是一个有非负权重的无向图，其拉普拉斯矩阵 $L$ 的特征值0的重数 $k$ 等于图的联通分量的个数$A_1， \ldots, A_k$。特征值0的特征空间由这些联通分量所对应的特征向量$\mathbf{1}_{A_1}， \ldots, \mathbf{1}_{A_k}$所张成。</p><p>对于结论5，举一个例子进行说明：</p><p><img src="/assets/post_img/article117/jl5.png" alt="jl5"></p><p>上图有两个联通子图，其邻接矩阵为：</p><script type="math/tex; mode=display">\mathbf{A}=\left[\begin{array}{ccccc}0 & 0.37 & 0.37 & 0 & 0 \\0.37 & 0 & 0.14 & 0 & 0 \\0.37 & 0.14 & 0 & 0 & 0 \\0 & 0 & 0 & 0 & 0.37 \\0 & 0 & 0 & 0.37 & 0\end{array}\right]</script><p>其加权度矩阵为：</p><script type="math/tex; mode=display">\mathbf{D}=\left[\begin{array}{ccccc}0.74 & 0 & 0 & 0 & 0 \\0 & 0.51 & 0 & 0 & 0 \\0 & 0 & 0.51 & 0 & 0 \\0 & 0 & 0 & 0.37 & 0 \\0 & 0 & 0 & 0 & 0.37\end{array}\right]</script><p>拉普拉斯矩阵为：</p><script type="math/tex; mode=display">\mathbf{L}=\mathbf{D}-\mathbf{A}=\left[\begin{array}{ccccc}0.74 & -0.37 & -0.37 & 0 & 0 \\-0.37 & 0.51 & -0.14 & 0 & 0 \\-0.37 & -0.14 & 0.51 & 0 & 0 \\0 & 0 & 0 & 0.37 & -0.37 \\0 & 0 & 0 & -0.37 & 0.37\end{array}\right]</script><p>它由如下两个子矩阵构成：</p><script type="math/tex; mode=display">\begin{aligned}& \mathbf{L}_1=\left[\begin{array}{ccc}0.74 & -0.37 & -0.37 \\-0.37 & 0.51 & -0.14 \\-0.37 & -0.14 & 0.51\end{array}\right] \\& \mathbf{L}_2=\left[\begin{array}{cc}0.37 & -0.37 \\-0.37 & 0.37\end{array}\right]\end{aligned}</script><p>每个子矩阵对应于图的一个联通分量。0 是每个子矩阵的 1 重特征值，由于有两个联通分量，因此 0 是整个图的拉普拉斯矩阵的 2 重特征值。两个线性无关的特征向量为：</p><script type="math/tex; mode=display">\begin{aligned}& \mathbf{1}_{A_1}=\left[\begin{array}{lllll}1 & 1 & 1 & 0 & 0\end{array}\right]^{\mathrm{T}} \\& \mathbf{1}_{A_2}=\left[\begin{array}{lllll}0 & 0 & 0 & 1 & 1\end{array}\right]^{\mathrm{T}}\end{aligned}</script><h3 id="归一化拉普拉斯矩阵（Normalized-Laplacian-Matrix）"><a href="#归一化拉普拉斯矩阵（Normalized-Laplacian-Matrix）" class="headerlink" title="归一化拉普拉斯矩阵（Normalized Laplacian Matrix）"></a>归一化拉普拉斯矩阵（Normalized Laplacian Matrix）</h3><p>图拉普拉斯矩阵有两种形式的归一化。</p><p>第一种称为<strong>对称归一化</strong>，定义为：</p><script type="math/tex; mode=display">\mathbf{L}_{\text {sym }}=\mathbf{D}^{-1 / 2} \mathbf{L D}^{-1 / 2}=\mathbf{I}-\mathbf{D}^{-1 / 2} \mathbf{A} \mathbf{D}^{-1 / 2}</script><p>这里 $D^{1 / 2}$ 是 $D$ 的所有元素计算正平方根得到的矩阵。位置为 $(i . j), i \neq j$ 的元素为将未归一化拉普拉斯矩阵对应位置处的元素 $l_{i j}$ 除以 $\sqrt{d_{i i} d_{j j}}$ 后形成的，主对角线上的元素为 1 ：</p><script type="math/tex; mode=display">\begin{aligned}\mathbf{L}_{\mathrm{sym}} & =\left[\begin{array}{cccc}1 / \sqrt{d_{11}} & 0 & \ldots & 0 \\0 & 1 / \sqrt{d_{22}} & \ldots & 0 \\\ldots & \ldots & \ldots & \ldots \\0 & 0 & \ldots & 1 / \sqrt{d_{n n}}\end{array}\right]\left[\begin{array}{cccc}l_{11} & l_{12} & \ldots & l_{1 n} \\l_{21} & l_{22} & \ldots & l_{2 n} \\\ldots & \ldots & \ldots & \ldots \\l_{n 1} & l_{n 2} & \ldots & l_{n n}\end{array}\right]\left[\begin{array}{cccc}1 / \sqrt{d_{11}} & 0 & \ldots & 0 \\0 & 1 / \sqrt{d_{22}} & \ldots & 0 \\\ldots & \ldots & \ldots & \ldots \\0 & 0 & \ldots & 1 / \sqrt{d_{n n}}\end{array}\right] \\& =\left[\begin{array}{cccc}1 & l_{12} / \sqrt{d_{11} d_{22}} & \ldots & l_{1 n} / \sqrt{d_{11} d_{n n}} \\l_{21} / \sqrt{d_{22} d_{11}} & 1 & \ldots & l_{2 n} / \sqrt{d_{22} d_{n n}} \\\ldots & \ldots & \ldots & \ldots \\l_{n 1} / \sqrt{d_{n n} d_{11}} & l_{n 2} / \sqrt{d_{n n} d_{22}} & \ldots & 1\end{array}\right]\end{aligned}</script><p>由于 $D^{1 / 2}$ 和 $L$ 都是对称矩阵, 因此 $L_{sym}$ 也是对称矩阵。如果图是联通的，则 $D$ 和 $D^{1 / 2}$ 都是可逆的对角矩阵，其逆矩阵分别为其主对角线元素的逆。</p><p>第二种称为<strong>随机漫步归一化</strong>，定义为：</p><script type="math/tex; mode=display">\mathbf{L}_{\mathrm{rw}}=\mathbf{D}^{-1} \mathbf{L}=\mathbf{I}-\mathbf{D}^{-1} \mathbf{A}</script><p>其位置为 $(i, j), i \neq j$ 的元素为将未归一化拉普拉斯矩阵对应位置处的元素 $l_{i j}$ 除以 $d_{i i}$ 后形成的，主对角线元素也为 1：</p><script type="math/tex; mode=display">\begin{aligned}\mathbf{L}_{\mathrm{rw}} & =\left[\begin{array}{cccc}1 / d_{11} & 0 & \ldots & 0 \\0 & 1 / d_{22} & \ldots & 0 \\\ldots & \ldots & \ldots & \ldots \\0 & 0 & \ldots & 1 / d_{n n}\end{array}\right]\left[\begin{array}{cccc}l_{11} & l_{12} & \ldots & l_{1 n} \\l_{21} & l_{22} & \ldots & l_{2 n} \\\ldots & \ldots & \ldots & \ldots \\l_{n 1} & l_{n 2} & \ldots & l_{n n}\end{array}\right] \\& =\left[\begin{array}{cccc}1 & l_{12} / d_{11} & \ldots & l_{1 n} / d_{11} \\l_{21} / d_{22} & 1 & \ldots & l_{2 n} / d_{22} \\\ldots & \ldots & \ldots & \ldots \\l_{n 1} / d_{n n} & l_{n 2} / d_{n n} & \ldots & 1\end{array}\right]\end{aligned}</script><p>下面介绍这两种归一化矩阵的若干重要性质：</p><p>1、对任意向量 $\mathbf{f} \in \mathbb{R}^n$ 有：</p><script type="math/tex; mode=display">\mathbf{f}^{\mathrm{T}} \mathbf{L}_{\mathrm{sym}} \mathbf{f}=\frac{1}{2} \sum_{i=1}^n \sum_{j=1}^n w_{i j}\left(\frac{f_i}{\sqrt{d_i}}-\frac{f_j}{\sqrt{d_j}}\right)^2</script><p>2、$\lambda$ 是矩阵 $L_{rw}$ 的特征值，$\mu$ 是特征向量, 当且仅当 $\lambda$ 是 $L_{sym}$ 的特征值且其特征向量为 $w=D^{1 / 2} \mu$。</p><p>3、$\mu$ 是矩阵 $L_{rw}$ 的特征值，$\mu$ 是对应的特征向量，当且仅当 $\lambda$ 和 $\mu$ 是广义特征值问题 $L u=\lambda D u$ 的解。</p><p>4、0 是矩阵 $L_{rw}$ 的特征值，其对应的特征向量为常向量 1 ，即所有分量为 1。 0 是矩阵 $L_{sym}$ 的特征值，其对应的特征向量为 $D^{1 / 2} 1$ 。</p><p>5、矩阵 $L_{sym}$ 和 $L_{rw}$ 是半正定矩阵，有 $n$ 个非负实数特征值, 并且满足：</p><script type="math/tex; mode=display">0=\lambda_1 \leq \lambda_2 \leq \ldots \leq \lambda_n</script><p>6（结论）、和未归一化的拉普拉斯矩阵类似，假设 $G$ 是一个有非负权重的无向图，其归一化拉普拉斯矩阵 $L_{rw}$ 和 $L_{sym}$ 的特征值0的重数 $k$ 等于图的联通分量的个数 $A_1, \ldots, A_k$ 。</p><p>对于矩阵 $L_{rw}$，特征值0的特征空间由这些联通分量所对应的向量 $1_{A_1}, \ldots, 1_{A_k}$ 所张成。 $1_{A_i}$ 的定义与未归一化拉普拉斯矩阵0特征值的特征向量相同。</p><p>对于矩阵 $L_{sym}$, 特征值O的特征空间由这些联通分量所对应的向量 $\mathbf{D}^{1 / 2} \mathbf{1}_{A_1}, \ldots, \mathbf{D}^{1 / 2} \mathbf{1}_{A_k}$ 所张成。</p><h2 id="拉普拉斯矩阵的谱分解（Spectral-Decomposition）"><a href="#拉普拉斯矩阵的谱分解（Spectral-Decomposition）" class="headerlink" title="拉普拉斯矩阵的谱分解（Spectral Decomposition）"></a>拉普拉斯矩阵的谱分解（Spectral Decomposition）</h2><p>在矩阵范围内，不考虑过于复杂的数学概念，谱分解又称为特征值分解，只有方阵才能进行谱分解。</p><blockquote><p><strong>特征向量（Eigenvectors）</strong>：一个矩阵的特征向量是指一个非零向量，其在经过矩阵变换后只发生了伸缩而没有改变方向，只相差了一个常数倍数。换句话说，矩阵乘以特征向量后，相当于对该向量进行了一个比例的拉伸。</p><p><strong>特征值（Eigenvalues）</strong>：特征值是对应于特征向量的标量，它表示了在特征向量进行矩阵变换后的伸缩倍数。一个矩阵可以有多个特征向量和对应的特征值。</p></blockquote><p>对于一个方阵 $A$，谱分解的基本思想是将它表示为特征向量矩阵 $P$ 与对角特征值矩阵 $Λ$ 相乘的形式，即 $A = P <em> Λ </em> P^{-1} $。如果 $A$ 是对称矩阵，则 $P$ 是正交矩阵，则原式也可写作 $A = P <em> Λ </em> P^T$。</p><p>由于拉普拉斯矩阵是<strong>对称半正定</strong>的，我们可以得到以下性质：<br>1、一定有$n$个线性无关的特征向量（对称）。<br>2、矩阵的特征值一定非负（半正定）。<br>3、矩阵的特征向量相互正交，即所有特征向量构成的矩阵为正交矩阵（对称）。</p><p>所以，拉普拉斯矩阵 $L$ 的谱分解也可以写成 $P <em> Λ </em> P^T$ 的形式，如下所示：</p><script type="math/tex; mode=display">\boldsymbol{L}=\boldsymbol{\Phi} \boldsymbol{\Lambda} \boldsymbol{\Phi}^{\top}</script><p>$\Phi=\left(\phi_1, \phi_2, \ldots, \phi_n\right) \in \mathbb{R}^{\mathrm{n} \times n}$ 是正交矩阵，其列向量为单位特征向量。<br>$\Lambda=\operatorname{diag}\left(\lambda_1, \ldots, \lambda_n\right)$ 是由对应特征值构成的对角矩阵。</p><h2 id="狄利克雷能量（Dirichlet-Energy）"><a href="#狄利克雷能量（Dirichlet-Energy）" class="headerlink" title="狄利克雷能量（Dirichlet Energy）"></a>狄利克雷能量（Dirichlet Energy）</h2><p>狄利克雷能量衡量了函数的平滑性（Smoothness），越小说明函数越平滑。狄利克雷能量定义为:</p><script type="math/tex; mode=display">\mathrm{E}_{\mathrm{Dir}}(\boldsymbol{f})=\boldsymbol{f}^{\top} \boldsymbol{\Delta} \boldsymbol{f}</script><p>其中$f$ 是函数，$\Delta$ 是拉普拉斯算子。整个公式在图结构上的含义是，计算函数$\boldsymbol{f}$在图的节点上的变化程度，其中变化程度通过将函数$\boldsymbol{f}$映射到拉普拉斯矩阵的空间（$\boldsymbol{\Delta} \boldsymbol{f}$），并计算映射后的向量与原向量的内积来衡量。</p><p>在图论中，狄利克雷能量越小表示图中节点的函数在空间中变化越平滑，节点之间的连接或关系越紧密。这可以用于量化图中的平滑性和连通性。</p><p>那么，<strong>狄利克雷能量最小化问题对推广图傅立叶变换有什么帮助呢</strong>？</p><p>图傅立叶变换是将一个定义在图的节点上的函数映射到频谱域，类似于信号处理中的傅立叶变换。在连续信号的情况下，傅立叶变换将信号分解为不同频率的正弦和余弦函数。类似地，在图上，图傅立叶变换将一个函数分解为图中的基函数，<strong>这些基函数由狄利克雷能量最小化问题得到</strong>。</p><p>我们的目标是寻找图上狄利克雷能量最小的一组单位正交基（每个基都可以看成函数）。 巧合的是，这样的正交基正好就是对拉普拉斯矩阵 $L$ 进行谱分解得到的单位特征向量 $\phi_1, \ldots, \phi_n$ 。 这对我们从传统傅里叶变换推广到图上傅里叶变换时进行的类比和替换提供了理论解释。</p><h2 id="图傅立叶变换（Graph-Fourier-Transformation）"><a href="#图傅立叶变换（Graph-Fourier-Transformation）" class="headerlink" title="图傅立叶变换（Graph Fourier Transformation）"></a>图傅立叶变换（Graph Fourier Transformation）</h2><p>简单回顾傅立叶变换，然后推广到图。</p><h3 id="傅立叶变换（Fourier-Transformation）"><a href="#傅立叶变换（Fourier-Transformation）" class="headerlink" title="傅立叶变换（Fourier Transformation）"></a>傅立叶变换（Fourier Transformation）</h3><p>傅里叶变换于将一个函数从时间（或空间）域转换到频率域，以便分析其频率特性。傅里叶变换可以将一个信号分解成不同频率的成分，从而揭示出信号的频谱信息。</p><p>傅里叶变换的公式如下：</p><p>对于连续信号：</p><script type="math/tex; mode=display">F(\omega) = \int_{-\infty}^{\infty} f(t) e^{-j\omega t} dt</script><p>对于离散信号：</p><script type="math/tex; mode=display">F(k) = \sum_{n=0}^{N-1} f(n) e^{-j\frac{2\pi}{N}kn}</script><p>其中，$ F(\omega) $ 或 $ F(k)$ 是信号在频率域的表示，$ f(t) $ 或 $ f(n) $ 是信号在时间（或空间）域的表示，$ \omega $ 是角频率，$ j $ 是虚数单位， $ t $ 或 $ n $ 是时间（或空间）的变量。</p><p>$F(\omega)$ 就是傅里叶变换，得到的就是频域图，它在 $\omega_0$ 的值 $F(\omega_0)$ 表示 $f(x)$ 在 $\omega_0$ 频率对应的正交基上的系数。</p><p>下面两者称为傅里叶变换对, 可以相互转换:</p><script type="math/tex; mode=display">f(x) \Leftrightarrow F(\omega)</script><p>另外，$e^{-j\omega t}$ 是傅立叶基函数之一，也被称为<strong>复指数函数</strong>。傅立叶变换可以将一个函数从时域转换到频域，它将一个函数表示为不同频率的正弦和余弦函数的叠加。$e^{-j\omega t}$ 就是这些正弦和余弦函数的复数形式，参照$e^{jx} = \cos(x) + j \sin(x)$。</p><h3 id="傅立叶基函数（Fourier-Basis-Functions）"><a href="#傅立叶基函数（Fourier-Basis-Functions）" class="headerlink" title="傅立叶基函数（Fourier Basis Functions）"></a>傅立叶基函数（Fourier Basis Functions）</h3><p>傅立叶基函数（Fourier Basis Functions）是一组正交函数，用于展开和表示信号在频率域的成分。在傅立叶变换中，原始信号可以被分解为各种频率的正弦和余弦函数的线性组合，而这些正弦和余弦函数就构成了傅立叶基函数。</p><p>傅立叶基函数的具体形式取决于是连续信号还是离散信号。对于连续信号，傅立叶基函数是正弦和余弦函数，表达式如下：</p><script type="math/tex; mode=display">\phi_k(t) = \frac{1}{\sqrt{T}} \cdot \begin{cases} \cos(2\pi kft), & \text{for even}\ k \\ \sin(2\pi kft), & \text{for odd}\ k \end{cases}</script><p>其中，$k$ 为频率索引，$f$ 为信号的基本频率，$T$ 为信号的周期。</p><p>对于离散信号，傅立叶基函数是复指数函数，表达式如下：</p><script type="math/tex; mode=display">\phi_k[n] = \frac{1}{\sqrt{N}} \cdot e^{j2\pi kn/N}</script><p>其中，$k$ 为频率索引，$N$ 为信号的样本点数。</p><p>傅立叶基函数构成了频率域的正交基，意味着不同频率的基函数之间彼此正交。通过将信号在傅立叶基函数上的投影，我们可以得到信号在不同频率上的分量，从而实现频域分析。</p><p>傅立叶基函数是傅立叶变换的核心概念，它们的线性组合可以用来表示任何信号。</p><h3 id="图傅立叶变换"><a href="#图傅立叶变换" class="headerlink" title="图傅立叶变换"></a>图傅立叶变换</h3><p>首先，在图上，拉普拉斯算子等于拉普拉斯矩阵。复指数函数$e^{-j\omega t}$，即傅立叶变换的基函数，可以被证明是图上拉普拉斯算子的一个特征函数。</p><script type="math/tex; mode=display">\Delta e^{-j\omega t}=\frac{\partial^2 e^{-j\omega t}}{\partial t^2}=-\omega^2 e^{-j\omega t}</script><p>在图上作类比，令变量为 $x$，令频率为 $\mathrm{k}$ （注意与角频率的区别）， $\phi_{\mathrm{k}}$ 为图拉普拉斯算子 $L$ 的特征向量（满足 $L \phi_k=\lambda_k \phi_k$ ）。即在图中 $\Delta=\boldsymbol{L}, \mathrm{e}^{-\mathrm{jkx}}=\phi_k$ ，而 $\mathrm{k}$ 和特征值 $\lambda_{\mathrm{k}}$ 有关。</p><p>因此，为了在图上进行傅里叶变换，可以把传统傅里叶变换中的 $\mathrm{e}^{-\mathrm{jk} x}$ 换成 $\phi_k$ ，把频率 $\mathrm{k}$ 换为 特征值 $\lambda_{\mathrm{k}}$。</p><p>则图傅里叶变换写作:</p><script type="math/tex; mode=display">F\left(\lambda_k\right)=\hat{f_k}=\left\langle f, \phi_k\right\rangle</script><p>$f=\left(f_1, \ldots, f_n\right)$ 是由节点信息构成的n维向量。做个类似的解释，即特征值 $\lambda_k$ 下，$f$ 的 图傅里叶变换（振幅）等于 $f$ 与 $\lambda_k$ 对应的特征向量 $\phi_k$ 的内积。</p><p>推广到矩阵形式，图傅里叶变换:</p><script type="math/tex; mode=display">\hat{f} = \boldsymbol{\Phi}^{\top} f</script><p>其中, $\hat{f}=\left(\hat{f_1} , \hat{f_2}, \ldots, \hat{f_n}\right)$，即图傅里叶变换，即不同特征值(频率)下对应的振幅构成的向量。 $f=\left(f_1, \ldots, f_n\right)$ 是由节点信息构成的n维向量。</p><p>类似的，传统逆傅里叶变换（n个正弦波的叠加）：</p><script type="math/tex; mode=display">{ }^{-1}[F(k)]=f(x)=\sum_k F(k) e^{i k x}=\sum_k \frac{1}{2 \pi} \int_{-\infty}^{\infty} f\left(x^{\prime}\right) e^{-i k x^{\prime}} d x^{\prime} e^{i k x}</script><p>迁移到图上，$\mathrm{e}^{ikx} \mathrm{e}^{-ikx}=1$，两个基正交，类比于 $\left(\phi_{\mathrm{k}}^{\top} \phi_{\mathrm{k}}\right)_{\mathrm{i}}=1$，则图逆傅里叶变换：</p><script type="math/tex; mode=display">\mathrm{f}_{\mathrm{i}}=\sum_{\mathrm{k}=1}^{\mathrm{n}} \hat{\mathrm{f}_{\mathrm{k}}}\left(\boldsymbol{\phi}_k^{\top}\right)_{\mathrm{i}}</script><p>推广到矩阵形式，图逆傅立叶变换：</p><script type="math/tex; mode=display">f = \boldsymbol{\Phi} \hat{f}</script><h2 id="图卷积（Graph-Convolution）"><a href="#图卷积（Graph-Convolution）" class="headerlink" title="图卷积（Graph Convolution）"></a>图卷积（Graph Convolution）</h2><p>结合图傅立叶变换和卷积定理的结论，我们可以推导出图卷积，首先有：</p><script type="math/tex; mode=display">\begin{align}    f * g=\mathcal{F}^{-1}\{\mathcal{F}\{f\} \cdot \mathcal{F}\{g\}\} \\    \\    \hat{f} = \boldsymbol{\Phi}^{\top} f \\    \\    f = \boldsymbol{\Phi} \hat{f}\end{align}</script><p>下面令图为 $f$，卷积核为 $h$，则图卷积为 $f * h$，有：</p><script type="math/tex; mode=display">\begin{align}f * h = \mathcal{F}^{-1}\{\mathcal{F}\{f\} \cdot \mathcal{F}\{h\}\} \\= \mathcal{F}^{-1}\{\boldsymbol{\Phi}^{\top} f \odot \boldsymbol{\Phi}^{\top} h\} \\ = \boldsymbol{\Phi}\boldsymbol{\Phi}^{\top} f \odot \boldsymbol{\Phi}^{\top} h \\= \boldsymbol{\Phi}\boldsymbol{\Phi}^{\top} h \odot \boldsymbol{\Phi}^{\top} f \\= \boldsymbol{\Phi}\hat{h} \odot \boldsymbol{\Phi}^{\top} f \\= \boldsymbol{\Phi} \operatorname{diag}\left[\hat{h}\left(\lambda_1\right), \ldots, \hat{h}\left(\lambda_n\right)\right] \boldsymbol{\Phi}^T \boldsymbol{f}\end{align}</script><p>上式是我按自己的理解推导得来，如有错误，请联系我的邮箱赐教🙏，感谢。</p><p>对于卷积核的图傅里叶变换: $\hat{h}=\left(\hat{h}_1, \ldots, \hat{h}_n\right)$, 其中 $\hat{h}_k=\left\langle h, \phi_k\right\rangle, k=1,2 \ldots, n$。</p><p>对于把 $\hat{h}$ 组织成对角矩阵 $\operatorname{diag}\left[\hat{h}\left(\lambda_k\right)\right] \in \mathbb{R}^{N \times N}$，个人理解，并不是在改变向量的形状，而是在改变操作方式（转变成矩阵乘法），以更好地表达图卷积的运算。</p><p>深度学习中的卷积就是要设计可学习的卷积核，从公式可以看出，就是要设计 $\operatorname{diag}\left[\hat{h}\left(\lambda_1\right), \ldots, \hat{h}\left(\lambda_n\right)\right]$, 由此, 可以直接将其变为卷积核 $\operatorname{diag}\left[\theta_1, \ldots, \theta_n\right]$，而不需要再将卷积核进行傅里叶变换，相当于直接对变换后的参量进行学习，可以把它理解成可训练权重向量。</p><p>PS：本人还有一个问题没搞懂，是否图和卷积核要分别计算 $\boldsymbol{\Phi}$ ？</p><h3 id="一代GCN"><a href="#一代GCN" class="headerlink" title="一代GCN"></a>一代GCN</h3><p>论文：<a href="https://arxiv.org/abs/1312.6203">Spectral Networks and Locally Connected Networks on Graphs</a></p><p>由上述图卷积可以得到第一代GCN：</p><script type="math/tex; mode=display">\boldsymbol{y}_{\text {output }}=\sigma\left(\boldsymbol{\Phi} \boldsymbol{g}_\theta \boldsymbol{\Phi}^T \boldsymbol{x}\right)=\sigma\left(\boldsymbol{\Phi} \operatorname{diag}\left[\theta_1, \ldots, \theta_n\right] \boldsymbol{\Phi}^T \boldsymbol{x}\right)</script><p>其中，$\boldsymbol{g}_{\boldsymbol{\theta}}=\text{diag}[\theta_1,…,\theta_n]$ 为卷积核，$\sigma$ 是激活函数，$\boldsymbol{x}$ 就是图上对应每个节点的特征构成的向量，$x=\left(x_1, x_2, \ldots, x_n\right)$，这里暂时对每个节点都使用标量，相当于通道数为 1 ，然后经过激活之后，得到输出 $\boldsymbol{y}_{\text {output, }}$ 之后传入下一层。</p><p>缺点：</p><ul><li>需要对拉普拉斯矩阵进行谱分解来求 $\boldsymbol{\Phi}$，在图很大的时候复杂度很高。 另外，还需要计算矩阵乘积，复杂度为 $O\left(n^2\right)$ 。</li><li>卷积核参数为 $n$，当图很大的时候，$n$ 会很大。</li><li>卷积核的spatial localization不好。</li></ul><blockquote><p>卷积核的空间定位（spatial localization）是指卷积核在输入数据的空间维度上的操作范围和影响范围。在卷积操作中，卷积核会在输入数据的不同位置上滑动，通过与输入数据的局部区域进行逐元素相乘并求和来生成输出。</p><p>在图像处理领域，卷积核的空间定位决定了卷积操作在图像中提取特征的方式。不同大小的卷积核和不同的卷积操作方式可以捕捉到图像中不同尺度和结构的特征。例如，小尺寸的卷积核可以捕捉到图像中的细节特征，而较大尺寸的卷积核则可以捕捉到图像中的整体结构特征。</p><p>在图卷积网络中，卷积核的空间定位也很重要。由于图数据不像图像一样具有规则的网格结构，卷积核的设计需要考虑图的拓扑结构。卷积核在图上的空间定位可以用来控制卷积操作在图节点之间传播信息的方式，从而捕捉到图的局部和全局特征。</p><p>因此，卷积核的空间定位在卷积操作中起到了至关重要的作用，它决定了卷积操作如何在输入数据的不同位置上进行特征提取。</p></blockquote><h3 id="二代GCN"><a href="#二代GCN" class="headerlink" title="二代GCN"></a>二代GCN</h3><p>论文：<a href="https://arxiv.org/abs/1606.09375">Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering</a></p><p>图傅里叶变换是关于特征值(相当于普通傅里叶变换的频率)的函数，也就是 $F\left(\lambda_1\right), \ldots, F\left(\lambda_n\right)$，即 $F(\boldsymbol{\Lambda})$, 因此，将卷积核 $\boldsymbol{g}_\theta$ 写成 $\boldsymbol{g}_\theta(\Lambda)$，然后将 $\boldsymbol{g}_\theta(\Lambda)$ 定义为如下k阶多项式</p><script type="math/tex; mode=display">g_{\theta^{\prime}}(\mathbf{\Lambda}) \approx \sum_{k=0}^K \theta_k^{\prime} \mathbf{\Lambda}^k</script><p>这里的 $\Lambda$ 为以特征值为对角元素的对角矩阵，所以 $\Lambda^k$ 也是对角矩阵，通过求和之后，还是对角矩阵，就这一点来说，和 $g_\theta$ 本身是对角矩阵是非常吻合的。</p><p>将卷积公式带入，可以得到：</p><script type="math/tex; mode=display">\begin{aligned}g_{\theta^{\prime}} * x & \approx \Phi \sum_{k=0}^K \theta_k^{\prime} \boldsymbol{\Lambda}^k \boldsymbol{\Phi}^T \boldsymbol{x} \\& =\sum_{k=0}^K \theta_k^{\prime}\left(\boldsymbol{\Phi} \boldsymbol{\Lambda}^k \boldsymbol{\Phi}^T\right) x \\& =\sum_{k=0}^K \theta_k^{\prime}\left(\mathbf{\Phi} \boldsymbol{\Lambda} \boldsymbol{\Phi}^T\right)^k x \\& =\sum_{k=0}^K \theta_k^{\prime} \boldsymbol{L}^k x\end{aligned}</script><p>可以看出，这一代的GCN不需要做特征分解了，可以直接对Laplacian矩阵做变换，通过事先将Laplacian矩阵求出来，以及 $\boldsymbol{L}^k$ 求出来，前向传播的时候，就可以直接使用，复杂度为 $O\left(K n^2\right)$ 。</p><p>那么上式是如何体现localization呢？我们知道，矩阵的$k$次方可以用于求连通性，即1个节点经过$k$步能否到达另一个顶点，矩阵$k$次方结果中对应元素非0的话可达，为0不可达。那么 $\boldsymbol{L}^k$ 所表达的就是 k-hop 内的节点。又可以通过拉普拉斯算子的性质证明，如果两个节点的最短路径大于 $k$ 的话，$\boldsymbol{L}^k$ 在相应位置的元素值为0。</p><p>综上，相当于只有n节点的k-hop之内的邻居节点能够传递信息，实际上只利用了节点的K-Localized信息。</p><p>另外，作者提出可以使用切比雪夫展开式来近似 $\boldsymbol{L}^k$，因为任何 $\mathbf{k}$ 次多项式都可以使用切比雪夫展开式来近似，由此，引入切比雪夫多项式的 $K$ 阶截断获得 $\boldsymbol{L}^k$ 近似，从而获得对 $g_\theta(\boldsymbol{\Lambda})$ 的近似</p><script type="math/tex; mode=display">g_{\theta^{\prime}}(\mathbf{\Lambda}) \approx \sum_{k=0}^K \theta_k^{\prime} T_k(\tilde{\mathbf{\Lambda}})</script><p>其中，$\tilde{\boldsymbol{\Lambda}}=\frac{2}{\lambda_{\max }} \boldsymbol{\Lambda}-\boldsymbol{I}_n $ 为经图拉普拉斯矩阵 $L$ 的最大特征值（即谱半径）缩放后的特征向量矩阵（防止连乘爆炸），$ \boldsymbol{\theta}^{\prime} \in \mathbb{R}^K$ 为一个切比雪夫向量，$\theta_k^{\prime}$ 为第 $k$ 维分量，切比雪夫多项式 $T_k(x)$ 使用递归的方式进行定义：</p><script type="math/tex; mode=display">T_k(x)=2 x T_{k-1}(x)-T_{k-2}(x)</script><p>其中, $T_0(x)=1, T_1(x)=x$ 。</p><p>此时，用近似的卷积核带入到原公式，可得：</p><script type="math/tex; mode=display">\begin{aligned}\boldsymbol{g}_{\boldsymbol{\theta}^{\prime}} * \boldsymbol{x} & \approx \boldsymbol{\Phi} \sum_{k=0}^K \theta_k^{\prime} T_k(\tilde{\boldsymbol{\Lambda}}) \boldsymbol{\Phi}^T \boldsymbol{x} \\& \approx \sum_{k=0}^K \theta_k^{\prime}\left(\boldsymbol{\Phi} T_k(\tilde{\boldsymbol{\Lambda}}) \boldsymbol{\Phi}^T\right) x \\& =\sum_{k=0}^K \theta_k^{\prime} T_k(\tilde{\boldsymbol{L}}) \boldsymbol{x}\end{aligned}</script><p>其中，$\tilde{\boldsymbol{L}}=\frac{2}{\lambda_{\max }} \boldsymbol{L}-\boldsymbol{I}_n$ 。</p><p>因此，可以得到输出为：</p><script type="math/tex; mode=display">\boldsymbol{y}_{\text {output }}=\sigma\left(\sum_{k=0}^K \theta_k^{\prime} T_k(\tilde{\boldsymbol{L}}) \boldsymbol{x}\right)</script><p>其中参数向量 $\boldsymbol{\theta}^{\prime} \in \mathbb{R}^{k}$ 需要学习。</p><h3 id="三代GCN"><a href="#三代GCN" class="headerlink" title="三代GCN"></a>三代GCN</h3><p>论文：<a href="https://arxiv.org/abs/1609.02907">Semi-supervised Classification with Graph Convolutional Networks</a></p><p>这一代GCN直接取切比雪夫多项式中 $K=1$，此时模型是 1 阶近似，即每层卷积层只考虑了直接邻域，类似CNN中 $3 \times 3$ 的卷积核。并且，这一代GCN加深了深度而减小了宽度，若要建立多阶 proximity，只需要使用多个卷积层。同时，加入了一些参数约束，如 $\lambda_{\max }=2$ 和引入renormalization trick，大大简化了模型。</p><p>下面开始推导，将 $K=1, \quad \lambda_{\max }=2$ 带入可以得到：</p><script type="math/tex; mode=display">\begin{aligned}\boldsymbol{g}_{\theta^{\prime}} * \boldsymbol{x} & \approx \boldsymbol{\theta}_0^{\prime} \boldsymbol{x}+\theta_1^{\prime}\left(\boldsymbol{L}-\boldsymbol{I}_n\right) \boldsymbol{x} \\& =\boldsymbol{\theta}_0^{\prime} \boldsymbol{x}+\theta_1^{\prime}\left(\boldsymbol{L}-\boldsymbol{I}_n\right) \boldsymbol{x} \\& =\theta_0^{\prime} \boldsymbol{x}-\theta_1^{\prime}\left(\boldsymbol{D}^{-1 / 2} \boldsymbol{W} \boldsymbol{D}^{-1 / 2}\right) \boldsymbol{x}\end{aligned}</script><p>最终转换步骤的解释如下：</p><script type="math/tex; mode=display">\boldsymbol{L}=\boldsymbol{D}^{-1 / 2}(\boldsymbol{D}-\boldsymbol{W}) \boldsymbol{D}^{-1 / 2}=\boldsymbol{I}_n-\boldsymbol{D}^{-1 / 2} \boldsymbol{W} \boldsymbol{D}^{-1 / 2}</script><p>现在每个卷积核只有2个参数，为了进一步简化，令 $\theta_0^{\prime}=-\theta_1^{\prime}$，此时只含有一个参数 $\theta$：</p><script type="math/tex; mode=display">g_{\theta^{\prime}} * x=\theta\left(I_n+D^{-1 / 2} W D^{-1 / 2}\right) x</script><p>由于 $\boldsymbol{I}_n+\boldsymbol{D}^{-1 / 2} \boldsymbol{W} \boldsymbol{D}^{-1 / 2}$ 的谱半径 $[0,2]$ 太大，使用renormalization trick：</p><script type="math/tex; mode=display">\boldsymbol{I}_n+\boldsymbol{D}^{-1 / 2} \boldsymbol{W} \boldsymbol{D}^{-1 / 2} \rightarrow \tilde{\boldsymbol{D}}^{-1 / 2} \tilde{\boldsymbol{W}} \tilde{\boldsymbol{D}}^{-1 / 2}</script><p>其中，$\tilde{\boldsymbol{W}}=\boldsymbol{W}+\boldsymbol{I}_n$ (相当于加了self-connection，本来$\boldsymbol{W}$对角元素为0)，$\tilde{D}_{i j}=\Sigma_j \tilde{W}_{i j}$ 。</p><p>带入卷积公式：</p><script type="math/tex; mode=display">\underbrace{g_{\theta^{\prime}} * x}_{\mathbb{R}^{n \times 1}}=\theta(\underbrace{\tilde{D}^{-1 / 2} \tilde{W} \tilde{D}^{-1 / 2}}_{\mathbb{R}^{n \times n}}) \underbrace{x}_{\mathbb{R}^{n \times 1}}</script><p>如果推广到多通道，相当于每一个节点的信息是向量，且有多卷积核：</p><script type="math/tex; mode=display">x \in \mathbb{R}^{N \times 1} \rightarrow X \in \mathbb{R}^{N \times C}</script><p>其中，$N$ 是节点数量，$C$ 是通道数，或者称作表示节点的信息维度数。 $\mathrm{X}$ 是 节点的特征矩阵。</p><p>相应的卷积核参数变化：</p><script type="math/tex; mode=display">\theta \in \mathbb{R} \rightarrow \Theta \in \mathbb{R}^{C \times F}</script><p>其中，$F$ 为卷积核数量。</p><p>那么卷积结果写成矩阵形式为：</p><script type="math/tex; mode=display">\underbrace{Z}_{\mathbb{R}^{N \times F}}=\underbrace{\tilde{D}^{-1 / 2} \tilde{W} \tilde{D}^{-1 / 2}}_{\mathbb{R}^{N \times N}} \underbrace{X}_{\mathbb{R}^{N \times C}}  \underbrace{\Theta}_{\mathbb{R}^{C \times F}}</script><p>上述操作可以叠加多层，对输出$Z$激活一下，就可以作为下一层节点的特征矩阵。</p><p>这一代GCN特点：</p><ul><li>取 $K=1$，相当于直接取邻域信息，类似于 $3 \times 3$ 的卷积核。</li><li>由于卷积核宽度减小，可以通过增加卷积层数来扩大感受域，从而增强网络的表达能力。</li><li>增加了参数约束，比如 $\lambda_{\max } \approx 2$，引入重归一化trick。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/76296353">https://zhuanlan.zhihu.com/p/76296353</a><br>[2] <a href="https://zhuanlan.zhihu.com/p/54505069">https://zhuanlan.zhihu.com/p/54505069</a><br>[3] <a href="http://xtf615.com/2019/02/24/gcn/">http://xtf615.com/2019/02/24/gcn/</a><br>[4] <a href="https://zhuanlan.zhihu.com/p/362416124">https://zhuanlan.zhihu.com/p/362416124</a><br>[5] <a href="https://qddmj.cn/gcn-laplacian.htm">https://qddmj.cn/gcn-laplacian.htm</a><br>[6] <a href="https://zhuanlan.zhihu.com/p/170091053">https://zhuanlan.zhihu.com/p/170091053</a><br>[7] <a href="https://qddmj.cn/gcn-laplacian2.htm">https://qddmj.cn/gcn-laplacian2.htm</a><br>[8] <a href="https://zhuanlan.zhihu.com/p/41609577">https://zhuanlan.zhihu.com/p/41609577</a><br>[9] <a href="https://zhuanlan.zhihu.com/p/464121739">https://zhuanlan.zhihu.com/p/464121739</a><br>[10] <a href="https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#convolutional-layers">https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#convolutional-layers</a><br>[11] <a href="https://zhuanlan.zhihu.com/p/60014316">https://zhuanlan.zhihu.com/p/60014316</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;图卷积学习记录，同时也涉及离散拉普拉斯算子内容，可能对视觉方向有帮助。&lt;/p&gt;
&lt;p&gt;相关内容：卷积、傅立叶变换、拉普拉斯算子、狄利克雷能量、图卷积&lt;br&gt;</summary>
    
    
    
    
    <category term="深度学习" scheme="http://silencezheng.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="图论" scheme="http://silencezheng.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Yilia图片居中</title>
    <link href="http://silencezheng.top/2023/08/13/article116/"/>
    <id>http://silencezheng.top/2023/08/13/article116/</id>
    <published>2023-08-13T07:48:59.000Z</published>
    <updated>2023-08-13T07:50:37.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo博客，Yilia主题设置图片居中。</p><span id="more"></span><p>Yilia用了很久了，终于想起来动一下图片居中的毛病，原版是无法实现图片居中的，在<code>article-main.scss</code>中加个样式可以解决。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  // 要添加的</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但添加完需要重新编译主题项目，进入项目根目录执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 编译、压缩。</span></span><br><span class="line">npm run dist</span><br></pre></td></tr></table></figure></p><p>Yilia这个项目2017年后就没有维护了，注意在安装依赖时用Python2环境。</p><p>参考<a href="https://github.com/litten/hexo-theme-yilia/wiki/Yilia源码目录结构及构建须知">官方文档</a>。</p><p>在外部编译压缩完，替换source目录下的<code>main.XXX.css</code>文件就行了。</p><p>但如果项目编译环境有问题的话，这样替换还是容易造成其他bug，最稳妥的方式还是直接在已发布的<code>main.XXX.css</code>中搜索<code>.article img</code>然后进行修改。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo博客，Yilia主题设置图片居中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Yilia" scheme="http://silencezheng.top/tags/Yilia/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装使用入门</title>
    <link href="http://silencezheng.top/2023/08/12/article115/"/>
    <id>http://silencezheng.top/2023/08/12/article115/</id>
    <published>2023-08-12T12:32:55.000Z</published>
    <updated>2023-08-12T12:34:10.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis安装使用入门，包含基本知识和命令行客户端使用。</p><span id="more"></span><h2 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h2><p>Redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。Redis的全称是<code>REmote DIctionary Server</code>。</p><p>Redis 提供数据结构，例如字符串、哈希、列表、集合、带有范围查询的排序集、位图、HyperLogLog、地理空间索引和流。 Redis 具有内置复制、Lua 脚本、LRU 逐出、事务和不同级别的磁盘持久性，并通过 Redis Sentinel 和 Redis 集群的自动分区提供高可用性。</p><p>另外，膜拜一下<a href="http://antirez.com/latest/0">作者大佬的博客</a>，风格太简约了😄。</p><h2 id="Redis快速安装"><a href="#Redis快速安装" class="headerlink" title="Redis快速安装"></a>Redis快速安装</h2><p>Docker安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66 2023.8.11</span></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker search redis</span><br><span class="line"></span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir myredis</span><br><span class="line">mkdir myredis/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建持久化目录</span></span><br><span class="line">mkdir myredis/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件下载</span></span><br><span class="line">wget -O myredis/config/redis.conf http://download.redis.io/redis-stable/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个名为&quot;myredis&quot;的Redis容器，并根据指定的配置文件和参数进行配置</span></span><br><span class="line">docker run --restart=always --log-opt max-size=50m --log-opt max-file=1 -p 6379:6379 --name myredis -v /path/to/myredis/redis.conf:/etc/redis/redis.conf -v /path/to/myredis/data:/data -d redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是各个参数的解释：</span></span><br><span class="line"><span class="comment"># `--restart=always`: 设置容器在退出时总是自动重启。</span></span><br><span class="line"><span class="comment"># `--log-opt max-size=100m`: 设置容器日志文件的最大大小为100MB。当日志文件达到该大小时，将进行轮转。</span></span><br><span class="line"><span class="comment"># `--log-opt max-file=2`: 设置容器日志文件的最大数量为2个。当日志文件数量超过该值时，最旧的日志文件将被删除。</span></span><br><span class="line"><span class="comment"># `-p 6379:6379`: 将宿主机的6379端口映射到容器的6379端口，允许从宿主机访问Redis服务。</span></span><br><span class="line"><span class="comment"># `--name myredis`: 为容器指定一个名称，即&quot;myredis&quot;。</span></span><br><span class="line"><span class="comment"># `-v /path/to/myredis/redis.conf:/etc/redis/redis.conf`: 将主机上的 `/path/to/myredis/redis.conf` 文件挂载到容器内的 `/etc/redis/redis.conf` 路径，用作Redis配置文件。</span></span><br><span class="line"><span class="comment"># `-v /path/to/myredis/data:/data`: 将主机上的 `/path/to/myredis/data` 目录挂载到容器内的 `/data` 路径，用作Redis数据目录。</span></span><br><span class="line"><span class="comment"># `-d redis`: 在后台运行一个Redis容器。</span></span><br><span class="line"><span class="comment"># `redis-server /etc/redis/redis.conf`: 指定要运行的Redis服务器，并指定使用 `/etc/redis/redis.conf` 作为配置文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器运行日志</span></span><br><span class="line">docker logs --since 30m myredis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有与端口号相关的网络连接和监听端口</span></span><br><span class="line">netstat -an | grep 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器redis命令行客户端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it myredis redis-cli</span><br></pre></td></tr></table></figure></p><h2 id="Redis基础介绍"><a href="#Redis基础介绍" class="headerlink" title="Redis基础介绍"></a>Redis基础介绍</h2><h3 id="查看Redis信息"><a href="#查看Redis信息" class="headerlink" title="查看Redis信息"></a>查看Redis信息</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看全部信息</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:<span class="number">7.0</span>.11</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某板块信息</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; info CPU</span><br><span class="line"><span class="comment"># CPU</span></span><br><span class="line">used_cpu_sys:<span class="number">1.023336</span></span><br><span class="line">used_cpu_user:<span class="number">0.675062</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Redis默认有16个数据库，这个可以在配置文件redis.conf中做出修改:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">databases 16</span><br></pre></td></tr></table></figure><p>这16个数据库以编号0-15命名，不支持修改名字，而且各个数据库之间的数据并不具备完全的隔离性，比如我们切换到任意一个数据库，执行命令<code>flushall</code>就可以清空所有数据库的数据，所以并不建议通过数据库来隔离不同的业务系统数据，但是我们可以针对同一个业务系统中的不同模块将其设置到不同的数据库中。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Redis的基本数据类型如下图：<br><img src="/assets/post_img/article115/redis-data-struct.png" alt="bdt"></p><p>但还有其他一些数据类型可扩展，截至目前，官网包含如下数据类型：<br><img src="/assets/post_img/article115/all-psb-dt.png" alt="alldt"></p><p>以下是常用数据结构的简要介绍：</p><ol><li><p><strong>Strings（字符串）</strong>：</p><ul><li>存储文本、二进制数据等。</li><li>可用于缓存、计数器等。</li></ul></li><li><p><strong>Lists（列表）</strong>：</p><ul><li>有序、可重复的元素集合。</li><li>支持在列表头部和尾部添加、删除元素，以及获取子列表。</li><li>适用于实现消息队列、最新动态等。</li></ul></li><li><p><strong>Sets（集合）</strong>：</p><ul><li>无序、不重复的元素集合。</li><li>支持添加、删除、判断元素是否存在等操作。</li><li>适用于存储不重复的标签、好友关系等。</li></ul></li><li><p><strong>Sorted Sets（有序集合）</strong>：</p><ul><li>与集合类似，但每个元素都有一个分数（score）用于排序。</li><li>支持按照分数范围获取元素。</li><li>适用于排行榜、优先级队列等。</li></ul></li><li><p><strong>Hashs（哈希）</strong>：</p><ul><li>存储对象，每个字段存储一个属性。</li><li>支持单个字段的读写、删除，以及获取所有字段。</li><li>适用于存储用户信息、商品属性等。</li></ul></li><li><p><strong>Bitmaps（位图）</strong>：</p><ul><li>位存储结构，适合表示某些状态或事件。</li><li>支持位的设置、清除、查询等操作。</li><li>适用于用户在线状态、签到等。</li></ul></li><li><p><strong>HyperLogLog（基数估算）</strong>：</p><ul><li>用于估算集合中不重复元素的数量，占用很少的内存。</li><li>支持添加元素，以及计算估算的基数数量。</li><li>适用于统计不重复 IP 数量、UV 数量等。</li></ul></li><li><p><strong>Geospatials（地理位置）</strong>：</p><ul><li>存储地理位置信息。</li><li>支持添加地点、计算两个地点之间的距离等操作。</li><li>适用于附近商店查找、位置服务等。</li></ul></li></ol><p>这些数据结构的特点在于快速的读写操作，以及许多方便的命令和功能。</p><h3 id="Key命名规范"><a href="#Key命名规范" class="headerlink" title="Key命名规范"></a>Key命名规范</h3><p>在 Redis 中，Key 的命名是非常重要的，它不仅影响到数据存储的性能，还会影响到代码的可读性和维护性。以下是一些 Redis Key 命名的规范和建议：</p><ol><li><p><strong>清晰而有意义的命名</strong>：Key 应该能够清楚地表达出它所对应的数据含义，不要使用过于简单的名称，可以使用类似于命名空间的方式来分隔不同业务领域的数据。</p></li><li><p><strong>避免特殊字符</strong>：Key 不应该包含特殊字符，特别是空格、换行符等。建议使用字母、数字、下划线、英文冒号等字符组成。</p></li><li><p><strong>长度适中</strong>：Key 的长度应该适中，不要过长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率。</p></li><li><p><strong>小写字母</strong>：建议使用小写字母来命名 Key，这样可以避免在大小写不敏感的 Redis 配置中引起问题。</p></li><li><p><strong>使用分隔符</strong>：在 Key 中使用分隔符，以提高可读性，比如使用冒号（:）或下划线（_）来分隔不同的层级。注意虽然可以使用分隔符方式划分 Key，但不要过度嵌套，以免增加查找和维护的复杂性。</p></li><li><p><strong>避免重复</strong>：确保不同业务使用不同的 Key，以免冲突和混淆。</p></li><li><p><strong>避免敏感信息</strong>：避免在 Key 中包含敏感信息，比如密码、安全令牌等。</p></li></ol><p>合理的命名规范可以提高代码的可读性和维护性，同时也能更好地利用 Redis 的性能优势。根据业务需求和团队的约定，可以制定适合自己的 Key 命名规范。</p><p>下面列举一些键命名示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命名规范：user:&#123;user_id&#125;:name</span><br><span class="line">示例：user:123:name</span><br><span class="line"></span><br><span class="line">命名规范：post:&#123;post_id&#125;</span><br><span class="line">示例：post:456</span><br><span class="line"></span><br><span class="line">命名规范：online:&#123;date&#125;</span><br><span class="line">示例：online:2023-06-01</span><br></pre></td></tr></table></figure></p><h2 id="Redis使用入门（CLI）"><a href="#Redis使用入门（CLI）" class="headerlink" title="Redis使用入门（CLI）"></a>Redis使用入门（CLI）</h2><p>下面使用Redis命令行客户端进行一些操作，加深对上述知识的理解😄。</p><h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; select <span class="number">1</span>    <span class="comment"># 数据库选择</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; set a a</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; select <span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">2</span>]&gt; get a</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">2</span>]&gt; keys *   <span class="comment"># 显示当前数据库的所有键</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; select <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; flushdb <span class="comment"># 清空当前数据库</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>[<span class="number">1</span>]&gt; flushdb <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="字符串（Strings）"><a href="#字符串（Strings）" class="headerlink" title="字符串（Strings）"></a>字符串（Strings）</h3><p>在 Redis 中，字符串是最简单的数据类型，但也是最通用和常用的，它不仅可以存储文本、整数、浮点数，甚至包括任何二进制数据，例如图像和序列化的对象。</p><p>这是因为在 Redis 中，字符串是二进制安全的（Binary-safe）。这意味着 Redis 的字符串值可以包含任何类型的数据，包括文本、图像、序列化的对象等，而不会对其中的二进制数据做任何处理或解释。</p><p>如果需要对存储的二进制数据进行解码，比如将其转换为特定的对象或文件格式，需要在应用程序中处理解码操作。</p><h4 id="设-取值"><a href="#设-取值" class="headerlink" title="设/取值"></a>设/取值</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个设置</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; set test:<span class="number">1</span>:string <span class="string">&quot;Silence&quot;</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; get test:<span class="number">1</span>:string</span><br><span class="line"><span class="string">&quot;Silence&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量设置</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; mset name:<span class="number">1</span> Silence name:<span class="number">2</span> Zheng</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; mget name:<span class="number">1</span> name:<span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Silence&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Zheng&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不存在则设值，存在则设置失败</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; setnx name:<span class="number">1</span> <span class="string">&quot;Eminem&quot;</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; get name:<span class="number">1</span></span><br><span class="line"><span class="string">&quot;Silence&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; set name:<span class="number">3</span> <span class="string">&quot;Eminem&quot;</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><code>SET</code> 命令支持设置过期时间，一般分布式锁就是基于带过期时间的这个命令来实现的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value EX|PX 18 <span class="comment"># EX表示秒，PX表示毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置3秒后自动过期</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> tmp:1 5 EX 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get tmp:1</span><br><span class="line"><span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get tmp:1</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h4 id="增减"><a href="#增减" class="headerlink" title="增减"></a>增减</h4><p>字符串类型包含整数和浮点数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; SET counter <span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; INCR counter</span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; DECR counter</span><br><span class="line">(integer) <span class="number">10</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; INCRBY counter <span class="number">5</span></span><br><span class="line">(integer) <span class="number">15</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; DECRBY counter <span class="number">100</span></span><br><span class="line">(integer) -<span class="number">85</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; DECRBYFLOAT counter <span class="number">5.2465</span></span><br><span class="line">(error) ERR unknown command <span class="string">&#x27;DECRBYFLOAT&#x27;</span>, with args beginning with: <span class="string">&#x27;counter&#x27;</span> <span class="string">&#x27;5.2465&#x27;</span> </span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; INCRBYFLOAT counter -<span class="number">5.2465</span></span><br><span class="line"><span class="string">&quot;-90.2465&quot;</span></span><br></pre></td></tr></table></figure><p>对于浮点运算，不存在<code>DECRBYFLOAT</code>，而是通过<code>INCRBYFLOAT</code>负值来进行减少。</p><p>最重要的是，<code>INCR</code>等指令本身就具有原子操作的特性，所以我们完全可以利用redis的<code>INCR、INCRBY、DECR、DECRBY</code>等指令来实现多客户端原子计数的效果，不少网站都利用redis的这个特性来实现业务上的统计计数需求。</p><h4 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h4><p>在值后新增内容&amp;获取值的子串：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; append <span class="built_in">test</span>:1:string <span class="string">&quot;Zheng66&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span>:1:string</span><br><span class="line"><span class="string">&quot;SilenceZheng66&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE <span class="built_in">test</span>:1:string 2 10</span><br><span class="line"><span class="string">&quot;lenceZhen&quot;</span></span><br></pre></td></tr></table></figure></p><h3 id="列表（Lists）"><a href="#列表（Lists）" class="headerlink" title="列表（Lists）"></a>列表（Lists）</h3><p>在 Redis 中，List 是一个有序的字符串集合，它允许存储多个字符串值，并且保持它们的插入顺序。每个值都被称为元素（element）。Redis 中的 List 是一个<strong>双向链表</strong>（double-ended list），这使得在两端进行插入和删除操作非常快速。</p><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>下面称列表的左侧为头部，右侧为尾部。</p><ol><li><code>lpush</code>：将一个或者多个<code>value</code>插入到列表key的头部，不存在则创建列表key。</li><li><code>lpushx</code>：将<code>value</code>插入到列表key的头部，不存在则不做任何处理。</li><li><code>lpop</code>：移除并返回列表key指定数量的头元素，默认1。</li><li><code>rpush</code>、<code>rpushx</code>：尾部插入，对应关系同上。</li><li><code>rpop</code>：尾部推出，同上。</li><li><code>llen</code>：返回列表key的长度。</li><li><code>lindex</code>：获取列表key指定索引位置上的元素，头部从0开始，尾部从-1开始。</li><li><code>lrange</code>：返回列表key中下标start到stop之间的元素，包含边界。</li><li><code>lset</code>：将value设置到列表key中指定index位置。key不存在或者index超出范围报错。</li><li><code>lrem</code>：从列表key中删除指定数量的匹配值。</li><li><code>ltrim</code>：修剪原列表，只保留指定范围内的元素，包含边界。</li><li><code>linsert</code>：在列表中指定元素前或后插入新元素。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; LPUSH mylist item1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LPUSHX mylist item2 item3</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; RPUSH mylist item4 item5</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; RPUSHX mylist item6</span><br><span class="line">(integer) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpop mylist</span><br><span class="line"><span class="string">&quot;item3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; rpop mylist</span><br><span class="line"><span class="string">&quot;item6&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; llen mylist</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lindex mylist <span class="number">0</span></span><br><span class="line"><span class="string">&quot;item2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lindex mylist -<span class="number">1</span></span><br><span class="line"><span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lindex mylist -<span class="number">2</span></span><br><span class="line"><span class="string">&quot;item4&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LRANGE mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;item1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;item4&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lset mylist <span class="number">0</span> item2:new</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpop mylist</span><br><span class="line"><span class="string">&quot;item2:new&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; ltrim mylist <span class="number">2</span> <span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; llen mylist</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LINSERT mylist BEFORE item5 item100</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; LINSERT mylist after item5 item100</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item100&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;item100&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lrem mylist <span class="number">2</span> item100</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lrange mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpush mylist item1 item2 item3</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; rpop mylist <span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;item5&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;item1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;item2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;item3&quot;</span></span><br></pre></td></tr></table></figure><h4 id="更多操作-1"><a href="#更多操作-1" class="headerlink" title="更多操作"></a>更多操作</h4><p><strong>BLPOP / BRPOP</strong></p><ul><li><code>BLPOP key [key ...] timeout</code>: 阻塞式左弹出操作，等待并弹出第一个非空列表的元素。</li><li><code>BRPOP key [key ...] timeout</code>: 阻塞式右弹出操作，等待并弹出第一个非空列表的元素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从多个列表中弹出元素，等待时间为10秒</span></span><br><span class="line">BLPOP mylist1 mylist2 10 </span><br></pre></td></tr></table></figure><h3 id="集合（Sets）"><a href="#集合（Sets）" class="headerlink" title="集合（Sets）"></a>集合（Sets）</h3><p>Redis中的集合是一个String类型的无序集合，集合中元素唯一不可重复。</p><p>Sets在Redis中的常用函数有：</p><ol><li><code>SADD key member [member ...]</code>：将一个或多个成员添加到集合key中。</li><li><code>SCARD key</code>：返回集合key的基数（集合中元素的数量）。</li><li><code>SISMEMBER key member</code>：判断member元素是否是集合key的成员。</li><li><code>SREM key member [member ...]</code>：移除集合key中的一个或多个member元素。</li><li><code>SMEMBERS key</code>：返回集合key中的所有成员。</li><li><code>SPOP key [count]</code>：移除并返回集合key中的count个随机元素。</li><li><code>SRANDMEMBER key [count]</code>：从集合key中随机获取count个元素。</li><li><code>SDIFF key [key ...]</code>：返回所有给定集合之间的差集。</li><li><code>SINTER key [key ...]</code>：返回所有给定集合的交集。</li><li><code>SUNION key [key ...]</code>：返回所有给定集合的并集。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; SADD myset value1 value2 value3</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SCARD myset</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SISMEMBER myset value1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sadd aset value2 value3 value4</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SISMEMBER aset value1</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; srem myset value2 value3</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smove myset aset value1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sadd myset value1 value3 value5</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; spop aset <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers aset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value4&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; srandmember myset <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sdiff myset aset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sdiff aset myset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value4&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sinter myset aset</span><br><span class="line">(empty array)</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sunion myset aset</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value4&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;value5&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;value2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="有序集合（Sorted-sets）"><a href="#有序集合（Sorted-sets）" class="headerlink" title="有序集合（Sorted sets）"></a>有序集合（Sorted sets）</h3><p>在Redis中，Sorted Set（有序集合）是一种可以排序的集合数据结构，它的每个成员都有一个相关的分数（score），根据分数的排列顺序对成员进行排序。<br>Sorted Set主要用于处理需要排序和去重的数据。</p><h4 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h4><p>因为添加操作的参数较多，单独拿出来说一下。<code>ZADD</code>命令用于将一个或多个成员添加到有序集合（Sorted Set）中，或者更新已存在成员的分数。</p><p>下面是<code>ZADD</code>命令的各种用法示例：</p><ol><li>添加单个成员到有序集合：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset 3 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><ol><li>添加多个成员到有序集合：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset 2 <span class="string">&quot;member2&quot;</span> 4 <span class="string">&quot;member3&quot;</span> 1 <span class="string">&quot;member4&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><ol><li>使用<code>NX</code>选项，仅在成员不存在时才添加：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset NX 3 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><ol><li>使用<code>XX</code>选项，仅在成员已存在时才更新分数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset XX 5 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><ol><li>使用<code>CH</code>选项，返回更新或添加的成员数量，包括分数未变动的成员：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset CH 5 <span class="string">&quot;member1&quot;</span> 2 <span class="string">&quot;member2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><ol><li>使用<code>INCR</code>选项，将分数作为增量进行更新：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset INCR 2 <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><ol><li>结合<code>NX</code>、<code>CH</code>和<code>INCR</code>选项的多功能用法：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset NX CH INCR 3 <span class="string">&quot;member1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h4><p>Sorted Sets在Redis中的常用函数有：</p><ol><li><code>ZADD key [NX|XX] [CH] [INCR] score member [score member ...]</code>：将一个或多个成员添加到有序集合key中，或者更新已存在成员的分数。</li><li><code>ZCARD key</code>：返回有序集合key的基数（有序集合中元素的数量）。</li><li><code>ZSCORE key member</code>：返回成员member的分数。</li><li><code>ZCOUNT key min max</code>：返回有序集合key中分数介于min和max之间的成员数量。</li><li><code>ZINCRBY key increment member</code>：将成员member的分数增加increment。</li><li><code>ZRANGE key start stop [WITHSCORES]</code>：返回有序集合key中索引从start到stop之间的成员。</li><li><code>ZREVRANGE key start stop [WITHSCORES]</code>：返回有序集合key中索引从start到stop之间的成员，按分数从大到小排列。</li><li><code>ZRANK key member</code>：返回成员member在有序集合key中的排名，从0开始计数。</li><li><code>ZREVRANK key member</code>：返回成员member在有序集合key中的排名，从高到低排列。</li><li><code>ZREM key member [member ...]</code>：移除有序集合key中的一个或多个成员。</li><li><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code>：返回有序集合key中分数介于min和max之间的成员。</li><li><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code>：返回有序集合key中分数介于max和min之间的成员，按分数从大到小排列。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; ZADD mysset <span class="number">1</span> member1 <span class="number">2</span> member2</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zadd mysset NX <span class="number">3</span> member3</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zcard mysset</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zscore mysset member2</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zcount mysset <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zincrby mysset <span class="number">2</span> member1</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrange mysset <span class="number">0</span> -<span class="number">1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;member3&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrevrange mysset <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;member2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrank mysset member2</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrevrank mysset member2</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrem mysset member3</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrangebyscore mysset <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrevrangebyscore mysset <span class="number">3</span> <span class="number">1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;member1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;member2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="哈希表（Hashs）"><a href="#哈希表（Hashs）" class="headerlink" title="哈希表（Hashs）"></a>哈希表（Hashs）</h3><p>在Redis中，Hashs是一种用于存储字段和值的数据结构，每个字段都与一个值相关联，类似于Python中的字典。<br>Hashs主要用于存储对象，以及需要多个字段来表示的数据。</p><p>Redis中Hashs的常用函数有：</p><ol><li><code>HSET key field value</code>：将哈希表key中的字段field的值设置为value。</li><li><code>HSETNX key field value</code>：将哈希表key中的字段field的值设置为value，如果field已存在，则不执行任何操作。</li><li><code>HGET key field</code>：返回哈希表key中给定字段field的值。</li><li><code>HMSET key field1 value1 [field2 value2 ...]</code>：同时将多个field-value对设置到哈希表key中。</li><li><code>HMGET key field1 [field2 ...]</code>：返回哈希表key中给定字段的值。</li><li><code>HDEL key field1 [field2 ...]</code>：删除哈希表key中的一个或多个指定字段。</li><li><code>HGETALL key</code>：返回哈希表key中所有字段和值。</li><li><code>HKEYS key</code>：返回哈希表key中的所有字段。</li><li><code>HVALS key</code>：返回哈希表key中的所有值。</li><li><code>HLEN key</code>：返回哈希表key中字段的数量。</li><li><code>HEXISTS key field</code>：查看哈希表key中是否存在指定字段。</li><li><code>HINCRBY key field increment</code>：为哈希表key中的字段field的值增加increment。</li><li><code>HINCRBYFLOAT key field increment</code>：为哈希表key中的字段field的值增加浮点数increment。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; HSET myhash field1 value1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HSET myhash field2 value2</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HGET myhash field1</span><br><span class="line"><span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HMSET myhash field3 value3 field4 value4</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HMGET myhash field1 field2 field3</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HDEL myhash field2</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HGETALL myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;field1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;field3&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HKEYS myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;field1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;field3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HVALS myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HLEN myhash</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HEXISTS myhash field1</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HINCRBY myhash field3 <span class="number">2</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; HINCRBYFLOAT myhash field3 <span class="number">1.5</span></span><br><span class="line"><span class="string">&quot;3.5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="位图（Bitmaps）"><a href="#位图（Bitmaps）" class="headerlink" title="位图（Bitmaps）"></a>位图（Bitmaps）</h3><p>在Redis中，Bitmaps是一种特殊的数据结构，它可以表示一系列位的集合，每个位的值要么是0，要么是1。<br>比如存储数据格式一般为：100110000111，这里的0和1就是bit值，设置的时候可以设置指定位置(偏移量)的bit值。<br>Bitmaps通常用于存储布尔值的信息，如用户的在线状态、用户活跃情况等。</p><p>Redis中Bitmaps的常用函数有：</p><ol><li><code>SETBIT key offset value</code>：将key对应的Bitmap中的offset位设置为value（0或1）。</li><li><code>GETBIT key offset</code>：返回key对应的Bitmap中offset位的值。</li><li><code>BITCOUNT key [start end]</code>：统计key对应的Bitmap中[start, end]范围内值为1的位的数量。</li><li><code>BITOP operation destkey key [key ...]</code>：对多个Bitmap执行位运算，并将结果保存到destkey中，operation可以是AND、OR、XOR、NOT。</li><li><code>BITPOS key bit [start] [end]</code>：返回key对应的Bitmap中值为bit的第一个位的位置，[start, end]范围内。</li><li><code>BITFIELD key [GET type offset] [SET type offset value]</code>：执行多种位域操作，可以进行位取反、位截取、位增加等操作。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; SETBIT online_users <span class="number">1000</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GETBIT online_users <span class="number">1000</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SETBIT online_users <span class="number">2000</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; SETBIT online_users <span class="number">3000</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITCOUNT online_users</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITCOUNT online_users <span class="number">0</span> <span class="number">2000</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITOP OR all_online online_users1 online_users2</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GETBIT all_online <span class="number">1000</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GETBIT all_online <span class="number">2000</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITPOS all_online <span class="number">1</span></span><br><span class="line">(integer) <span class="number">2000</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITPOS all_online <span class="number">1</span> <span class="number">2000</span> <span class="number">3000</span></span><br><span class="line">(integer) <span class="number">3000</span></span><br><span class="line"><span class="comment"># 在名为online_users的Bitmap中，执行位域操作，使用GET命令从偏移量为1000的位开始，获取一个有符号的4位整数（u4类型，无符号4位整数）。</span></span><br><span class="line"><span class="comment"># 结果为字符串&quot;6&quot;，表示在偏移量1000的4位中，值为6。</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITFIELD online_users GET u4 <span class="number">1000</span></span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="comment"># 在名为online_users的Bitmap中，执行位域操作，使用SET命令将偏移量为1000的4位设置为2。命令执行成功，返回整数0。</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITFIELD online_users SET u4 <span class="number">1000</span> <span class="number">2</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="comment"># 再次使用GET命令从偏移量为1000的位开始，获取一个有符号的4位整数（u4类型）。结果为字符串&quot;2&quot;，表示在偏移量1000的4位中，值已经被设置为2。</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; BITFIELD online_users GET u4 <span class="number">1000</span></span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="基数估算（HyperLogLog）"><a href="#基数估算（HyperLogLog）" class="headerlink" title="基数估算（HyperLogLog）"></a>基数估算（HyperLogLog）</h3><p>HyperLogLog本身是一种算法，其来源于论文《HyperLogLog the analysis of a near-optimal cardinality estimation algorithm》。</p><p>在Redis中，HyperLogLog是一种用于统计基数（集合中不重复元素的数量）的数据结构，它通过使用固定的空间来估计集合的基数，占用的空间相对较小。<br>HyperLogLog主要用于对大型数据集合的去重统计，适用于对数据的<strong>近似计数</strong>，而不需要实际存储所有元素。</p><p>在Redis里面，每个HyperLogLog键只需要花费12KB内存，就可以计算接近2^64 个不同元素的基数，但是也可能有0.81%的错误率。</p><p>HyperLogLog在Redis中的常用函数有：</p><ol><li><code>PFADD key element [element ...]</code>：将一个或多个元素添加到指定的HyperLogLog中。</li><li><code>PFCOUNT key [key ...]</code>：返回指定HyperLogLog的基数估算值。</li><li><code>PFMERGE destkey sourcekey [sourcekey ...]</code>：合并多个HyperLogLog为一个HyperLogLog。</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; PFADD myhll element1 element2 element3</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFADD myhll element4 element5</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFCOUNT myhll</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFMERGE merged-hll myhll myhll2</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; PFCOUNT merged-hll</span><br><span class="line">(integer) <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="地理空间（Geospatials）"><a href="#地理空间（Geospatials）" class="headerlink" title="地理空间（Geospatials）"></a>地理空间（Geospatials）</h3><p>在Redis中，Geospatials数据结构用于存储地理位置信息（经纬度）和相关的数据，然后可以通过位置信息进行距离计算和范围查询。<br>Redis提供了一种叫做Geohash的算法来将地理位置映射到字符串，从而可以在Redis中高效地进行位置查询和计算。</p><p>Geospatial数据在Redis中的常用函数有：</p><ol><li><code>GEOADD key longitude latitude member [longitude latitude member ...]</code>：将一个或多个地理位置成员添加到指定的key中。</li><li><code>GEODIST key member1 member2 [unit]</code>：返回两个地理位置成员之间的距离。</li><li><code>GEOHASH key member [member ...]</code>：返回指定地理位置成员的Geohash字符串。</li><li><code>GEOPOS key member [member ...]</code>：返回指定地理位置成员的经纬度坐标。</li><li><code>GEORADIUS key longitude latitude radius unit [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC]</code>：在指定的经纬度范围内查找地理位置成员。</li><li><code>GEORADIUSBYMEMBER key member radius unit [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC]</code>：在指定地理位置成员附近查找其他地理位置成员。</li><li><code>GEODEL key member [member ...]</code>：从指定key中删除一个或多个地理位置成员。</li></ol><p>以下是一些配合cli示例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:<span class="number">6379</span>&gt; GEOADD mygeo <span class="number">13.361389</span> <span class="number">38.115556</span> <span class="string">&quot;Palermo&quot;</span> <span class="number">15.087269</span> <span class="number">37.502669</span> <span class="string">&quot;Catania&quot;</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEODIST mygeo Palermo Catania km</span><br><span class="line"><span class="string">&quot;166.2740&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEOHASH mygeo Palermo Catania</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;sqc8b49rny0&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;sqdtr74hyu0&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEOPOS mygeo Palermo Catania</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;13.36138933897018433&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="string">&quot;38.11555639549629859&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;15.08726745843887329&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="string">&quot;37.50266842333162032&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEORADIUS mygeo <span class="number">15</span> <span class="number">37</span> <span class="number">200</span> km</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Catania&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEORADIUSBYMEMBER mygeo Palermo <span class="number">200</span> km</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Palermo&quot;</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; GEODEL mygeo Catania</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Redis的使用场景"><a href="#Redis的使用场景" class="headerlink" title="Redis的使用场景"></a>Redis的使用场景</h2><p>Redis是基于内存操作，具备高可用、高性能等特点，同时也提供了丰富的数据类型。一般可用于如下场景：</p><p>1、数据缓存。项目早期一般都是将数据存储到<code>MySQL、oracle</code>等关系型数据库中，所有的数据读写都是基于磁盘操作。随着业务的不断扩大，通过传统的方式进行数据的读取，系统在读写方面都会遇到瓶颈。针对这一情况，将数据存放在内存中，所有的读操作都通过内存进行查询，提高了系统的数据查询能力。对于数据的读，在高并发的业务场景下，也可以将数据先写入内存中，在通过异步的方式持久化到磁盘中，提高了系统的并发能力。</p><p>2、存储用户登录<code>token</code>。针对用户登录鉴权，一般可以基于<code>cookie</code>、jwt来实现。<code>cookie</code>是基于文件存储，并且<code>cookie</code>会涉及到跨域、分布式架构问题，jwt由于是基于客户端断存储方案，服务端无法直接控制登录<code>token</code>的状态。由于Redis是具备分布式部署架构，很好的解决了分布式架构<code>token</code>鉴权、用户登录状态等问题的控制。同时将登录<code>token</code>存放在Redis中，每次读取都采用内存读取，也提高了整个系统的性能。</p><p>3、秒杀场景。对于秒杀业务场景，对于系统的并发能力都是非常高的。在该场景下，将商品数据存储到Redis中，提高了系统的查询能力，减少了MySQL的压力。将商品库存都存储到Redis中，因Redis采用的是单线程架构，也可以实现商品超卖问题。</p><p>4、用户签到。可以使用 <code>bitmap</code> 数据类型，将用户签到存储在Redis中，然后通过异步线程将数据存储到MySQL中。既节约了内存，也提供了系统的读写能力。</p><p>5、消息队列。Redis提供 <code>list</code> 数据类型，技能用来做消息队列，也能用来做栈等场景。在 Redis5.0 开始，也提供了一种 <code>stream</code> 数据类型，提高了消息队列的可靠性。</p><p>6、社交场景。Redis提供了两种集合数据类型(set sortset)，可以用在积分排行、好友推荐等场景。</p><p>7、就近推荐。Redis中提供了一种 <code>Geospatials</code> 的数据类型来进行位运算。可以根据用户当前的经纬度，来计算附近的酒店、商场等场所的搜索与推荐功能。</p><p>8、分布式锁。当分布式架构中，需要对共享数据的读写操作(例如商品秒杀)。为了保证数据的一致性，一般是采用分布式锁实现，Redis能够非常简单的实现分布式锁功能。可以直接使用 <code>setnx key value + expire time</code> 操作，为了实现原子性操作，也可以直接使用 <code>lua</code> 实现。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/411888708">https://zhuanlan.zhihu.com/p/411888708</a><br>[2] <a href="https://redis.io/docs/getting-started/">https://redis.io/docs/getting-started/</a><br>[3] <a href="https://zhuanlan.zhihu.com/p/609596571">https://zhuanlan.zhihu.com/p/609596571</a><br>[4] <a href="https://zhuanlan.zhihu.com/p/270168739">https://zhuanlan.zhihu.com/p/270168739</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Redis安装使用入门，包含基本知识和命令行客户端使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Redis" scheme="http://silencezheng.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Pyinstaller逆向初体验</title>
    <link href="http://silencezheng.top/2023/08/08/article114/"/>
    <id>http://silencezheng.top/2023/08/08/article114/</id>
    <published>2023-08-08T15:28:09.000Z</published>
    <updated>2023-08-08T15:28:55.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写了个Python小工具，突然想到防逆向的问题，写篇小文实践一下。</p><span id="more"></span><h2 id="用PyInstaller打包程序"><a href="#用PyInstaller打包程序" class="headerlink" title="用PyInstaller打包程序"></a>用PyInstaller打包程序</h2><p>对有图形界面的程序，最简单的打包就是<code>pyinstaller -F --noconsole xxx.py</code>。</p><h2 id="反编译该程序"><a href="#反编译该程序" class="headerlink" title="反编译该程序"></a>反编译该程序</h2><p>一个比较经典的工具是<a href="https://github.com/WithSecureLabs/python-exe-unpacker">pyinstxtractor</a>。</p><p>对于Windows中打包的Python应用（python3.9，pyinstaller5.x+），可以直接提取。但对于同配置下MacOS中打包的应用不能提取。下面简单演示如何使用。</p><p>首先下载项目代码，将待提取可执行文件置于项目根目录下，以我反编译的项目<code>replacer.exe</code>为例，运行<code>python python_exe_unpack.py -i replacer.exe</code>。</p><p>运行后根目录下会出现<code>unpacked</code>目录，其中为抽取出的<code>pyc</code>文件。找到其中的程序入口文件，通常与可执行文件名字相同，或为<code>main</code>等，但也很可能不符合这一规律，所以需要自行确定，这里我的程序入口就是<code>replace</code>。修改抽取出的入口文件名，增加后缀为 <code>replace.pyc</code>。</p><p>然后执行<code>uncompyle6 replacer.pyc&gt;replacer.py</code>，反编译<code>pyc</code>文件为源代码。这一步你很可能在反编译出的文件中发现类似<code>Unknown magic number 227 in replacer.pyc</code>的错误，这是因为不同Python版本的<code>pyc</code>文件前缀<code>Magic Number</code>不同，我们需要找到对应版本的<code>Magic Number</code>。一种简单的办法是把抽取出的<code>struct</code>文件，也修改为<code>struct.pyc</code>并对其进行反编译，如果能反编译成功，则将其文件前缀应用到<code>replace.pyc</code>中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">od -c struct.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">0000000    3  \r  \r  \n   p   y   i   0 001 001  \0  \0 343  \0  \0  \0</span><br><span class="line">0000020   \0  \0  \0  \0  \0  \0  \0  \0  \0  \b  \0  \0  \0   @  \0  \0</span><br><span class="line">0000040   \0   s   8  \0  \0  \0   d  \0   d 001   d 002   d 003   d 004</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再反观<code>replacer.pyc</code>，明显缺少前缀。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">od -c replacer.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">0000000  343  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">0000020   \0 004  \0  \0  \0   @  \0  \0  \0   s 350  \0  \0  \0   d  \0</span><br><span class="line">0000040    d 001   l  \0   Z  \0   d  \0   d 001   l 001   Z 001   d  \0</span><br></pre></td></tr></table></figure><p>于是我们给<code>replacer.pyc</code>加上合适的<code>Magic Number</code>文件前缀，在这里是<code>3  \r  \r  \n   p   y   i   0 001 001  \0  \0</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim -b replacer.pyc</span><br><span class="line"><span class="comment"># 命令模式输入</span></span><br><span class="line">:%!xxd</span><br><span class="line"><span class="comment"># 显示左侧是16进制，右侧是原文件</span></span><br><span class="line"><span class="comment"># VIM把这些当做普通的字符串对待，所以，修改了左侧的16进制的字符后右侧的字符并不会跟着改变，反之亦然。</span></span><br><span class="line"><span class="comment"># 注意修改完成后,不要保存,要再用 </span></span><br><span class="line">:%!xxd -r</span><br><span class="line"><span class="comment"># 切换成文本状态格式再保存.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式：</span></span><br><span class="line"><span class="comment"># 找到起始位置，例如这里是e300</span></span><br><span class="line"><span class="comment"># 然后同样方式打开 xxx.pyc，把起始位置之前的内容复制到replacer.pyc中左侧。</span></span><br><span class="line"><span class="comment"># 然后 :%!xxd -r 后wq保存。</span></span><br></pre></td></tr></table></figure><p>但笔者的MacOS13进行如上操作后依然无法解析，报错<code>struct.error: unpack requires a buffer of 2 bytes</code>，换用Windows后解决，成功反编译出了<code>replacer</code>的源码。</p><p>PS：添加前缀后报错：<code>Ill-formed bytecode file replacer.pyc &lt;class &#39;ValueError&#39;&gt;; bad marshal data (unknown type code)</code>通常也是由于<code>Magic Number</code>不对，对于python3.8及以上版本打包的可执行文件反编译似乎需要使用pycdc，还没验证。笔者测试了3.6、3.8和3.9打包的可执行文件，3.8和3.9均无法通过上述方法反编译，猜测是3.8后续更新导致。</p><p>PPS：上述<code>.pyc</code>反编译工具的作者也有点难顶啊<a href="https://github.com/rocky/python-uncompyle6/issues/316">😆</a>，另外Pyinstaller的<a href="https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-executables">官方文档</a>有时间也应该读一下。</p><h2 id="在打包时加密程序"><a href="#在打包时加密程序" class="headerlink" title="在打包时加密程序"></a>在打包时加密程序</h2><p>在<code>pyinstaller</code>打包时进行加密，只需要添加参数<code>--key</code>即可，例如<code>pyinstaller -F --noconsole --key 12345 xxx.py</code>。</p><p>Windows上使用这个参数需要安装<code>tinyaes</code>（或<code>pycrypto</code>），这个库需要<code>Microsoft Visual C++</code>，还要去安装<code>Microsoft Visual C++ Build Tools</code>。</p><h2 id="反编译加密的程序（未实践）"><a href="#反编译加密的程序（未实践）" class="headerlink" title="反编译加密的程序（未实践）"></a>反编译加密的程序（未实践）</h2><p>用上面的方法加密后，<code>PYZ-00.pyz_extracted</code>中的文件就被加密了，也就是说仅能反编译出程序入口的源码。</p><h2 id="用Cython加密程序"><a href="#用Cython加密程序" class="headerlink" title="用Cython加密程序"></a>用Cython加密程序</h2><p>待补充，用Mac磕磕绊绊，丧失兴趣了～</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/109266820">https://zhuanlan.zhihu.com/p/109266820</a><br>[2] <a href="https://blog.csdn.net/as604049322/article/details/119834495">https://blog.csdn.net/as604049322/article/details/119834495</a><br>[3] <a href="https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-archives">https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-archives</a><br>[4] <a href="https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-executables">https://pyinstaller.org/en/stable/advanced-topics.html#inspecting-executables</a><br>[5] <a href="https://github.com/WithSecureLabs/python-exe-unpacker">https://github.com/WithSecureLabs/python-exe-unpacker</a><br>[6] <a href="https://blog.csdn.net/qq_15969343/article/details/120001351">https://blog.csdn.net/qq_15969343/article/details/120001351</a><br>[7] <a href="https://github.com/rocky/python-decompile3">https://github.com/rocky/python-decompile3</a><br>[8] <a href="https://github.com/rocky/python-uncompyle6/">https://github.com/rocky/python-uncompyle6/</a><br>[9] <a href="https://blog.csdn.net/Zheng__Huang/article/details/112380221">https://blog.csdn.net/Zheng__Huang/article/details/112380221</a><br>[10] <a href="https://blog.csdn.net/weixin_44222568/article/details/111672799">https://blog.csdn.net/weixin_44222568/article/details/111672799</a><br>[11] <a href="https://www.cnblogs.com/Here-is-SG/p/15885799.html">https://www.cnblogs.com/Here-is-SG/p/15885799.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写了个Python小工具，突然想到防逆向的问题，写篇小文实践一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
    <category term="逆向" scheme="http://silencezheng.top/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>EqualsAndHashCode注解使用注意</title>
    <link href="http://silencezheng.top/2023/08/06/article113/"/>
    <id>http://silencezheng.top/2023/08/06/article113/</id>
    <published>2023-08-06T11:16:30.000Z</published>
    <updated>2023-08-06T11:18:43.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>派生类中@EqualsAndHashCode注解使用的注意事项。</p><p>其实就是派生类什么时候需要显示指定<code>@EqualsAndHashCode(callSuper = true)</code>的问题。<br><span id="more"></span></p><h2 id="重写equals要重写hashCode"><a href="#重写equals要重写hashCode" class="headerlink" title="重写equals要重写hashCode"></a>重写equals要重写hashCode</h2><p>在 Java 中，<code>hashCode()</code> 方法用于计算对象的哈希码，而哈希码在散列数据结构中用于确定对象的存储位置。当使用散列数据结构存储对象时，首先会根据对象的哈希码来确定存储位置，然后使用 <code>equals()</code> 方法来检查是否有碰撞（即两个不同的对象有相同的哈希码）。如果 <code>hashCode()</code> 和 <code>equals()</code> 方法不一致，可能会导致以下问题：</p><ol><li><p>在散列数据结构中查找对象时，可能无法找到预期的对象，因为 <code>hashCode()</code> 不同导致对象存储在不同的位置。</p></li><li><p>当使用对象作为键（key）存储在 <code>HashMap</code> 或 <code>Hashtable</code> 中时，由于哈希码不一致，可能无法正确地查找或删除对应的值（value）。</p></li><li><p>在使用 <code>HashSet</code> 存储对象时，可能会允许重复的对象进入集合，因为 <code>HashSet</code> 使用哈希码来检查对象是否已经存在，而哈希码不同意味着对象不同，即使它们的 <code>equals()</code> 方法返回 <code>true</code>。</p></li></ol><p>为了避免这些问题，在重写 <code>equals()</code> 方法时同时重写 <code>hashCode()</code> 方法，并且要确保两个方法在比较对象是否相等时一致。在重写 <code>hashCode()</code> 方法时，应该确保相等的对象返回相同的哈希码，这样可以保证对象在散列数据结构中能够正确存储和检索。</p><h2 id="EqualsAndHashCode注解的callSuper属性"><a href="#EqualsAndHashCode注解的callSuper属性" class="headerlink" title="@EqualsAndHashCode注解的callSuper属性"></a>@EqualsAndHashCode注解的callSuper属性</h2><p><code>@EqualsAndHashCode</code> 是 Lombok 注解中的一个，用于自动生成 <code>equals()</code> 和 <code>hashCode()</code> 方法。其中，<code>callSuper</code> 属性是一个布尔值，用于指定是否在生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法中调用父类的对应方法。</p><p>默认情况下，<code>callSuper</code> 属性的值为 <code>false</code>，即不调用父类的 <code>equals()</code> 和 <code>hashCode()</code> 方法。这意味着如果一个类继承自另一个类并使用 <code>@EqualsAndHashCode</code> 注解来生成方法，它只会考虑自己的成员变量，不考虑从父类继承的成员变量。</p><p>当 <code>callSuper</code> 属性的值为 <code>true</code> 时，Lombok 会在生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法中调用父类的对应方法。这样做可以确保在比较两个对象是否相等时，除了考虑子类自己的成员变量外，还会考虑父类的成员变量。这对于包含继承关系的类结构是很有用的，因为它保证了在比较对象时考虑了所有继承链上的成员变量。</p><h2 id="派生类需要显示指定-EqualsAndHashCode-callSuper-true"><a href="#派生类需要显示指定-EqualsAndHashCode-callSuper-true" class="headerlink" title="派生类需要显示指定@EqualsAndHashCode(callSuper = true)"></a>派生类需要显示指定@EqualsAndHashCode(callSuper = true)</h2><p>现在来解释为什么在派生类上已经有 <code>@Data</code> 注解时，仍然需要加入 <code>@EqualsAndHashCode(callSuper = true)</code> 注解：</p><ol><li><p>如果在派生类上仅使用 <code>@Data</code> 注解而没有 <code>@EqualsAndHashCode</code> 注解，那么生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法只会考虑派生类自己的成员变量，而不会考虑从父类继承的成员变量。这可能会导致在比较对象时忽略了所包含的父类属性，从而出现错误的结果。</p></li><li><p>如果在派生类上同时使用 <code>@Data</code> 和 <code>@EqualsAndHashCode(callSuper = true)</code> 注解，那么生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法会考虑派生类自己的成员变量，同时也会调用父类的对应方法，确保了继承链上所有成员变量都会被考虑在内。</p></li></ol><p>综上，当派生类需要考虑继承自父类的成员变量时，应该在派生类上使用 <code>@EqualsAndHashCode(callSuper = true)</code> 注解。而如果派生类只需要考虑自己的成员变量，不涉及继承关系，那么可以仅使用 <code>@Data</code> 注解而不添加 <code>@EqualsAndHashCode</code> 注解。</p><h2 id="Lombok全局配置callSuper"><a href="#Lombok全局配置callSuper" class="headerlink" title="Lombok全局配置callSuper"></a>Lombok全局配置callSuper</h2><p>在 Lombok 中，全局配置 <code>callSuper</code> 属性可以通过使用配置文件或在注解处理器的命令行参数中设置。这样可以为整个项目中的所有类统一配置 <code>callSuper</code> 属性的默认值。</p><p>在项目中配置 Lombok 的全局属性有以下两种方法：</p><ol><li>使用 <code>lombok.config</code> 文件：</li></ol><p>在项目的根目录（通常可以放在<code>src/main/java</code>下）下创建一个名为 <code>lombok.config</code> 的文件，并在该文件中添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明该配置文件是一个根配置文件，从该配置文件所在的目录开始扫描</span></span><br><span class="line"><span class="attr">config.stopBubbling</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 全局配置 equalsAndHashCode 的 callSuper 属性为true</span></span><br><span class="line"><span class="attr">lombok.equalsAndHashCode.callSuper</span>=call</span><br></pre></td></tr></table></figure><p>这样，所有使用 <code>@EqualsAndHashCode</code> 注解的类都会自动设置 <code>callSuper</code> 属性为 <code>true</code>，即在生成的 <code>equals()</code> 和 <code>hashCode()</code> 方法中调用父类的对应方法。</p><ol><li>使用注解处理器的命令行参数：</li></ol><p>在构建工具中配置注解处理器的命令行参数，将 <code>lombok.equalsAndHashCode.callSuper</code> 设置为 <code>true</code>。具体方法根据使用的构建工具有所不同：</p><ul><li>对于 Maven，可以在 <code>pom.xml</code> 文件中添加以下配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArg</span>&gt;</span>-Alombok.equalsAndHashCode.callSuper=true<span class="tag">&lt;/<span class="name">compilerArg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意替换 <code>$&#123;lombok.version&#125;</code> 为你使用的 Lombok 版本。</p><ul><li>对于 Gradle，可以在 <code>build.gradle</code> 文件中添加以下配置（不一定对）：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    annotationProcessor <span class="string">&quot;org.projectlombok:lombok:$&#123;lombokVersion&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="keyword">options</span>.compilerArgs &lt;&lt; <span class="string">&quot;-Alombok.equalsAndHashCode.callSuper=true&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意替换 <code>lombokVersion</code> 为你使用的 Lombok 版本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/460297314">https://zhuanlan.zhihu.com/p/460297314</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;派生类中@EqualsAndHashCode注解使用的注意事项。&lt;/p&gt;
&lt;p&gt;其实就是派生类什么时候需要显示指定&lt;code&gt;@EqualsAndHashCode(callSuper = true)&lt;/code&gt;的问题。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Lombok" scheme="http://silencezheng.top/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate--SpringBoot接口调用整合</title>
    <link href="http://silencezheng.top/2023/08/06/article112/"/>
    <id>http://silencezheng.top/2023/08/06/article112/</id>
    <published>2023-08-06T10:48:12.000Z</published>
    <updated>2023-08-06T10:56:05.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot整合RestTemplate实现接口调用入门。</p><span id="more"></span><h2 id="什么是RestTemplate"><a href="#什么是RestTemplate" class="headerlink" title="什么是RestTemplate"></a>什么是RestTemplate</h2><p><code>RestTemplate</code>是Spring框架中提供的用于以同步方式发送HTTP请求和处理HTTP响应的类。它是一个用于访问RESTful服务的模板类，简化了在Java应用程序中进行HTTP通信的过程。</p><p><code>RestTemplate</code>提供了一系列方法来执行HTTP请求，例如GET、POST、PUT、DELETE等，并能够自动将HTTP响应转换为Java对象（如JSON转换为POJO）。它支持各种HTTP协议，如HTTP、HTTPS，并且可以与其他Spring框架组件（如Spring MVC和Spring Boot）无缝集成。</p><p>底层实现上，<code>RestTemplate</code>默认构造函数使用<code>java.net.HttpURLConnection</code>执行请求。用户可以通过实现<code>ClientHttpRequestFactory</code>接口来切换到不同的HTTP库。内置支持以下库：</p><ul><li>Apache HttpComponents</li><li>Netty</li><li>OkHttp</li></ul><h2 id="RestTemplate提供的方法"><a href="#RestTemplate提供的方法" class="headerlink" title="RestTemplate提供的方法"></a>RestTemplate提供的方法</h2><p>RestTemplate 提供高度封装的接口。</p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>getForObject</td><td>通过GET请求获取资源的表示。</td></tr><tr><td>getForEntity</td><td>通过GET请求获取资源的<code>ResponseEntity</code>（包含状态、响应头和响应体）。</td></tr><tr><td>headForHeaders</td><td>通过HEAD请求获取资源的所有头信息。</td></tr><tr><td>postForLocation</td><td>通过POST请求创建新资源，并从响应中返回Location头信息。</td></tr><tr><td>postForObject</td><td>通过POST请求创建新资源，并从响应中返回资源的表示。</td></tr><tr><td>postForEntity</td><td>通过POST请求创建新资源，并从响应中返回资源的<code>ResponseEntity</code>（包含状态、响应头和响应体）。</td></tr><tr><td>put</td><td>通过PUT请求创建或更新资源。</td></tr><tr><td>patchForObject</td><td>通过PATCH请求更新资源，并从响应中返回资源的表示。请注意，JDK HttpURLConnection不支持PATCH，但Apache HttpComponents和其他库支持。</td></tr><tr><td>delete</td><td>通过DELETE请求删除指定URI的资源。</td></tr><tr><td>optionsForAllow</td><td>通过OPTIONS请求获取资源允许的HTTP方法。</td></tr><tr><td>exchange</td><td>通用的（灵活但不局限于特定用途）请求方法，提供额外的灵活性。它接受<code>RequestEntity</code>作为输入，其中包含HTTP方法、URL、头信息和请求体，并返回<code>ResponseEntity</code>。</td></tr><tr><td>execute</td><td>最通用的执行请求的方式，完全控制请求准备和响应提取，通过回调接口实现。</td></tr></tbody></table></div><h2 id="Springboot整合RestTemplate"><a href="#Springboot整合RestTemplate" class="headerlink" title="Springboot整合RestTemplate"></a>Springboot整合RestTemplate</h2><p>分别采用默认方式和Apache HttpComponents进行实践。</p><h3 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h3><p>仅需要：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加配置类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在控制器中加入<code>restTemplate</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br></pre></td></tr></table></figure></p><p>当然也可以在Service中加入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceImpl</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写简单的接口访问代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHttpGetRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;https://api.example.com/data&quot;</span>;</span><br><span class="line">    ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        String responseBody = response.getBody();</span><br><span class="line">        <span class="comment">// 处理响应数据</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误响应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Apache-HttpComponents发送请求"><a href="#Apache-HttpComponents发送请求" class="headerlink" title="Apache HttpComponents发送请求"></a>Apache HttpComponents发送请求</h3><p>Apache HttpComponents是一个开源的Java HTTP库，用于处理HTTP请求和响应。它是Apache软件基金会下的一个项目，提供了一组可重用的组件，可以轻松地在Java应用程序中进行HTTP通信。</p><p>Apache HttpComponents由两个子项目组成：</p><ol><li><p>HttpClient：这是一个完整的HTTP客户端库，用于发送HTTP请求和处理HTTP响应。它提供了一组简单而强大的API，可以执行各种HTTP方法（GET、POST、PUT、DELETE等），设置请求头，处理响应，处理Cookies等。</p></li><li><p>HttpCore：这是一个核心HTTP处理库，为HTTP客户端和服务器提供了低级别的HTTP支持。它定义了HTTP协议的基本元素，如请求、响应、头部、实体等，为客户端和服务器实现提供了基础功能。</p></li></ol><p>添加HttpClient依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在配置文件中写入参数：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http_pool:</span></span><br><span class="line">  <span class="attr">max_total:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">default_max_per_route:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">connect_timeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">connection_request_timeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">socket_timeout:</span> <span class="number">65000</span></span><br><span class="line">  <span class="attr">validate_after_inactivity:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure></p><p>创建HTTP参数类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpValues</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.max_total&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxTotal;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.default_max_per_route&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPerRoute;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.connect_timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> connTimeOut;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.connection_request_timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> connReqTimeOut;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.socket_timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> socketTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;http_pool.validate_after_inactivity&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> inactivity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建配置类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HttpValues appValues;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(httpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个自定义的 ClientHttpRequestFactory Bean。</span></span><br><span class="line"><span class="comment">     * ClientHttpRequestFactory 是 Spring 提供的用于创建 ClientHttpRequest 的工厂接口。</span></span><br><span class="line"><span class="comment">     * 这里使用了基于 Apache HttpComponents 的 HttpComponentsClientHttpRequestFactory 实现。</span></span><br><span class="line"><span class="comment">     * HttpComponentsClientHttpRequestFactory 使用了自定义的 HttpClient 对象来发送 HTTP 请求。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 ClientHttpRequestFactory 对象，用于创建 ClientHttpRequest。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">httpRequestFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个新的 HttpComponentsClientHttpRequestFactory 对象，并传入自定义的 HttpClient。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory(httpClient());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个自定义的 HttpClient Bean。</span></span><br><span class="line"><span class="comment">     * 这个方法使用了连接池来管理 HTTP 连接，提高了性能和效率。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 HttpClient 对象，可以用于发送 HTTP 请求。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpClient <span class="title">httpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Registry，用于管理不同协议的连接工厂。</span></span><br><span class="line">        Registry&lt;ConnectionSocketFactory&gt; registry = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()</span><br><span class="line">                <span class="comment">// 注册 HTTP 协议的连接工厂，使用默认的 PlainConnectionSocketFactory。</span></span><br><span class="line">                .register(<span class="string">&quot;http&quot;</span>, PlainConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                <span class="comment">// 注册 HTTPS 协议的连接工厂，使用默认的 SSLConnectionSocketFactory。</span></span><br><span class="line">                .register(<span class="string">&quot;https&quot;</span>, SSLConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个连接池管理器，用于管理连接的复用和回收。</span></span><br><span class="line">        PoolingHttpClientConnectionManager connectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager(registry);</span><br><span class="line">        <span class="comment">// 设置连接池的最大连接数。</span></span><br><span class="line">        connectionManager.setMaxTotal(appValues.getMaxTotal());</span><br><span class="line">        <span class="comment">// 设置每个路由的最大连接数。</span></span><br><span class="line">        connectionManager.setDefaultMaxPerRoute(appValues.getMaxPerRoute());</span><br><span class="line">        <span class="comment">// 设置连接空闲多长时间后进行验证，避免空闲连接过多占用资源。</span></span><br><span class="line">        connectionManager.setValidateAfterInactivity(appValues.getInactivity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个请求配置对象，用于设置连接超时和读写超时等参数。</span></span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                <span class="comment">// 服务器返回数据的时间，超过该时间将抛出 read timeout 异常。</span></span><br><span class="line">                .setSocketTimeout(appValues.getSocketTimeout())</span><br><span class="line">                <span class="comment">// 连接上服务器的时间，超过该时间将抛出 connect timeout 异常。</span></span><br><span class="line">                .setConnectTimeout(appValues.getConnTimeOut())</span><br><span class="line">                <span class="comment">// 从连接池中获取连接的超时时间，超过该时间将抛出 ConnectionPoolTimeoutException 异常。</span></span><br><span class="line">                .setConnectionRequestTimeout(appValues.getConnReqTimeOut())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 HttpClientBuilder 创建一个 HttpClient 对象，并设置连接池管理器和请求配置。</span></span><br><span class="line">        <span class="keyword">return</span> HttpClientBuilder.create()</span><br><span class="line">                .setDefaultRequestConfig(requestConfig)</span><br><span class="line">                .setConnectionManager(connectionManager)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/students/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Students&gt; <span class="title">getStudentById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">    Students student = studentsService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (student != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果找到学生，返回状态码200 OK和学生对象</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(student);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果未找到学生，返回状态码404 NOT FOUND</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/rest/get/students+1/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">restGetTest</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:48081/students/&quot;</span> + String.valueOf(id+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 这里应该加入异常处理</span></span><br><span class="line">    ResponseEntity&lt;Students&gt; response = restTemplate.getForEntity(url, Students.class);</span><br><span class="line">    <span class="comment">// 获取响应</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        Students responseBody = response.getBody();</span><br><span class="line">        <span class="keyword">if</span> (responseBody!=<span class="keyword">null</span>) <span class="keyword">return</span> ResponseEntity.ok(responseBody.toString());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="string">&quot;Not Found&quot;</span>);</span><br><span class="line">        <span class="comment">// 处理响应数据</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误响应</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;Bad Request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于带路径参数的URL，可以用这种方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">String url = <span class="string">&quot;http://localhost:48081/students/&#123;1&#125;&quot;</span>;</span><br><span class="line">ResponseEntity&lt;Students&gt; response = restTemplate.getForEntity(url, Students.class, id+<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>对于添加请求头、Cookie、文件上传等等更多用法，在使用时查阅、积累即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://docs.spring.io/spring-framework/docs/5.1.9.RELEASE/spring-framework-reference/integration.html#rest-resttemplate">https://docs.spring.io/spring-framework/docs/5.1.9.RELEASE/spring-framework-reference/integration.html#rest-resttemplate</a><br>[2] <a href="https://zhuanlan.zhihu.com/p/258121569">https://zhuanlan.zhihu.com/p/258121569</a><br>[3] <a href="https://www.cnblogs.com/javazhiyin/p/9851775.html">https://www.cnblogs.com/javazhiyin/p/9851775.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Spring Boot整合RestTemplate实现接口调用入门。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MinIO部署--SpringBoot文件存储整合</title>
    <link href="http://silencezheng.top/2023/07/23/article111/"/>
    <id>http://silencezheng.top/2023/07/23/article111/</id>
    <published>2023-07-23T14:36:32.000Z</published>
    <updated>2023-08-06T10:56:18.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MinIO对象存储服务开发机部署与Spring Boot项目整合入门。<br><span id="more"></span></p><h2 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h2><blockquote><p>MinIO 是一个基于 Go 实现的高性能、兼容 S3 协议的对象存储。它采用 GNU AGPL v3 开源协议，项目地址是 <a href="https://github.com/minio/minio，官网是">https://github.com/minio/minio，官网是</a> <a href="https://min.io。">https://min.io。</a></p><p>它适合存储海量的非结构化的数据，例如说图片、音频、视频等常见文件，备份数据、容器、虚拟机镜像等等，小到 1 KB，大到 5 TB 都可以支持。</p></blockquote><h2 id="MinIO的运行模式"><a href="#MinIO的运行模式" class="headerlink" title="MinIO的运行模式"></a>MinIO的运行模式</h2><p>MinIO 支持三种部署拓扑结构：</p><ol><li><p>单节点单驱动<br>Single-Node Single-Drive，也可称为SNSD 或 “Standalone”。</p><p>指具有单个存储卷或文件夹的单个 MinIO 服务器。 SNSD部署提供故障转移保护。驱动器级可靠性和故障转移取决于底层存储卷。SNSD部署最适合使用 MinIO 进行对象存储的应用程序的评估和初始开发。</p></li><li><p>单节点多驱动<br>Single-Node Multi-Drive，也可称为SNMD 或 “Standalone Multi-Drive”。</p><p>指具有四个或更多存储卷的单个 MinIO 服务器。 SNMD部署仅提供驱动器级可靠性和故障转移。</p></li><li><p>多节点多驱动<br>Multi-Node Multi-Drive，也可称为MNMD 或 “Distributed”。</p><p>指分布式 MinIO 服务器，所有服务器上至少有四个驱动器。分布式MNMD拓扑支持具有驱动器和节点级可用性和弹性的生产级对象存储。</p></li></ol><p>作为入门部署，下面仅展示SNSD部署。</p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>参考官方文档：<a href="https://min.io/download">https://min.io/download</a></p><p>仅考虑开发环境，用Docker部署是最方便的，下面是部署过程。</p><p>Docker部署（MacOS arm64）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看minio镜像</span></span><br><span class="line">docker search minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull minio/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地路径</span></span><br><span class="line">mkdir myminio myminio/config myminio/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建环境变量配置文件</span></span><br><span class="line">touch myminio/config/config.env</span><br><span class="line"></span><br><span class="line"><span class="comment"># config.env写入内容如下</span></span><br><span class="line"><span class="comment"># 设置 MinIO 服务器的root账号，此用户具有对部署中的任何资源执行 S3 和管理 API 操作的不受限制的权限。</span></span><br><span class="line">MINIO_ROOT_USER=myminioadmin</span><br><span class="line"><span class="comment"># 至少8位</span></span><br><span class="line">MINIO_ROOT_PASSWORD=minio-secret-key-change-me</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用于 MinIO 服务器的存储路径。</span></span><br><span class="line">MINIO_VOLUMES=<span class="string">&quot;/mnt/data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MINIO_SERVER_URL设置本地机器的主机名以用于 MinIO 服务器</span></span><br><span class="line"><span class="comment"># 取消注释以下行，并将该值替换为本地机器的正确主机名和 MinIO 服务器的端口（默认为 9000）</span></span><br><span class="line"><span class="comment">#MINIO_SERVER_URL=&quot;http://minio.example.net:9000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -dt                                  \</span><br><span class="line">  -p 9000:9000 -p 9090:9090                     \</span><br><span class="line">  -v /path/to/myminio/data:/mnt/data            \</span><br><span class="line">  -v /path/to/myminio/config:/etc               \</span><br><span class="line">  -e <span class="string">&quot;MINIO_CONFIG_ENV_FILE=/etc/config.env&quot;</span>    \</span><br><span class="line">  --name <span class="string">&quot;myminio&quot;</span>                              \</span><br><span class="line">  minio/minio server --console-address <span class="string">&quot;:9090&quot;</span></span><br></pre></td></tr></table></figure></p><p>MinIO中默认配置9000端口是用于访问MinIO的对象存储服务的API端口，通过该端口可以执行各种对象存储相关的操作。而9090端口是用于访问MinIO的管理界面，通过该端口可以登录并执行MinIO实例的管理操作。</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>运行容器成功后，可以通过MinIO的管理界面进行简单配置，访问 <a href="http://localhost:9090">http://localhost:9090</a> 进入管理界面。</p><p><img src="/assets/post_img/article111/shouye.png" alt="首页"></p><p>然后新建存储桶，用于文件上传。点击桶，选择<code>Anonymoous</code>创建一条Prefix为<code>/</code>，Access为<code>readonly</code>的匿名访问规则。</p><p><img src="/assets/post_img/article111/mybucket.png" alt="规则"></p><p>这样配置以后，文件访问地址的格式为<code>http://localhost:9000/mybucket/&#123;filename&#125;</code>。</p><p>另外，MinIO Client (mc) 是 MinIO 提供的命令行工具，用于访问 MinIO Server。它的命令设计的非常棒，和我们在使用 ls、cat、cp、mirror、diff、find 等 Unix 命令基本接近，主要如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>       列出文件和文件夹</span><br><span class="line">mb       创建一个存储桶或一个文件夹</span><br><span class="line"><span class="built_in">cat</span>      显示文件和对象内容</span><br><span class="line">pipe     将一个 STDIN 重定向到一个对象或者文件或者 STDOUT</span><br><span class="line">share    生成用于共享的 URL</span><br><span class="line"><span class="built_in">cp</span>       拷贝文件和对象</span><br><span class="line">mirror   给存储桶和文件夹做镜像</span><br><span class="line">find     基于参数查找文件</span><br><span class="line"><span class="built_in">diff</span>     对两个文件夹或者存储桶比较差异</span><br><span class="line"><span class="built_in">rm</span>       删除文件和对象</span><br><span class="line">events   管理对象通知</span><br><span class="line">watch    监听文件和对象的事件</span><br><span class="line">policy   管理访问策略</span><br><span class="line">session  为 <span class="built_in">cp</span> 命令管理保存的会话</span><br><span class="line">config   管理 mc 配置文件</span><br><span class="line">update   检查软件更新</span><br><span class="line">version  输出版本信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用举例：列出有哪些存储桶</span></span><br><span class="line">mc <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="整合Spring-Boot项目"><a href="#整合Spring-Boot项目" class="headerlink" title="整合Spring Boot项目"></a>整合Spring Boot项目</h2><p>下面在Spring Boot项目引入MinIO相关依赖实现文件的上传与删除的功能。</p><p>引入依赖如下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MinIO 客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>新建 <code>MinIOConfiguration</code> 配置类，创建 <code>MinioClient Bean</code>，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinIOConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MinioClient <span class="title">minioClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Minio 配置。实际项目中，定义到 application.yml 配置文件中</span></span><br><span class="line">        String endpoint = <span class="string">&quot;http://localhost:9000&quot;</span>;</span><br><span class="line">        String accessKey = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        String secretKey = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 MinioClient 客户端</span></span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 <code>MinIOFileController</code> 类，实现文件上传与删除的 RESTful API 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/minio&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;MinIO文件操作接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinIOFileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Minio 配置。实际项目中，定义到 application.yml 配置文件中</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint = <span class="string">&quot;http://127.0.0.1:9000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String bucket = <span class="string">&quot;mybucket&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 上传</span></span><br><span class="line">        String path = UUID.randomUUID().toString(); <span class="comment">// 文件名，使用 UUID 随机</span></span><br><span class="line">        minioClient.putObject(PutObjectArgs.builder()</span><br><span class="line">                .bucket(bucket) <span class="comment">// 存储桶</span></span><br><span class="line">                .object(path) <span class="comment">// 文件名</span></span><br><span class="line">                .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>) <span class="comment">// 文件内容</span></span><br><span class="line">                .contentType(file.getContentType()) <span class="comment">// 文件类型</span></span><br><span class="line">                .build());</span><br><span class="line">        <span class="comment">// 拼接路径</span></span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s/%s/%s&quot;</span>, endpoint, bucket, path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="meta">@RequestParam(&quot;path&quot;)</span> String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        minioClient.removeObject(RemoveObjectArgs.builder()</span><br><span class="line">                .bucket(bucket) <span class="comment">// 存储桶</span></span><br><span class="line">                .object(path) <span class="comment">// 文件名</span></span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开Swagger界面就可以进行接口测试了，上传返回结果示例如下。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">127.0.0.1:9000</span>/mybucket/a<span class="number">72</span>a<span class="number">02</span>c<span class="number">5</span>-<span class="number">4</span>dff-<span class="number">44</span>d<span class="number">8</span>-<span class="number">841</span>b-ad<span class="number">5</span>a<span class="number">3</span>b<span class="number">4</span>c<span class="number">5</span>b<span class="number">71</span></span><br></pre></td></tr></table></figure></p><p>直接浏览器输入地址就可以看到，或者在管理界面查看。</p><p><img src="/assets/post_img/article111/upload.png" alt="上传"></p><p>删除时，以文件路径作为参数输入即可，如<code>a72a02c5-4dff-44d8-841b-ad5a3b4c5b71</code>。</p><h2 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h2><p>如果有上传大文件的需求，在没有配置类的情况下，可以通过配置文件设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">multipart:</span></span><br><span class="line">        <span class="attr">max-file-size:</span> <span class="string">500MB</span></span><br><span class="line">        <span class="attr">max-request-size:</span> <span class="string">500MB</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://min.io/docs/minio/container/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html">https://min.io/docs/minio/container/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html</a><br>[2] <a href="https://www.iocoder.cn/Spring-Boot/MinIO/?yudao">https://www.iocoder.cn/Spring-Boot/MinIO/?yudao</a><br>[3] <a href="https://blog.csdn.net/BThinker/article/details/125412751">https://blog.csdn.net/BThinker/article/details/125412751</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;MinIO对象存储服务开发机部署与Spring Boot项目整合入门。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
    <category term="MinIO" scheme="http://silencezheng.top/tags/MinIO/"/>
    
  </entry>
  
  <entry>
    <title>Git换行符警告排查记录</title>
    <link href="http://silencezheng.top/2023/07/22/article110/"/>
    <id>http://silencezheng.top/2023/07/22/article110/</id>
    <published>2023-07-22T13:26:10.000Z</published>
    <updated>2023-07-22T13:28:10.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Git上传文件的时候提示<code>warning: in the working copy of &#39;xxx&#39;, CRLF will be replaced by LF the next time Git touches it</code><br><span id="more"></span></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p><code>warning: in the working copy of &#39;xxx&#39;, CRLF will be replaced by LF the next time Git touches it</code>表示Git检测到在当前代码库中存在不同的换行符风格，它指出Git在下次处理文件时将替换CRLF（回车+换行）换行符为LF（仅换行）换行符。</p><p>我是在使用Hexo上传时出现该问题的，相关文件为文章对应的index.html，因此可能是hexo生成了CRLF换行的html文件导致。</p><h2 id="检查问题文件"><a href="#检查问题文件" class="headerlink" title="检查问题文件"></a>检查问题文件</h2><p><code>hexo clean</code> 后重新生成页面，检查问题页面如下，未发现问题，都是LF换行的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% od -c index.html</span><br><span class="line"></span><br><span class="line">0000000    &lt;   !   D   O   C   T   Y   P   E       h   t   m   l   &gt;  \n</span><br><span class="line">0000020    &lt;   h   t   m   l   &gt;  \n   &lt;   h   e   a   d   &gt;  \n        </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="检查Git配置"><a href="#检查Git配置" class="headerlink" title="检查Git配置"></a>检查Git配置</h2><p>先在非git目录下检查了全局配置<code>git config --list</code>如下，按道理来说没什么问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">core.autocrlf=input</span><br></pre></td></tr></table></figure><blockquote><p><code>core.autocrlf</code>是Git中的一个配置选项，用于处理跨平台开发时的换行符问题。它用于指定Git在提交和检出文件时是否自动转换换行符的行为。对于多平台协作的项目，特别是在Windows和类Unix系统（如MacOS和Linux）之间进行开发时，配置<code>core.autocrlf</code>可以确保换行符的一致性，避免在版本控制时频繁更改换行符导致的冲突。</p><p><code>core.autocrlf</code>有三个可选值：</p><ol><li><code>true</code>：表示Git会在提交时将CRLF（回车+换行）转换为LF（仅换行），在检出时将LF转换为CRLF。适用于Windows开发者在与类Unix系统的开发者合作时使用。</li><li><code>false</code>：表示Git不会自动转换换行符。适用于在Unix类系统上开发，或者确保文件的换行符保持不变时使用。</li><li><code>input</code>：表示Git会在提交时将CRLF转换为LF，在检出时不做任何转换。适用于在Windows上开发，但在版本库中保留LF换行符的项目。</li></ol></blockquote><p>又到hexo根目录下的<code>.deploy_git</code>查看了，也是一样，这个配置应该不会出什么问题。</p><h2 id="检查Git历史提交"><a href="#检查Git历史提交" class="headerlink" title="检查Git历史提交"></a>检查Git历史提交</h2><p>又继续了解了一下，似乎历史提交中出现过CRLF换行的文件也会显示该警告，于是去查看历史提交记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p -- filename</span><br></pre></td></tr></table></figure><p>翻看记录，出现红色<code>^M</code>则是包含CRLF的地方，看到之前在Windows电脑上配置的Gitalk插件是CRLF格式的。</p><p>遂修改，解决。其实第一步就能解决了，查找的时候忘记直接搜<code>\r</code>了…</p><h2 id="CR和LF"><a href="#CR和LF" class="headerlink" title="CR和LF"></a>CR和LF</h2><p>CR（Carriage Return）和LF（Line Feed）是两个控制字符，通常用于表示文本文件中的行尾。</p><ol><li><p><strong>CR（Carriage Return）</strong>：</p><ul><li>在ASCII码中，CR的值为十进制13或十六进制0x0D。</li><li>CR通常表示为<code>\r</code>。</li><li>在早期的打字机和终端设备中，CR用于将打印头或光标移动到行的开头，以便在新的文本输入开始时覆盖之前的内容。</li><li>在计算机文本中，CR通常用于表示行尾，即在CR之后的内容将从新的一行开始。在某些操作系统中（如Mac OS 9及之前版本），CR被用作行尾符。</li></ul></li><li><p><strong>LF（Line Feed）</strong>：</p><ul><li>在ASCII码中，LF的值为十进制10或十六进制0x0A。</li><li>LF通常表示为<code>\n</code>。</li><li>LF在计算机文本中广泛用于表示行尾，即在LF之后的内容将从新的一行开始。在Unix、Linux和现代Mac OS等操作系统中，LF通常被用作行尾符。</li></ul></li></ol><p>在不同的操作系统和文本编辑器中，对于文本文件的行尾表示方式可能不同：</p><ul><li>Unix/Linux/MacOS使用LF（<code>\n</code>）作为行尾符。</li><li>Windows使用CRLF（<code>\r\n</code>   ）作为行尾符。</li></ul><p>在跨平台开发或处理文本文件时，注意行尾符的差异可能是很重要的。现代的文本编辑器和版本控制系统通常能够识别和处理不同行尾符的文件。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用Git上传文件的时候提示&lt;code&gt;warning: in the working copy of &amp;#39;xxx&amp;#39;, CRLF will be replaced by LF the next time Git touches it&lt;/code&gt;&lt;br&gt;</summary>
    
    
    
    
    <category term="Git" scheme="http://silencezheng.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Lombok常用注解</title>
    <link href="http://silencezheng.top/2023/07/22/article109/"/>
    <id>http://silencezheng.top/2023/07/22/article109/</id>
    <published>2023-07-22T11:24:40.000Z</published>
    <updated>2023-07-22T11:25:51.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整理一些Lombok的常用注解和注意事项（几乎包含所有主流注解了）。</p><span id="more"></span><blockquote><p>Lombok是通过在编译阶段进行字节码增强实现的，它利用Java的注解处理器机制，根据注解生成相应的代码，可以大幅减少 Java 代码的冗余和重复，提高开发效率。</p></blockquote><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p><code>@Data</code> 是 Lombok 提供的一个注解，它是一个组合注解，包含了以下注解的功能：</p><ol><li><code>@Getter</code>：生成属性的 getter 方法。</li><li><code>@Setter</code>：生成属性的 setter 方法。</li><li><code>@ToString</code>：生成 toString 方法，用于输出对象的字符串表示。</li><li><code>@EqualsAndHashCode</code>：生成 equals 和 hashCode 方法，用于对象的比较和哈希计算。</li></ol><p>使用 <code>@Data</code> 注解可以简化 POJO 类的编写。</p><p>以下是使用 <code>@Data</code> 注解的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自Java编译器，隐式无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @Getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @EqualsAndHashCode</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> LombokTest)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LombokTest other = (LombokTest)o;</span><br><span class="line">            <span class="keyword">if</span> (!other.canEqual(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getId() != other.getId()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Object <span class="keyword">this</span>$name = <span class="keyword">this</span>.getName();</span><br><span class="line">                Object other$name = other.getName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (other$name != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$name.equals(other$name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> other <span class="keyword">instanceof</span> LombokTest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> PRIME = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        result = result * <span class="number">59</span> + <span class="keyword">this</span>.getId();</span><br><span class="line">        Object $name = <span class="keyword">this</span>.getName();</span><br><span class="line">        result = result * <span class="number">59</span> + ($name == <span class="keyword">null</span> ? <span class="number">43</span> : $name.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @ToString</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LombokTest(id=&quot;</span> + <span class="keyword">this</span>.getId() + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，<code>@Data</code> 注解会生成所有属性的 getter 和 setter 方法，如果需要对某些属性进行特殊处理，可以使用其他注解，对指定的属性进行定制化配置。</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><p><code>@NoArgsConstructor</code> 是 Lombok 提供的一个注解，用于自动生成无参构造函数。它可以用在类上，表示为该类生成一个无参构造函数。如果类已经包含了其他有参构造函数，使用 <code>@NoArgsConstructor</code> 不会覆盖已有的构造函数。</p><p>以下是使用 <code>@NoArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><p><code>@AllArgsConstructor</code> 是 Lombok 提供的一个注解，用于自动生成包含所有属性的构造函数。它可以用在类上，表示为该类生成一个包含所有属性的构造函数。注意此时类中不可以包含全参构造函数代码。</p><p>以下是使用 <code>@AllArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><p><code>@Builder</code> 是 Lombok 提供的一个注解，用于自动生成构建器模式相关的代码。它可以用在类上，表示为该类生成一个构建器，用于简化创建对象的过程。使用构建器模式可以避免过多的构造函数重载，并提供更灵活的对象创建方式。</p><p>以下是使用 <code>@Builder</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lombok自动产生</span></span><br><span class="line">    LombokTest(<span class="keyword">int</span> id, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LombokTestBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LombokTestBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTestBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        LombokTestBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTestBuilder <span class="title">id</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTestBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTest <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LombokTest(<span class="keyword">this</span>.id, <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;LombokTest.LombokTestBuilder(id=&quot;</span> + <span class="keyword">this</span>.id + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就可以通过构造器模式创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">LombokTest lombokTest = LombokTest.builder().id(<span class="number">1</span>).name(<span class="string">&quot;lombok&quot;</span>).build(); <span class="comment">// 创建LombokTest对象</span></span><br><span class="line">System.out.println(LombokTest.builder().id(<span class="number">1</span>).name(<span class="string">&quot;lombok&quot;</span>)); <span class="comment">// LombokTest.LombokTestBuilder(id=1, name=lombok)</span></span><br></pre></td></tr></table></figure><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h2><p>将<code>@NonNull</code>注解放在属性上，表示该属性不能为<code>null</code>，否则会在运行时抛出<code>NullPointerException</code>。</p><p>以下是使用 <code>@NonNull</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但注意这里将 <code>@NonNull</code> 注解用于<code>primitive</code>是无意义的，原始类型本身就不能是<code>null</code>。</p><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h2><p>将<code>@RequiredArgsConstructor</code>注解放在类上，它会生成一个包含所有标记了<code>@NonNull</code>注解的属性的构造函数。</p><p>以下是使用 <code>@RequiredArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String aString;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Double aDouble;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> String aString;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> Double aDouble;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="meta">@NonNull</span> String aString, <span class="meta">@NonNull</span> Double aDouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aString == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;aString is marked non-null but is null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aDouble == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;aDouble is marked non-null but is null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.aString = aString;</span><br><span class="line">            <span class="keyword">this</span>.aDouble = aDouble;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h2><p>将<code>@SneakyThrows</code>注解放在方法上，它会自动将受检异常转换为非受检异常抛出，避免在代码中显式地处理受检异常。</p><p>以下是使用 <code>@RequiredArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里抛出了一个受检异常，但是不需要显式地处理它</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果不使用该注解，通常我们需要如此处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 这里抛出了一个受检异常，需要显式地处理它</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example();</span><br><span class="line">        example.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于受检异常和非受检异常：</p><blockquote><p><code>java.lang.Throwable</code>是Java中所有错误和异常的根类。它是一个类层次结构的顶层类，表示可以被抛出的任何问题，包括错误（<code>Error</code>）和异常（<code>Exception</code>）。</p><p><code>Throwable</code>类包含以下几个重要的子类：</p><ol><li><p><code>Error</code>: 表示严重的系统错误，通常由Java虚拟机（JVM）报告，例如<code>OutOfMemoryError</code>、<code>StackOverflowError</code>等。<code>Error</code>类的实例通常表示不可恢复的错误情况，应用程序通常不应该捕获和处理<code>Error</code>。</p></li><li><p><code>Exception</code>: 表示可被捕获和处理的异常。<code>Exception</code>类又分为两类：</p><ul><li><p>受检异常（Checked Exception）：继承自<code>Exception</code>的子类，但不继承自<code>RuntimeException</code>的异常。受检异常在方法签名中必须显式地声明，或者在方法内部捕获和处理，否则编译器会报错。例如，<code>IOException</code>、<code>SQLException</code>等属于受检异常。</p></li><li><p>非受检异常（Unchecked Exception）：继承自<code>RuntimeException</code>的异常。非受检异常不需要在方法签名中显式地声明，也可以不在方法内部捕获和处理。通常是由程序编程错误引起的，例如<code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>等。</p></li></ul></li></ol><p><code>Throwable</code>类定义了以下一些重要的方法：</p><ul><li><code>getMessage()</code>: 获取关于异常的详细信息。</li><li><code>toString()</code>: 返回异常的字符串表示，包括异常的类名和详细信息。</li><li><code>printStackTrace()</code>: 在控制台打印异常的堆栈跟踪信息，用于调试和错误定位。</li><li><code>getCause()</code>: 获取导致当前异常的原因（即导致当前异常抛出的其他异常）。</li></ul><p><code>Throwable</code>类的子类可以通过继承它的方法和添加自己的方法来定义特定类型的错误和异常。</p></blockquote><h2 id="其他一些注解"><a href="#其他一些注解" class="headerlink" title="其他一些注解"></a>其他一些注解</h2><p><code>@Cleanup</code>：将<code>@Cleanup</code>注解放在需要进行资源关闭的属性上，它会自动生成资源的关闭代码，用于简化资源管理，特别是对于实现<code>java.io.Closeable</code>接口的资源。</p><p><code>@Getter(lazy = true)</code>：将<code>@Getter(lazy = true)</code>注解放在属性上，它会生成属性的懒加载 getter 方法，在第一次调用该方法时才会计算并返回属性的值。</p><p>还有一些日志相关的注解，等写Java日志框架时再一并写了吧。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;整理一些Lombok的常用注解和注意事项（几乎包含所有主流注解了）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Lombok" scheme="http://silencezheng.top/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Nginx使用入门</title>
    <link href="http://silencezheng.top/2023/07/14/article108/"/>
    <id>http://silencezheng.top/2023/07/14/article108/</id>
    <published>2023-07-14T15:43:40.000Z</published>
    <updated>2023-07-23T02:40:55.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx使用入门，让你的闲置云服务器用起来～</p><span id="more"></span><h2 id="Nginx能干什么？"><a href="#Nginx能干什么？" class="headerlink" title="Nginx能干什么？"></a>Nginx能干什么？</h2><p>Nginx是一款开源的高性能Web服务器和反向代理服务器，具有以下主要功能：</p><ol><li><p><strong>Web服务器</strong>：Nginx可以作为一个独立的Web服务器来提供静态内容和动态内容的服务。它支持处理HTTP、HTTPS、HTTP/2和WebSocket等协议，具有高并发处理能力和低资源消耗。</p></li><li><p><strong>反向代理</strong>：Nginx作为反向代理服务器，可以接收客户端请求并将其转发到后端的多个服务器，起到负载均衡和高可用性的作用。它能够智能地分配请求负载，提供更好的性能和可靠性。</p></li><li><p><strong>负载均衡</strong>：Nginx能够在多个后端服务器之间分发请求，实现负载均衡。通过智能地将请求分配给不同的服务器，可以提高系统的整体性能和可伸缩性。</p></li><li><p><strong>HTTP缓存</strong>：Nginx支持对静态和动态内容进行缓存，减少对后端服务器的请求，提高响应速度和吞吐量。它可以根据设置的缓存规则，缓存经常访问的内容，并提供快速的响应。</p></li><li><p><strong>安全性</strong>：Nginx具有内置的安全功能，如反向代理防御（Reverse Proxy Defense）和请求限制（Rate Limiting），以保护网站免受恶意请求和DDoS攻击。</p></li><li><p><strong>SSL/TLS加密</strong>：Nginx支持SSL/TLS协议，可以进行安全的加密通信，并提供HTTPS协议的支持。它可以配置和管理证书，实现安全的数据传输。</p></li><li><p><strong>动态模块</strong>：Nginx支持模块化的架构，可以通过添加第三方模块扩展其功能。这使得Nginx具有更多的扩展性和灵活性，可以根据具体需求进行定制和配置。</p></li></ol><p>本文先从最常用的Web服务器开始。</p><h2 id="基于Docker部署Nginx"><a href="#基于Docker部署Nginx" class="headerlink" title="基于Docker部署Nginx"></a>基于Docker部署Nginx</h2><p>通过Docker部署Nginx对于我们的学习更方便，也提供了更好的隔离性。下面是通过docker启动Nginx的大致操作流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p local_port:container_port \</span><br><span class="line"><span class="comment"># 挂载配置文件</span></span><br><span class="line">-v /path/to/mynginx/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line"><span class="comment"># 挂载目标目录</span></span><br><span class="line">-v /path/to/projects:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:port/target</span><br></pre></td></tr></table></figure><h2 id="Web服务器应用举例"><a href="#Web服务器应用举例" class="headerlink" title="Web服务器应用举例"></a>Web服务器应用举例</h2><p>下面，基于上述基本流程，我们来实现一些Web服务器的实例。</p><p>省略拉取镜像～</p><h3 id="1-图床"><a href="#1-图床" class="headerlink" title="1. 图床"></a>1. 图床</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/img_host/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/img_host/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line"></span><br><span class="line">    worker_processes 1; <span class="comment"># 应该使用多少个worker进程来处理请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事件处理器配置</span></span><br><span class="line">    events &#123;</span><br><span class="line">        worker_connections 1024; <span class="comment"># 每个worker进程可以处理的最大并发连接数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局HTTP服务器配置</span></span><br><span class="line">    http &#123;</span><br><span class="line">        include mime.types;</span><br><span class="line">        default_type application/octet-stream; <span class="comment"># 默认的MIME类型</span></span><br><span class="line">        sendfile on; <span class="comment"># 可以直接将文件从磁盘复制到网络套接字</span></span><br><span class="line">        keepalive_timeout  65; <span class="comment"># 空闲的持久连接将在65秒后关闭</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># images server</span></span><br><span class="line">        server &#123;</span><br><span class="line">            listen       82;</span><br><span class="line">            server_name  ip_or_domain;</span><br><span class="line"></span><br><span class="line">            location /images/ &#123;</span><br><span class="line">                <span class="built_in">alias</span> /home/images/; <span class="comment"># 表示将URL中的 /images/替换为的实际路径</span></span><br><span class="line">                expires max; <span class="comment"># 对这些图片文件的缓存过期时间为最大值，即永不过期。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p 82:82 \</span><br><span class="line">-v /path/to/mynginx/img_host/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /path/to/images/:/home/images/ \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:82/images/pic.jpg</span><br></pre></td></tr></table></figure><h3 id="2-文件服务器"><a href="#2-文件服务器" class="headerlink" title="2. 文件服务器"></a>2. 文件服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/file_server/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/file_server/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line"></span><br><span class="line">    worker_processes 1; <span class="comment"># 应该使用多少个worker进程来处理请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事件处理器配置</span></span><br><span class="line">    events &#123;</span><br><span class="line">        worker_connections 1024; <span class="comment"># 每个worker进程可以处理的最大并发连接数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局HTTP服务器配置</span></span><br><span class="line">    http &#123;</span><br><span class="line">        server &#123;</span><br><span class="line">            listen 82;  <span class="comment"># 监听的端口号</span></span><br><span class="line">            server_name ip_or_domain;  <span class="comment"># 服务器域名或IP地址</span></span><br><span class="line"></span><br><span class="line">            location / &#123; <span class="comment"># 这里需要注意，分配其他前缀时，采用root的路径后要加上该前缀，建议用alias</span></span><br><span class="line">                root /path/to/files/;  <span class="comment"># 文件根目录的绝对路径</span></span><br><span class="line">                <span class="comment"># or alias /path/to/files/, 直接从 ip:82/ 可进入</span></span><br><span class="line">                autoindex on;  <span class="comment"># 启用目录列表功能</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p 82:82 \</span><br><span class="line">-v /path/to/mynginx/file_server/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /path/to/files/:/path/to/files/ \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:82/path/to/files/</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>使用alias时目录名后面一定要加<code>/</code>。</li><li>一般情况下，在<code>location /</code>中配置root，在<code>location /other</code>中配置alias。</li></ol><h3 id="3-Web应用部署"><a href="#3-Web应用部署" class="headerlink" title="3. Web应用部署"></a>3. Web应用部署</h3><p>一样的逻辑，这里只提供一个配置文件参考：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件处理器配置</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP服务器配置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;     <span class="comment"># 设置允许压缩的页面最小字节数</span></span><br><span class="line">    gzip_buffers 4 16k;     <span class="comment"># 用来存储 gzip 的压缩结果</span></span><br><span class="line">    gzip_http_version 1.1;  <span class="comment"># 识别 HTTP 协议版本</span></span><br><span class="line">    gzip_comp_level 2;      <span class="comment"># 设置 gzip 的压缩比 1-9。1 压缩比最小但最快，而 9 相反</span></span><br><span class="line">    gzip_types gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; <span class="comment"># 指定压缩类型</span></span><br><span class="line">    gzip_proxied any;       <span class="comment"># 无论后端服务器的 headers 头返回什么信息，都无条件启用压缩</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端静态文件服务器</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        root /path/to/frontend/dist;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后端API代理</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name api.example.com;</span><br><span class="line"></span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            proxy_pass http://ip:port/api/; <span class="comment">## proxy_pass 需要设置为后端项目所在服务器的 IP</span></span><br><span class="line">            <span class="comment"># 设置代理请求的头信息，以便在转发请求时传递给后端服务器</span></span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>; <span class="comment"># 设置代理请求的Host头，将其设置为与客户端请求中的Host头一致</span></span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>; <span class="comment"># 将客户端真实IP地址作为X-Real-IP头发送给后端服务器</span></span><br><span class="line">            proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>; <span class="comment"># 将客户端IP地址作为REMOTE-HOST头发送给后端服务器</span></span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; <span class="comment"># 将客户端IP地址添加到X-Forwarded-For头中，以便后端服务器可以了解请求的真实客户端IP地址。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Nginx使用入门，让你的闲置云服务器用起来～&lt;/p&gt;</summary>
    
    
    
    
    <category term="Nginx" scheme="http://silencezheng.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git代码合并</title>
    <link href="http://silencezheng.top/2023/07/01/article107/"/>
    <id>http://silencezheng.top/2023/07/01/article107/</id>
    <published>2023-07-01T11:40:45.000Z</published>
    <updated>2023-07-15T09:42:26.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期有多端办公的需求，实操一下代码合并。</p><p>结合IDEA的Git工具更加方便。<br><span id="more"></span></p><h2 id="本地仓库合并"><a href="#本地仓库合并" class="headerlink" title="本地仓库合并"></a>本地仓库合并</h2><p>要合并两个<strong>本地</strong>的 Git 仓库，可以按照以下步骤进行操作：</p><p>1、 进入第一个仓库的目录。</p><p>2、 添加第二个仓库为远程仓库（仓库名可以取任意，与当前仓库有区分即可）：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;远程仓库名称&gt; &lt;第二个仓库的路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git remote add another /path/to/another</span></span><br></pre></td></tr></table></figure></p><p>3、 从远程仓库获取所有最新的提交历史和分支信息：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br></pre></td></tr></table></figure></p><p>4、 查看远程仓库的分支：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></p><p>5、 将远程仓库的代码合并到本地仓库的当前分支：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;远程仓库名称&gt;/&lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git merge another/&lt;brach&gt;</span></span><br></pre></td></tr></table></figure></p><p>   这将把第二个仓库的代码变更合并到当前分支。当然，这一步可以用IDE提供的Git面板进行操作。</p><p>6、 解决可能出现的冲突：<br>   如果两个仓库之间存在冲突，你需要手动解决冲突。Git 会在代码合并过程中标记冲突的部分，你可以使用文本编辑器打开相应的文件并手动编辑以解决冲突。可以用IDE提供的Git面板进行操作，更加方便。</p><p>7、 提交合并后的代码变更：<br>   <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;<span class="keyword">Merge</span> another <span class="keyword">into</span> origin<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></p><p>   这将提交合并后的代码变更。</p><p>通过上述步骤，可以将两个本地的 Git 仓库进行合并。请确保在操作前备份仓库数据，以免意外丢失代码。</p><h2 id="远端仓库合并"><a href="#远端仓库合并" class="headerlink" title="远端仓库合并"></a>远端仓库合并</h2><p>一样的方式，只是远端仓库可能有固定的仓库名，把本地地址替换为url即可。</p><h2 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h2><p>Pull操作等于Fetch + Merge，如果已经确认过远端分支信息，可以直接Pull对应分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git pull another &lt;brach&gt;</span></span><br></pre></td></tr></table></figure><br>这将从远端仓库中获取最新的代码变更并合并到本地当前分支。</p><p>如果出现分歧，可能会报错：<code>fatal: Need to specify how to reconcile divergent branches.</code>，此时需要解决冲突或确认合并策略。</p><h2 id="将远程分支添加到本地并创建一个新的本地分支"><a href="#将远程分支添加到本地并创建一个新的本地分支" class="headerlink" title="将远程分支添加到本地并创建一个新的本地分支"></a>将远程分支添加到本地并创建一个新的本地分支</h2><p>注意执行后切换到新的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt; &lt;remote-name&gt;/&lt;remote-branch-name&gt;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期有多端办公的需求，实操一下代码合并。&lt;/p&gt;
&lt;p&gt;结合IDEA的Git工具更加方便。&lt;br&gt;</summary>
    
    
    
    
    <category term="Git" scheme="http://silencezheng.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>服务器sshd自动关闭问题排查记录</title>
    <link href="http://silencezheng.top/2023/07/01/article106/"/>
    <id>http://silencezheng.top/2023/07/01/article106/</id>
    <published>2023-07-01T08:29:36.000Z</published>
    <updated>2023-07-01T08:34:53.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>服务器的sshd服务在经过多次连接后出现自动关闭的情况，遂进行排查，记录过程。</p><span id="more"></span><h2 id="1-排查sshd日志"><a href="#1-排查sshd日志" class="headerlink" title="1. 排查sshd日志"></a>1. 排查sshd日志</h2><p><code>/var/log/secure</code> — 包含验证和授权方面信息，sshd会将所有信息记录（其中包括失败登录）在这里。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos polkitd[<span class="number">672</span>]: Registered Authentication Agent for unix-process:<span class="number">13867</span>:<span class="number">17282775</span> (system bus name :<span class="number">1</span>.<span class="number">29528</span><span class="meta"> [/usr/bin/pkttyagent --notify-fd 5 --fallback], object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8)</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos sshd[13873]: Server listening on 0.0.0.0 port 22.</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos sshd[13873]: Server listening on :: port 22.</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos polkitd[672]: Unregistered Authentication Agent for unix-process:13867:17282775 (system bus name :1.29528, object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8) (disconnected from bus)</span></span><br><span class="line"><span class="meta">Jun 29 09:29:50 centos sshd[14173]: Connection closed by ip port 37721 [preauth]</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: Accepted password for root from ip port <span class="number">25638</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: Accepted password for root from ip port <span class="number">25844</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo:    root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/sbin/service sshd stop</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo: pam_unix(sudo:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo: pam_unix(sudo:session): session closed for user root</span><br></pre></td></tr></table></figure><p>可以看到有一个sudo命令被执行，通过<code>/sbin/service sshd stop</code>来停止sshd服务。日志显示命令是由root用户执行的，并且sudo会话在执行命令后立即关闭。可能有其他的进程或脚本在后台运行，调用了该sudo命令来停止sshd服务。</p><h2 id="2-排查系统日志"><a href="#2-排查系统日志" class="headerlink" title="2. 排查系统日志"></a>2. 排查系统日志</h2><p>为了搞清楚是什么命令停止了sshd服务，排查<code>/var/log/messages</code>，一般包括整体系统信息，以及cron、daemon等等。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos systemd: Starting OpenSSH server daemon...</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos systemd: <span class="literal">Started</span> OpenSSH server daemon.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">26</span>:<span class="number">01</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14452</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">...</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14477</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd-logind: New session <span class="number">14477</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]: [system] Activating service <span class="attr">name=</span>&#x27;org.freedesktop.problems&#x27; (using servicehelper)</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14478</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos systemd-logind: New session <span class="number">14478</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: sshd.service: main process exited, <span class="attr">code=</span>killed, <span class="attr">status=</span><span class="number">9</span>/KILL</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: Unit sshd.service entered failed state.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: sshd.service failed.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: <span class="literal">Stopped</span> OpenSSH server daemon.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: <span class="literal">Started</span> Session c291 of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd-logind: Removed session <span class="number">14478</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">28</span> centos systemd-logind: Removed session <span class="number">14477</span>.</span><br></pre></td></tr></table></figure><p>日志表明<code>sshd.service</code>服务的主进程被终止，最终导致了OpenSSH守护进程的停止。但看不出具体是什么脚本。</p><h2 id="3-排查journalctl"><a href="#3-排查journalctl" class="headerlink" title="3. 排查journalctl"></a>3. 排查journalctl</h2><p>journalctl 是 systemd-journald 服务的一部分，用于管理和检索系统日志。它使用二进制日志格式（Binary Log Format），可以包含比传统日志文件更详细的信息</p><p>查看指定时间区间的日志：<code>journalctl --since &quot;2023-06-29 09:25:55&quot; --until &quot;2023-06-29 09:30:28&quot;</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> centos systemd[<span class="number">1</span>]: Started Session <span class="number">14475</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: Accepted password for root from ip port <span class="number">25638</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd[<span class="number">1</span>]: Started Session <span class="number">14477</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd-logind[<span class="number">673</span>]: New session <span class="number">14477</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]:<span class="meta"> [system] Activating service name=&#x27;org.freedesktop.problems&#x27; (using servicehelper)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:11 centos dbus[663]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: Accepted password for root from ip port 25844 ssh2</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: pam_unix(sshd:session): session opened for user root by (uid=0)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos systemd[1]: Started Session 14478 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos systemd-logind[673]: New session 14478 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: sshd.service: main process exited, code=killed, status=9/KILL</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Unit sshd.service entered failed state.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: sshd.service failed.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Stopped OpenSSH server daemon.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]:     root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/sbin/service sshd stop</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]: pam_unix(sudo:session): session opened for user root by (uid=0)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Started Session c291 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]: pam_unix(sudo:session): session closed for user root</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd-logind[673]: Removed session 14478.</span></span><br></pre></td></tr></table></figure><p>看起来唯一像问题的就是：<code>sshd[14512]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</code></p><h2 id="4-问题查找"><a href="#4-问题查找" class="headerlink" title="4. 问题查找"></a>4. 问题查找</h2><p>依据发现问题的日志，找到问题原因可能是“用户的默认 Shell 被修改”。</p><p>通过<code>cat /etc/passwd | grep usr</code>查看，例如查看<code>root</code>输出：<code>root:x:0:0:root:/root:/bin/bash</code>则表示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root：登录名，即用户名。</span><br><span class="line">x：密码占位符，实际密码存储在 <span class="regexp">/etc/</span>shadow 文件中。</span><br><span class="line"><span class="number">0</span>：用户 ID (UID)，表示 root 用户的特殊标识符，<span class="number">0</span> 是超级用户的标识符。</span><br><span class="line"><span class="number">0</span>：组 ID (GID)，表示 root 用户所属的主要组的标识符。</span><br><span class="line">root：用户全名或注释字段，通常为用户的真实姓名。</span><br><span class="line">/root：主目录，表示 root 用户的主要工作目录。</span><br><span class="line"><span class="regexp">/bin/</span>bash：登录 shell，表示用户登录时所使用的默认命令解释器。</span><br></pre></td></tr></table></figure><p>但我排查过后，也不是这个问题。下一步应该继续排查<code>/var/log/btmp</code>，先搁置了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/213/37925">腾讯云手册</a><br>[2] <a href="https://www.cnblogs.com/sunsky303/p/8862040.html">https://www.cnblogs.com/sunsky303/p/8862040.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;服务器的sshd服务在经过多次连接后出现自动关闭的情况，遂进行排查，记录过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://silencezheng.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven多模块项目结构实践</title>
    <link href="http://silencezheng.top/2023/06/30/article105/"/>
    <id>http://silencezheng.top/2023/06/30/article105/</id>
    <published>2023-06-30T14:10:56.000Z</published>
    <updated>2023-06-30T14:12:20.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多Maven Module的项目结构，实践一下。</p><span id="more"></span><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>基本上来说，我们希望构建的项目结构是这样的：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">my-project</span><br><span class="line">├── pom<span class="selector-class">.xml</span></span><br><span class="line">├── bom</span><br><span class="line">│   ├── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-app</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.myapp</span></span><br><span class="line">│   │       │       └── MyAppApplication<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── application<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-module1</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module1</span></span><br><span class="line">│   │       │       └── Module1Class1<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── module1<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-module2</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module2</span></span><br><span class="line">│   │       │       └── Module2Class1<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── module2<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">└── my-module3</span><br><span class="line">    ├── <span class="attribute">src</span></span><br><span class="line">    │   └── <span class="selector-tag">main</span></span><br><span class="line">    │       ├── java</span><br><span class="line">    │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module3</span></span><br><span class="line">    │       │       └── Module3Class1<span class="selector-class">.java</span></span><br><span class="line">    │       └── resources</span><br><span class="line">    │           └── module3<span class="selector-class">.properties</span></span><br><span class="line">    └── pom.xml</span><br></pre></td></tr></table></figure></p><p>其中，<code>MyAppApplication.java</code>是程序入口，bom下存放的是BOM（Bill of Materials）。</p><blockquote><p>BOM（Bill of Materials）是由Maven提供的功能,它通过定义一整套相互兼容的jar包版本集合，使用时只需要依赖该BOM文件，即可放心的使用需要的依赖jar包，且无需再指定版本号。BOM的维护方负责版本升级，并保证BOM中定义的jar包版本之间的兼容性。</p><p>BOM本质上是一个普通的POM文件，区别是对于使用方而言，生效的只有<code>&lt;dependencyManagement&gt;</code>这一个部分。只需要在<code>&lt;dependencyManagement&gt;</code>定义对外发布的客户端版本即可。</p></blockquote><p>在这种项目结构中，主项目（my-project）作为父模块，包含了所有子模块（my-app、my-module1、my-module2、my-module3…）。每个子模块都有自己的源代码目录（src/main/java）和资源目录（src/main/resources），并且每个子模块都有自己的 pom.xml 文件来定义其依赖和配置。</p><p>下面我们开始逐步构建项目。</p><h2 id="1-构建初始项目结构"><a href="#1-构建初始项目结构" class="headerlink" title="1. 构建初始项目结构"></a>1. 构建初始项目结构</h2><p>新建Maven父项目，并在根目录下新建三个Maven Module，分别为<code>bom、myapp、myappmodule1</code>。</p><h2 id="2-编写BOM"><a href="#2-编写BOM" class="headerlink" title="2. 编写BOM"></a>2. 编写BOM</h2><p>定义BOM如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archetype - bom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>基础 bom 文件，管理整个项目的依赖版本<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.0-snapshot<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-j.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql-connector-j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-编写父项目POM"><a href="#3-编写父项目POM" class="headerlink" title="3. 编写父项目POM"></a>3. 编写父项目POM</h2><p>引入BOM。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archetype - multi-maven-module<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>多模块Maven项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Server 主项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 各种 module 拓展 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.0-snapshot<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  这里选8是因为Maven兼容性问题，本来要上17但是还需要换Maven  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-compiler-plugin.version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">maven-compiler-plugin.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 对多模块项目结构似乎是必须的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注意编码很重要，否则可能导致MojoExecutionException --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用 aliyun 的 Maven 源，提升下载速度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-编写程序入口POM"><a href="#4-编写程序入口POM" class="headerlink" title="4. 编写程序入口POM"></a>4. 编写程序入口POM</h2><p>这里不需要再指定java版本和包版本了。如果需要使用不同于当前bom中所维护的jar包版本，则加上<code>&lt;version&gt;</code>覆盖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置构建的 jar 包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 如果 spring.boot.version 版本修改，则这里也要跟着修改 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> <span class="comment">&lt;!-- 将引入的 jar 打入其中 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="5-编写模块POM"><a href="#5-编写模块POM" class="headerlink" title="5. 编写模块POM"></a>5. 编写模块POM</h2><p>提供一个示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="6-打包"><a href="#6-打包" class="headerlink" title="6. 打包"></a>6. 打包</h2><p>随便找个表用MyBatisX生成代码，然后运行通过后就可以打包了：<code>mvn clean package -Dmaven.test.skip=true</code>。</p><p><img src="/assets/post_img/article105/directory-structure.png" alt="ds"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;多Maven Module的项目结构，实践一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Maven" scheme="http://silencezheng.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis快速入门</title>
    <link href="http://silencezheng.top/2023/06/18/article104/"/>
    <id>http://silencezheng.top/2023/06/18/article104/</id>
    <published>2023-06-18T05:10:01.000Z</published>
    <updated>2023-06-18T05:13:24.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>攒一个MyBatis快速入门，MP用的多，但对于MyBatis还不够了解，学习之。</p><p>写了两个Demo，分别是不用框架和用Spring。<br><span id="more"></span></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MyBatis 是一款持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录。</p><p>下面以两个示例演示如何构建基于MyBatis的应用。</p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>假设有一个学生表（students），包含以下字段：</p><ul><li>id (主键，自增)</li><li>name (学生姓名)</li><li>age (学生年龄)</li><li>grade (学生年级)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> author: SilenceZheng66</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  grade <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, age, grade) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Alice&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Grade 10&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;Grade 11&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;Grade 9&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1、不用框架构建基于MyBatis的应用"><a href="#1、不用框架构建基于MyBatis的应用" class="headerlink" title="1、不用框架构建基于MyBatis的应用"></a>1、不用框架构建基于MyBatis的应用</h2><h3 id="1-安装MyBatis"><a href="#1-安装MyBatis" class="headerlink" title="1. 安装MyBatis"></a>1. 安装MyBatis</h3><p><a href="https://github.com/mybatis/mybatis-3/releases">下载</a>MyBatis的jar包并放置于类路径中。此外还需要mysql-connector-java。</p><h3 id="2-编写MyBatis配置文件-mybatis-config-xml"><a href="#2-编写MyBatis配置文件-mybatis-config-xml" class="headerlink" title="2. 编写MyBatis配置文件 mybatis-config.xml"></a>2. 编写MyBatis配置文件 mybatis-config.xml</h3><p>当使用MyBatis框架时，如果将配置文件命名为<code>mybatis-config.xml</code>，那么MyBatis会默认去加载这个文件作为配置文件。否则需要在代码中显式指定配置文件的名称，通过<code>SqlSessionFactoryBuilder</code>的build方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- XML 文件的声明部分，指定了 XML 的版本和编码方式。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- DTD（文档类型定义）声明，指定了 MyBatis 配置文件的格式和规范。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根元素，表示 MyBatis 的配置文件的起始点。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义了环境配置，其中 default 属性指定了默认的环境。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义了一个环境，其中 id 属性指定了环境的唯一标识。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定事务管理器的类型为 JDBC，表示使用 JDBC 进行事务管理。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定数据源的类型为 POOLED，表示使用连接池管理数据库连接。MyBatis框架内部包含一个简单的连接池实现。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库驱动的类名。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库的 URL。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myuser&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mypassword&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义一个或多个映射器（Mapper）配置。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定了映射器配置文件的路径，其中 resource 属性值为相对于配置文件的路径。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-编写映射文件-StudentMapper-xml"><a href="#3-编写映射文件-StudentMapper-xml" class="headerlink" title="3. 编写映射文件 StudentMapper.xml"></a>3. 编写映射文件 StudentMapper.xml</h3><p>简单的查找。注意配置文件通常放在<code>resources</code>目录下，例如<code>src/main/resources</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mybatis.simple.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;mybatis.simple.Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="4-编写实体类-Student-java"><a href="#4-编写实体类-Student-java" class="headerlink" title="4. 编写实体类 Student.java"></a>4. 编写实体类 Student.java</h3><p>用了一下Lombok，也加进类路径就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, grade=&quot;</span> + grade + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-编写数据访问接口-StudentMapper"><a href="#5-编写数据访问接口-StudentMapper" class="headerlink" title="5. 编写数据访问接口 StudentMapper"></a>5. 编写数据访问接口 StudentMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-编写数据访问接口实现类"><a href="#6-编写数据访问接口实现类" class="headerlink" title="6. 编写数据访问接口实现类"></a>6. 编写数据访问接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMapperImpl</span> <span class="keyword">implements</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentMapperImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            StudentMapper mapper = session.getMapper(StudentMapper.class);</span><br><span class="line">            <span class="keyword">return</span> mapper.getAllStudents();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-编写主程序"><a href="#7-编写主程序" class="headerlink" title="7. 编写主程序"></a>7. 编写主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 加载 MyBatis 配置文件</span></span><br><span class="line">    String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 StudentMapper 对象</span></span><br><span class="line">    StudentMapper studentMapper = <span class="keyword">new</span> StudentMapperImpl(sqlSessionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用方法获取所有学生信息</span></span><br><span class="line">    List&lt;Student&gt; students = studentMapper.getAllStudents();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印学生信息</span></span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">      System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Student [id=<span class="number">1</span>, name=Alice, age=<span class="number">18</span>, grade=Grade <span class="number">10</span>]</span><br><span class="line">Student [id=<span class="number">2</span>, name=Bob, age=<span class="number">17</span>, grade=Grade <span class="number">11</span>]</span><br><span class="line">Student [id=<span class="number">3</span>, name=Charlie, age=<span class="number">16</span>, grade=Grade <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="2、-用Spring-Boot构建基于MyBatis的应用"><a href="#2、-用Spring-Boot构建基于MyBatis的应用" class="headerlink" title="2、 用Spring Boot构建基于MyBatis的应用"></a>2、 用Spring Boot构建基于MyBatis的应用</h2><p>从一个空Maven项目开始。</p><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在-application-properties-配置数据库"><a href="#2-在-application-properties-配置数据库" class="headerlink" title="2. 在 application.properties 配置数据库"></a>2. 在 application.properties 配置数据库</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/mydatabase</span><br><span class="line"><span class="attr">spring.datasource.username</span>=myuser</span><br><span class="line"><span class="attr">spring.datasource.password</span>=mypassword</span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=classpath*:/mapper/*.xml</span><br></pre></td></tr></table></figure><h3 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3. 创建实体类"></a>3. 创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, grade=&quot;</span> + grade + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-创建-Mapper-接口和对应的-XML-映射文件。"><a href="#4-创建-Mapper-接口和对应的-XML-映射文件。" class="headerlink" title="4. 创建 Mapper 接口和对应的 XML 映射文件。"></a>4. 创建 Mapper 接口和对应的 XML 映射文件。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>XML映射文件放置在resources下的mapper目录中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;slz.mybatis.spring.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;slz.mybatis.spring.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-编写服务类"><a href="#5-编写服务类" class="headerlink" title="5. 编写服务类"></a>5. 编写服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentService</span><span class="params">(StudentMapper studentMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentMapper = studentMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getAllStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@Autowired</code>表示需要通过自动装配的方式将 StudentMapper 对象注入到 StudentService 类中。</p><h3 id="6-编写控制器"><a href="#6-编写控制器" class="headerlink" title="6. 编写控制器"></a>6. 编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentController</span><span class="params">(StudentService studentService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/students&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentService.getAllStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-编写入口类"><a href="#7-编写入口类" class="headerlink" title="7. 编写入口类"></a>7. 编写入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;slz.mybatis.spring.mapper.**&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        org.springframework.boot.SpringApplication.run(SpringApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动后访问：<code>http://localhost:8080/students</code>即可查看学生信息。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a><br>[2] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466914339296">https://www.liaoxuefeng.com/wiki/1252599548343744/1260466914339296</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>通过<code>mybatis-spring-boot-starter</code>配置MyBatis比原版有了一些便利，例如通过注解指定Mapper类扫描路径自动注册、自动配置SqlSessionFactory、自动注入Mapper实例等。</p><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;攒一个MyBatis快速入门，MP用的多，但对于MyBatis还不够了解，学习之。&lt;/p&gt;
&lt;p&gt;写了两个Demo，分别是不用框架和用Spring。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
    <category term="MyBatis" scheme="http://silencezheng.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>打包Flask应用为Docker镜像</title>
    <link href="http://silencezheng.top/2023/06/12/article103/"/>
    <id>http://silencezheng.top/2023/06/12/article103/</id>
    <published>2023-06-12T01:23:31.000Z</published>
    <updated>2023-06-12T01:29:37.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一次打包Flask应用的过程，在Ubuntu(amd64)下。</p><p>虽然看着简单，但处理软件依赖和系统环境可能会遇到很多小问题，需要耐心逐个解决。<br><span id="more"></span></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>打包Flask应用及其所有所需的环境为镜像，用户拉取镜像后直接运行即可使用服务。</p><p>环境依赖包含显卡驱动、编译器、所需文件和Python包等。</p><p>注意打包的机器的操作系统不很重要，但架构很重要，最好保持打包机的架构与要部署的服务器架构一致（amd64、arm64）。</p><blockquote><p>有一些工具和技术可以帮助实现跨架构的镜像构建，例如 buildx 工具和多架构的 Docker 镜像。buildx 是 Docker 的官方多架构构建工具，它可以让你在一台机器上同时构建多个不同架构的镜像。多架构的 Docker 镜像则允许你在同一个镜像中包含多个架构的二进制文件，使其适用于不同的机器。</p></blockquote><h2 id="修改地址"><a href="#修改地址" class="headerlink" title="修改地址"></a>修改地址</h2><p>为了使服务能够被本机外的设备访问，需要将主机地址修改为<code>0.0.0.0</code>（或其他指定地址）。</p><p>方式一，在代码中指定配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p>方式二，通过终端命令指定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">flask run</span><br></pre></td></tr></table></figure></p><p>显然方式二更灵活些，要修改服务的配置，直接在Dockerfile中修改就可以了。</p><h2 id="导出Python的依赖"><a href="#导出Python的依赖" class="headerlink" title="导出Python的依赖"></a>导出Python的依赖</h2><p>借助pipreqs导出依赖文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line">python -m pip install pipreqs <span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line">pipreqs ./ --encoding=utf8 <span class="comment"># 在项目根目录下导出</span></span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>在项目根目录下创建Dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line"><span class="comment"># 基础镜像，这里直接选择带显卡驱动的</span></span><br><span class="line"><span class="keyword">FROM</span> nvidia/cuda:<span class="number">10.0</span>-cudnn7-runtime-ubuntu18.<span class="number">04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置程序依赖的环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="bash">        build-essential \</span></span><br><span class="line"><span class="bash">        cmake \</span></span><br><span class="line"><span class="bash">        curl \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">        python3-dev \</span></span><br><span class="line"><span class="bash">        python3-pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理APT包管理器缓存列表</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前项目复制到容器内，这里选择在/workspace目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动时工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装setuptools，外部库需要</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget --no-check-certificate https://pypi.python.org/packages/<span class="built_in">source</span>/s/setuptools/setuptools-19.6.tar.gz<span class="comment">#md5=c607dd118eae682c44ed146367a17e26 &amp;&amp; tar -zxvf setuptools-19.6.tar.gz &amp;&amp; cd setuptools-19.6 &amp;&amp; python3 setup.py build &amp;&amp; python3 setup.py install &amp;&amp; cd .. &amp;&amp; rm -rf setuptools-19.6</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python包</span></span><br><span class="line"><span class="comment"># 清华源： -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="comment"># 安装额外依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install torch_sparse torch_scatter</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置本地化环境变量，否则之后的Flask配置会报错</span></span><br><span class="line"><span class="comment"># 注意不要用RUN，RUN仅在本层配置</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL=C.UTF_8</span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Flask环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动命令</span></span><br><span class="line"><span class="comment"># .py启动</span></span><br><span class="line"><span class="comment"># CMD [&quot;/usr/bin/python3&quot;, &quot;/workspace/app.py&quot;]</span></span><br><span class="line"><span class="comment"># 直接启动</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>在修改环境变量的时候也是既可以在Dockerfile里写死，也可以通过容器运行命令<code>docker run</code>的<code>-e</code>参数指定。</p><h2 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h2><p>进入项目根目录执行以下命令构建Docker镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask-api .</span><br></pre></td></tr></table></figure></p><p>构建完成后可以通过<code>docker images</code>查看。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>格式为：<br><code>docker run -p host-port:container-port image-name</code></p><p>放在我这里映射到5001端口就是：<br><code>docker run -p 5001:5000 flask-api</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>以请求体为json格式为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d @path/to/file.json URL</span><br></pre></td></tr></table></figure><br>注意curl中@用于表示从文件中读取数据。</p><h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><p>保存为压缩文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o &lt;保存路径/文件名.tar&gt; &lt;镜像名称:标签&gt;</span><br></pre></td></tr></table></figure></p><h2 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h2><p>通过压缩文件导入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i &lt;镜像文件.tar&gt;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录一次打包Flask应用的过程，在Ubuntu(amd64)下。&lt;/p&gt;
&lt;p&gt;虽然看着简单，但处理软件依赖和系统环境可能会遇到很多小问题，需要耐心逐个解决。&lt;br&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="http://silencezheng.top/tags/Docker/"/>
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
  </entry>
  
</feed>
