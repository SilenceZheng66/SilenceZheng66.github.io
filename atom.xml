<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilenceZheng66-BLOG</title>
  
  <subtitle>log</subtitle>
  <link href="http://silencezheng.top/atom.xml" rel="self"/>
  
  <link href="http://silencezheng.top/"/>
  <updated>2023-07-22T11:25:51.378Z</updated>
  <id>http://silencezheng.top/</id>
  
  <author>
    <name>SilenceZheng66</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lombok常用注解</title>
    <link href="http://silencezheng.top/2023/07/22/article109/"/>
    <id>http://silencezheng.top/2023/07/22/article109/</id>
    <published>2023-07-22T11:24:40.000Z</published>
    <updated>2023-07-22T11:25:51.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整理一些Lombok的常用注解和注意事项（几乎包含所有主流注解了）。</p><span id="more"></span><blockquote><p>Lombok是通过在编译阶段进行字节码增强实现的，它利用Java的注解处理器机制，根据注解生成相应的代码，可以大幅减少 Java 代码的冗余和重复，提高开发效率。</p></blockquote><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p><code>@Data</code> 是 Lombok 提供的一个注解，它是一个组合注解，包含了以下注解的功能：</p><ol><li><code>@Getter</code>：生成属性的 getter 方法。</li><li><code>@Setter</code>：生成属性的 setter 方法。</li><li><code>@ToString</code>：生成 toString 方法，用于输出对象的字符串表示。</li><li><code>@EqualsAndHashCode</code>：生成 equals 和 hashCode 方法，用于对象的比较和哈希计算。</li></ol><p>使用 <code>@Data</code> 注解可以简化 POJO 类的编写。</p><p>以下是使用 <code>@Data</code> 注解的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自Java编译器，隐式无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @Getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @EqualsAndHashCode</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> LombokTest)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LombokTest other = (LombokTest)o;</span><br><span class="line">            <span class="keyword">if</span> (!other.canEqual(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getId() != other.getId()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Object <span class="keyword">this</span>$name = <span class="keyword">this</span>.getName();</span><br><span class="line">                Object other$name = other.getName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>$name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (other$name != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>$name.equals(other$name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> other <span class="keyword">instanceof</span> LombokTest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> PRIME = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        result = result * <span class="number">59</span> + <span class="keyword">this</span>.getId();</span><br><span class="line">        Object $name = <span class="keyword">this</span>.getName();</span><br><span class="line">        result = result * <span class="number">59</span> + ($name == <span class="keyword">null</span> ? <span class="number">43</span> : $name.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来自 @ToString</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LombokTest(id=&quot;</span> + <span class="keyword">this</span>.getId() + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，<code>@Data</code> 注解会生成所有属性的 getter 和 setter 方法，如果需要对某些属性进行特殊处理，可以使用其他注解，对指定的属性进行定制化配置。</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><p><code>@NoArgsConstructor</code> 是 Lombok 提供的一个注解，用于自动生成无参构造函数。它可以用在类上，表示为该类生成一个无参构造函数。如果类已经包含了其他有参构造函数，使用 <code>@NoArgsConstructor</code> 不会覆盖已有的构造函数。</p><p>以下是使用 <code>@NoArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><p><code>@AllArgsConstructor</code> 是 Lombok 提供的一个注解，用于自动生成包含所有属性的构造函数。它可以用在类上，表示为该类生成一个包含所有属性的构造函数。注意此时类中不可以包含全参构造函数代码。</p><p>以下是使用 <code>@AllArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><p><code>@Builder</code> 是 Lombok 提供的一个注解，用于自动生成构建器模式相关的代码。它可以用在类上，表示为该类生成一个构建器，用于简化创建对象的过程。使用构建器模式可以避免过多的构造函数重载，并提供更灵活的对象创建方式。</p><p>以下是使用 <code>@Builder</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lombok自动产生</span></span><br><span class="line">    LombokTest(<span class="keyword">int</span> id, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LombokTestBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LombokTestBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTestBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        LombokTestBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTestBuilder <span class="title">id</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTestBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LombokTest <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LombokTest(<span class="keyword">this</span>.id, <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;LombokTest.LombokTestBuilder(id=&quot;</span> + <span class="keyword">this</span>.id + <span class="string">&quot;, name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就可以通过构造器模式创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">LombokTest lombokTest = LombokTest.builder().id(<span class="number">1</span>).name(<span class="string">&quot;lombok&quot;</span>).build(); <span class="comment">// 创建LombokTest对象</span></span><br><span class="line">System.out.println(LombokTest.builder().id(<span class="number">1</span>).name(<span class="string">&quot;lombok&quot;</span>)); <span class="comment">// LombokTest.LombokTestBuilder(id=1, name=lombok)</span></span><br></pre></td></tr></table></figure><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h2><p>将<code>@NonNull</code>注解放在属性上，表示该属性不能为<code>null</code>，否则会在运行时抛出<code>NullPointerException</code>。</p><p>以下是使用 <code>@NonNull</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但注意这里将 <code>@NonNull</code> 注解用于<code>primitive</code>是无意义的，原始类型本身就不能是<code>null</code>。</p><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h2><p>将<code>@RequiredArgsConstructor</code>注解放在类上，它会生成一个包含所有标记了<code>@NonNull</code>注解的属性的构造函数。</p><p>以下是使用 <code>@RequiredArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String aString;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Double aDouble;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> String aString;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> Double aDouble;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LombokTest</span><span class="params">(<span class="meta">@NonNull</span> String aString, <span class="meta">@NonNull</span> Double aDouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aString == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;aString is marked non-null but is null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aDouble == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;aDouble is marked non-null but is null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.aString = aString;</span><br><span class="line">            <span class="keyword">this</span>.aDouble = aDouble;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h2><p>将<code>@SneakyThrows</code>注解放在方法上，它会自动将受检异常转换为非受检异常抛出，避免在代码中显式地处理受检异常。</p><p>以下是使用 <code>@RequiredArgsConstructor</code> 注解的示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里抛出了一个受检异常，但是不需要显式地处理它</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译器生成的结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果不使用该注解，通常我们需要如此处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 这里抛出了一个受检异常，需要显式地处理它</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;This is a checked exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example();</span><br><span class="line">        example.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于受检异常和非受检异常：</p><blockquote><p><code>java.lang.Throwable</code>是Java中所有错误和异常的根类。它是一个类层次结构的顶层类，表示可以被抛出的任何问题，包括错误（<code>Error</code>）和异常（<code>Exception</code>）。</p><p><code>Throwable</code>类包含以下几个重要的子类：</p><ol><li><p><code>Error</code>: 表示严重的系统错误，通常由Java虚拟机（JVM）报告，例如<code>OutOfMemoryError</code>、<code>StackOverflowError</code>等。<code>Error</code>类的实例通常表示不可恢复的错误情况，应用程序通常不应该捕获和处理<code>Error</code>。</p></li><li><p><code>Exception</code>: 表示可被捕获和处理的异常。<code>Exception</code>类又分为两类：</p><ul><li><p>受检异常（Checked Exception）：继承自<code>Exception</code>的子类，但不继承自<code>RuntimeException</code>的异常。受检异常在方法签名中必须显式地声明，或者在方法内部捕获和处理，否则编译器会报错。例如，<code>IOException</code>、<code>SQLException</code>等属于受检异常。</p></li><li><p>非受检异常（Unchecked Exception）：继承自<code>RuntimeException</code>的异常。非受检异常不需要在方法签名中显式地声明，也可以不在方法内部捕获和处理。通常是由程序编程错误引起的，例如<code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>等。</p></li></ul></li></ol><p><code>Throwable</code>类定义了以下一些重要的方法：</p><ul><li><code>getMessage()</code>: 获取关于异常的详细信息。</li><li><code>toString()</code>: 返回异常的字符串表示，包括异常的类名和详细信息。</li><li><code>printStackTrace()</code>: 在控制台打印异常的堆栈跟踪信息，用于调试和错误定位。</li><li><code>getCause()</code>: 获取导致当前异常的原因（即导致当前异常抛出的其他异常）。</li></ul><p><code>Throwable</code>类的子类可以通过继承它的方法和添加自己的方法来定义特定类型的错误和异常。</p></blockquote><h2 id="其他一些注解"><a href="#其他一些注解" class="headerlink" title="其他一些注解"></a>其他一些注解</h2><p><code>@Cleanup</code>：将<code>@Cleanup</code>注解放在需要进行资源关闭的属性上，它会自动生成资源的关闭代码，用于简化资源管理，特别是对于实现<code>java.io.Closeable</code>接口的资源。</p><p><code>@Getter(lazy = true)</code>：将<code>@Getter(lazy = true)</code>注解放在属性上，它会生成属性的懒加载 getter 方法，在第一次调用该方法时才会计算并返回属性的值。</p><p>还有一些日志相关的注解，等写Java日志框架时再一并写了吧。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;整理一些Lombok的常用注解和注意事项（几乎包含所有主流注解了）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Lombok" scheme="http://silencezheng.top/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Nginx使用入门</title>
    <link href="http://silencezheng.top/2023/07/14/article108/"/>
    <id>http://silencezheng.top/2023/07/14/article108/</id>
    <published>2023-07-14T15:43:40.000Z</published>
    <updated>2023-07-14T15:43:59.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx使用入门，让你的闲置云服务器用起来～</p><span id="more"></span><h2 id="Nginx能干什么？"><a href="#Nginx能干什么？" class="headerlink" title="Nginx能干什么？"></a>Nginx能干什么？</h2><p>Nginx是一款开源的高性能Web服务器和反向代理服务器，具有以下主要功能：</p><ol><li><p><strong>Web服务器</strong>：Nginx可以作为一个独立的Web服务器来提供静态内容和动态内容的服务。它支持处理HTTP、HTTPS、HTTP/2和WebSocket等协议，具有高并发处理能力和低资源消耗。</p></li><li><p><strong>反向代理</strong>：Nginx作为反向代理服务器，可以接收客户端请求并将其转发到后端的多个服务器，起到负载均衡和高可用性的作用。它能够智能地分配请求负载，提供更好的性能和可靠性。</p></li><li><p><strong>负载均衡</strong>：Nginx能够在多个后端服务器之间分发请求，实现负载均衡。通过智能地将请求分配给不同的服务器，可以提高系统的整体性能和可伸缩性。</p></li><li><p><strong>HTTP缓存</strong>：Nginx支持对静态和动态内容进行缓存，减少对后端服务器的请求，提高响应速度和吞吐量。它可以根据设置的缓存规则，缓存经常访问的内容，并提供快速的响应。</p></li><li><p><strong>安全性</strong>：Nginx具有内置的安全功能，如反向代理防御（Reverse Proxy Defense）和请求限制（Rate Limiting），以保护网站免受恶意请求和DDoS攻击。</p></li><li><p><strong>SSL/TLS加密</strong>：Nginx支持SSL/TLS协议，可以进行安全的加密通信，并提供HTTPS协议的支持。它可以配置和管理证书，实现安全的数据传输。</p></li><li><p><strong>动态模块</strong>：Nginx支持模块化的架构，可以通过添加第三方模块扩展其功能。这使得Nginx具有更多的扩展性和灵活性，可以根据具体需求进行定制和配置。</p></li></ol><p>本文先从最常用的Web服务器开始。</p><h2 id="基于Docker部署Nginx"><a href="#基于Docker部署Nginx" class="headerlink" title="基于Docker部署Nginx"></a>基于Docker部署Nginx</h2><p>通过Docker部署Nginx对于我们的学习更方便，也提供了更好的隔离性。下面是通过docker启动Nginx的大致操作流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p local_port:container_port \</span><br><span class="line"><span class="comment"># 挂载配置文件</span></span><br><span class="line">-v /path/to/mynginx/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line"><span class="comment"># 挂载目标目录</span></span><br><span class="line">-v /path/to/projects:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:port/target</span><br></pre></td></tr></table></figure><h2 id="Web服务器应用举例"><a href="#Web服务器应用举例" class="headerlink" title="Web服务器应用举例"></a>Web服务器应用举例</h2><p>下面，基于上述基本流程，我们来实现一些Web服务器的实例。</p><p>省略拉取镜像～</p><h3 id="1-图床"><a href="#1-图床" class="headerlink" title="1. 图床"></a>1. 图床</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/img_host/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/img_host/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line"></span><br><span class="line">    worker_processes 1; <span class="comment"># 应该使用多少个worker进程来处理请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事件处理器配置</span></span><br><span class="line">    events &#123;</span><br><span class="line">        worker_connections 1024; <span class="comment"># 每个worker进程可以处理的最大并发连接数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局HTTP服务器配置</span></span><br><span class="line">    http &#123;</span><br><span class="line">        include mime.types;</span><br><span class="line">        default_type application/octet-stream; <span class="comment"># 默认的MIME类型</span></span><br><span class="line">        sendfile on; <span class="comment"># 可以直接将文件从磁盘复制到网络套接字</span></span><br><span class="line">        keepalive_timeout  65; <span class="comment"># 空闲的持久连接将在65秒后关闭</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># images server</span></span><br><span class="line">        server &#123;</span><br><span class="line">            listen       82;</span><br><span class="line">            server_name  ip_or_domain;</span><br><span class="line"></span><br><span class="line">            location /images/ &#123;</span><br><span class="line">                <span class="built_in">alias</span> /home/images/; <span class="comment"># 表示将URL中的 /images/替换为的实际路径</span></span><br><span class="line">                expires max; <span class="comment"># 对这些图片文件的缓存过期时间为最大值，即永不过期。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p 82:82 \</span><br><span class="line">-v /path/to/mynginx/img_host/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /path/to/images/:/home/images/ \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:82/images/pic.jpg</span><br></pre></td></tr></table></figure><h3 id="2-文件服务器"><a href="#2-文件服务器" class="headerlink" title="2. 文件服务器"></a>2. 文件服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir /path/to/mynginx/file_server/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">touch /path/to/mynginx/file_server/config/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容</span></span><br><span class="line"></span><br><span class="line">    worker_processes 1; <span class="comment"># 应该使用多少个worker进程来处理请求</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事件处理器配置</span></span><br><span class="line">    events &#123;</span><br><span class="line">        worker_connections 1024; <span class="comment"># 每个worker进程可以处理的最大并发连接数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局HTTP服务器配置</span></span><br><span class="line">    http &#123;</span><br><span class="line">        server &#123;</span><br><span class="line">            listen 82;  <span class="comment"># 监听的端口号</span></span><br><span class="line">            server_name ip_or_domain;  <span class="comment"># 服务器域名或IP地址</span></span><br><span class="line"></span><br><span class="line">            location / &#123; <span class="comment"># 这里需要注意，分配其他前缀时，采用root的路径后要加上该前缀，建议用alias</span></span><br><span class="line">                root /path/to/files/;  <span class="comment"># 文件根目录的绝对路径</span></span><br><span class="line">                <span class="comment"># or alias /path/to/files/, 直接从 ip:82/ 可进入</span></span><br><span class="line">                autoindex on;  <span class="comment"># 启用目录列表功能</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name mynginx -p 82:82 \</span><br><span class="line">-v /path/to/mynginx/file_server/config/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /path/to/files/:/path/to/files/ \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://ip:82/path/to/files/</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>使用alias时目录名后面一定要加<code>/</code>。</li><li>一般情况下，在<code>location /</code>中配置root，在<code>location /other</code>中配置alias。</li></ol><h3 id="3-Web应用部署"><a href="#3-Web应用部署" class="headerlink" title="3. Web应用部署"></a>3. Web应用部署</h3><p>一样的逻辑，这里只提供一个配置文件参考：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件处理器配置</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP服务器配置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;     <span class="comment"># 设置允许压缩的页面最小字节数</span></span><br><span class="line">    gzip_buffers 4 16k;     <span class="comment"># 用来存储 gzip 的压缩结果</span></span><br><span class="line">    gzip_http_version 1.1;  <span class="comment"># 识别 HTTP 协议版本</span></span><br><span class="line">    gzip_comp_level 2;      <span class="comment"># 设置 gzip 的压缩比 1-9。1 压缩比最小但最快，而 9 相反</span></span><br><span class="line">    gzip_types gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; <span class="comment"># 指定压缩类型</span></span><br><span class="line">    gzip_proxied any;       <span class="comment"># 无论后端服务器的 headers 头返回什么信息，都无条件启用压缩</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端静态文件服务器</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        root /path/to/frontend/dist;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后端API代理</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name api.example.com;</span><br><span class="line"></span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            proxy_pass http://ip:port/api/; <span class="comment">## proxy_pass 需要设置为后端项目所在服务器的 IP</span></span><br><span class="line">            <span class="comment"># 设置代理请求的头信息，以便在转发请求时传递给后端服务器</span></span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>; <span class="comment"># 设置代理请求的Host头，将其设置为与客户端请求中的Host头一致</span></span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>; <span class="comment"># 将客户端真实IP地址作为X-Real-IP头发送给后端服务器</span></span><br><span class="line">            proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>; <span class="comment"># 将客户端IP地址作为REMOTE-HOST头发送给后端服务器</span></span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; <span class="comment"># 将客户端IP地址添加到X-Forwarded-For头中，以便后端服务器可以了解请求的真实客户端IP地址。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Nginx使用入门，让你的闲置云服务器用起来～&lt;/p&gt;</summary>
    
    
    
    
    <category term="Nginx" scheme="http://silencezheng.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git代码合并</title>
    <link href="http://silencezheng.top/2023/07/01/article107/"/>
    <id>http://silencezheng.top/2023/07/01/article107/</id>
    <published>2023-07-01T11:40:45.000Z</published>
    <updated>2023-07-15T09:42:26.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期有多端办公的需求，实操一下代码合并。</p><p>结合IDEA的Git工具更加方便。<br><span id="more"></span></p><h2 id="本地仓库合并"><a href="#本地仓库合并" class="headerlink" title="本地仓库合并"></a>本地仓库合并</h2><p>要合并两个<strong>本地</strong>的 Git 仓库，可以按照以下步骤进行操作：</p><p>1、 进入第一个仓库的目录。</p><p>2、 添加第二个仓库为远程仓库（仓库名可以取任意，与当前仓库有区分即可）：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;远程仓库名称&gt; &lt;第二个仓库的路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git remote add another /path/to/another</span></span><br></pre></td></tr></table></figure></p><p>3、 从远程仓库获取所有最新的提交历史和分支信息：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br></pre></td></tr></table></figure></p><p>4、 查看远程仓库的分支：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></p><p>5、 将远程仓库的代码合并到本地仓库的当前分支：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;远程仓库名称&gt;/&lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git merge another/&lt;brach&gt;</span></span><br></pre></td></tr></table></figure></p><p>   这将把第二个仓库的代码变更合并到当前分支。当然，这一步可以用IDE提供的Git面板进行操作。</p><p>6、 解决可能出现的冲突：<br>   如果两个仓库之间存在冲突，你需要手动解决冲突。Git 会在代码合并过程中标记冲突的部分，你可以使用文本编辑器打开相应的文件并手动编辑以解决冲突。可以用IDE提供的Git面板进行操作，更加方便。</p><p>7、 提交合并后的代码变更：<br>   <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;<span class="keyword">Merge</span> another <span class="keyword">into</span> origin<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></p><p>   这将提交合并后的代码变更。</p><p>通过上述步骤，可以将两个本地的 Git 仓库进行合并。请确保在操作前备份仓库数据，以免意外丢失代码。</p><h2 id="远端仓库合并"><a href="#远端仓库合并" class="headerlink" title="远端仓库合并"></a>远端仓库合并</h2><p>一样的方式，只是远端仓库可能有固定的仓库名，把本地地址替换为url即可。</p><h2 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h2><p>Pull操作等于Fetch + Merge，如果已经确认过远端分支信息，可以直接Pull对应分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： git pull another &lt;brach&gt;</span></span><br></pre></td></tr></table></figure><br>这将从远端仓库中获取最新的代码变更并合并到本地当前分支。</p><p>如果出现分歧，可能会报错：<code>fatal: Need to specify how to reconcile divergent branches.</code>，此时需要解决冲突或确认合并策略。</p><h2 id="将远程分支添加到本地并创建一个新的本地分支"><a href="#将远程分支添加到本地并创建一个新的本地分支" class="headerlink" title="将远程分支添加到本地并创建一个新的本地分支"></a>将远程分支添加到本地并创建一个新的本地分支</h2><p>注意执行后切换到新的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt; &lt;remote-name&gt;/&lt;remote-branch-name&gt;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期有多端办公的需求，实操一下代码合并。&lt;/p&gt;
&lt;p&gt;结合IDEA的Git工具更加方便。&lt;br&gt;</summary>
    
    
    
    
    <category term="Git" scheme="http://silencezheng.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>服务器sshd自动关闭问题排查记录</title>
    <link href="http://silencezheng.top/2023/07/01/article106/"/>
    <id>http://silencezheng.top/2023/07/01/article106/</id>
    <published>2023-07-01T08:29:36.000Z</published>
    <updated>2023-07-01T08:34:53.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>服务器的sshd服务在经过多次连接后出现自动关闭的情况，遂进行排查，记录过程。</p><span id="more"></span><h2 id="1-排查sshd日志"><a href="#1-排查sshd日志" class="headerlink" title="1. 排查sshd日志"></a>1. 排查sshd日志</h2><p><code>/var/log/secure</code> — 包含验证和授权方面信息，sshd会将所有信息记录（其中包括失败登录）在这里。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos polkitd[<span class="number">672</span>]: Registered Authentication Agent for unix-process:<span class="number">13867</span>:<span class="number">17282775</span> (system bus name :<span class="number">1</span>.<span class="number">29528</span><span class="meta"> [/usr/bin/pkttyagent --notify-fd 5 --fallback], object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8)</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos sshd[13873]: Server listening on 0.0.0.0 port 22.</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos sshd[13873]: Server listening on :: port 22.</span></span><br><span class="line"><span class="meta">Jun 29 09:25:55 centos polkitd[672]: Unregistered Authentication Agent for unix-process:13867:17282775 (system bus name :1.29528, object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8) (disconnected from bus)</span></span><br><span class="line"><span class="meta">Jun 29 09:29:50 centos sshd[14173]: Connection closed by ip port 37721 [preauth]</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: Accepted password for root from ip port <span class="number">25638</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: Accepted password for root from ip port <span class="number">25844</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos sshd[<span class="number">14512</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo:    root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/sbin/service sshd stop</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo: pam_unix(sudo:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos sudo: pam_unix(sudo:session): session closed for user root</span><br></pre></td></tr></table></figure><p>可以看到有一个sudo命令被执行，通过<code>/sbin/service sshd stop</code>来停止sshd服务。日志显示命令是由root用户执行的，并且sudo会话在执行命令后立即关闭。可能有其他的进程或脚本在后台运行，调用了该sudo命令来停止sshd服务。</p><h2 id="2-排查系统日志"><a href="#2-排查系统日志" class="headerlink" title="2. 排查系统日志"></a>2. 排查系统日志</h2><p>为了搞清楚是什么命令停止了sshd服务，排查<code>/var/log/messages</code>，一般包括整体系统信息，以及cron、daemon等等。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos systemd: Starting OpenSSH server daemon...</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">55</span> centos systemd: <span class="literal">Started</span> OpenSSH server daemon.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">26</span>:<span class="number">01</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14452</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">...</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14477</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd-logind: New session <span class="number">14477</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]: [system] Activating service <span class="attr">name=</span>&#x27;org.freedesktop.problems&#x27; (using servicehelper)</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos systemd: <span class="literal">Started</span> Session <span class="number">14478</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">21</span> centos systemd-logind: New session <span class="number">14478</span> of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: sshd.service: main process exited, <span class="attr">code=</span>killed, <span class="attr">status=</span><span class="number">9</span>/KILL</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: Unit sshd.service entered failed state.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: sshd.service failed.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: <span class="literal">Stopped</span> OpenSSH server daemon.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd: <span class="literal">Started</span> Session c291 of <span class="keyword">user</span> <span class="title">root</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">27</span> centos systemd-logind: Removed session <span class="number">14478</span>.</span><br><span class="line">Jun <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">28</span> centos systemd-logind: Removed session <span class="number">14477</span>.</span><br></pre></td></tr></table></figure><p>日志表明<code>sshd.service</code>服务的主进程被终止，最终导致了OpenSSH守护进程的停止。但看不出具体是什么脚本。</p><h2 id="3-排查journalctl"><a href="#3-排查journalctl" class="headerlink" title="3. 排查journalctl"></a>3. 排查journalctl</h2><p>journalctl 是 systemd-journald 服务的一部分，用于管理和检索系统日志。它使用二进制日志格式（Binary Log Format），可以包含比传统日志文件更详细的信息</p><p>查看指定时间区间的日志：<code>journalctl --since &quot;2023-06-29 09:25:55&quot; --until &quot;2023-06-29 09:30:28&quot;</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> centos systemd[<span class="number">1</span>]: Started Session <span class="number">14475</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: Accepted password for root from ip port <span class="number">25638</span> ssh<span class="number">2</span></span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd[<span class="number">1</span>]: Started Session <span class="number">14477</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos systemd-logind[<span class="number">673</span>]: New session <span class="number">14477</span> of user root.</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_unix(sshd:session): session opened for user root by (uid=<span class="number">0</span>)</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos sshd[<span class="number">14225</span>]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">29</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">11</span> centos dbus[<span class="number">663</span>]:<span class="meta"> [system] Activating service name=&#x27;org.freedesktop.problems&#x27; (using servicehelper)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:11 centos dbus[663]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: Accepted password for root from ip port 25844 ssh2</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: pam_unix(sshd:session): session opened for user root by (uid=0)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos systemd[1]: Started Session 14478 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos systemd-logind[673]: New session 14478 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:21 centos sshd[14512]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: sshd.service: main process exited, code=killed, status=9/KILL</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Unit sshd.service entered failed state.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: sshd.service failed.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Stopped OpenSSH server daemon.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]:     root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/sbin/service sshd stop</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]: pam_unix(sudo:session): session opened for user root by (uid=0)</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd[1]: Started Session c291 of user root.</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos sudo[14863]: pam_unix(sudo:session): session closed for user root</span></span><br><span class="line"><span class="meta">Jun 29 09:30:27 centos systemd-logind[673]: Removed session 14478.</span></span><br></pre></td></tr></table></figure><p>看起来唯一像问题的就是：<code>sshd[14512]: pam_lastlog(sshd:session): corruption detected in /var/log/btmp</code></p><h2 id="4-问题查找"><a href="#4-问题查找" class="headerlink" title="4. 问题查找"></a>4. 问题查找</h2><p>依据发现问题的日志，找到问题原因可能是“用户的默认 Shell 被修改”。</p><p>通过<code>cat /etc/passwd | grep usr</code>查看，例如查看<code>root</code>输出：<code>root:x:0:0:root:/root:/bin/bash</code>则表示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root：登录名，即用户名。</span><br><span class="line">x：密码占位符，实际密码存储在 <span class="regexp">/etc/</span>shadow 文件中。</span><br><span class="line"><span class="number">0</span>：用户 ID (UID)，表示 root 用户的特殊标识符，<span class="number">0</span> 是超级用户的标识符。</span><br><span class="line"><span class="number">0</span>：组 ID (GID)，表示 root 用户所属的主要组的标识符。</span><br><span class="line">root：用户全名或注释字段，通常为用户的真实姓名。</span><br><span class="line">/root：主目录，表示 root 用户的主要工作目录。</span><br><span class="line"><span class="regexp">/bin/</span>bash：登录 shell，表示用户登录时所使用的默认命令解释器。</span><br></pre></td></tr></table></figure><p>但我排查过后，也不是这个问题。下一步应该继续排查<code>/var/log/btmp</code>，先搁置了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://cloud.tencent.com/document/product/213/37925">腾讯云手册</a><br>[2] <a href="https://www.cnblogs.com/sunsky303/p/8862040.html">https://www.cnblogs.com/sunsky303/p/8862040.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;服务器的sshd服务在经过多次连接后出现自动关闭的情况，遂进行排查，记录过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://silencezheng.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven多模块项目结构实践</title>
    <link href="http://silencezheng.top/2023/06/30/article105/"/>
    <id>http://silencezheng.top/2023/06/30/article105/</id>
    <published>2023-06-30T14:10:56.000Z</published>
    <updated>2023-06-30T14:12:20.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多Maven Module的项目结构，实践一下。</p><span id="more"></span><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>基本上来说，我们希望构建的项目结构是这样的：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">my-project</span><br><span class="line">├── pom<span class="selector-class">.xml</span></span><br><span class="line">├── bom</span><br><span class="line">│   ├── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-app</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.myapp</span></span><br><span class="line">│   │       │       └── MyAppApplication<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── application<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-module1</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module1</span></span><br><span class="line">│   │       │       └── Module1Class1<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── module1<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">├── my-module2</span><br><span class="line">│   ├── <span class="attribute">src</span></span><br><span class="line">│   │   └── <span class="selector-tag">main</span></span><br><span class="line">│   │       ├── java</span><br><span class="line">│   │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module2</span></span><br><span class="line">│   │       │       └── Module2Class1<span class="selector-class">.java</span></span><br><span class="line">│   │       └── resources</span><br><span class="line">│   │           └── module2<span class="selector-class">.properties</span></span><br><span class="line">│   └── pom<span class="selector-class">.xml</span></span><br><span class="line">└── my-module3</span><br><span class="line">    ├── <span class="attribute">src</span></span><br><span class="line">    │   └── <span class="selector-tag">main</span></span><br><span class="line">    │       ├── java</span><br><span class="line">    │       │   └── com<span class="selector-class">.example</span><span class="selector-class">.module3</span></span><br><span class="line">    │       │       └── Module3Class1<span class="selector-class">.java</span></span><br><span class="line">    │       └── resources</span><br><span class="line">    │           └── module3<span class="selector-class">.properties</span></span><br><span class="line">    └── pom.xml</span><br></pre></td></tr></table></figure></p><p>其中，<code>MyAppApplication.java</code>是程序入口，bom下存放的是BOM（Bill of Materials）。</p><blockquote><p>BOM（Bill of Materials）是由Maven提供的功能,它通过定义一整套相互兼容的jar包版本集合，使用时只需要依赖该BOM文件，即可放心的使用需要的依赖jar包，且无需再指定版本号。BOM的维护方负责版本升级，并保证BOM中定义的jar包版本之间的兼容性。</p><p>BOM本质上是一个普通的POM文件，区别是对于使用方而言，生效的只有<code>&lt;dependencyManagement&gt;</code>这一个部分。只需要在<code>&lt;dependencyManagement&gt;</code>定义对外发布的客户端版本即可。</p></blockquote><p>在这种项目结构中，主项目（my-project）作为父模块，包含了所有子模块（my-app、my-module1、my-module2、my-module3…）。每个子模块都有自己的源代码目录（src/main/java）和资源目录（src/main/resources），并且每个子模块都有自己的 pom.xml 文件来定义其依赖和配置。</p><p>下面我们开始逐步构建项目。</p><h2 id="1-构建初始项目结构"><a href="#1-构建初始项目结构" class="headerlink" title="1. 构建初始项目结构"></a>1. 构建初始项目结构</h2><p>新建Maven父项目，并在根目录下新建三个Maven Module，分别为<code>bom、myapp、myappmodule1</code>。</p><h2 id="2-编写BOM"><a href="#2-编写BOM" class="headerlink" title="2. 编写BOM"></a>2. 编写BOM</h2><p>定义BOM如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archetype - bom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>基础 bom 文件，管理整个项目的依赖版本<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.0-snapshot<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-j.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql-connector-j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-编写父项目POM"><a href="#3-编写父项目POM" class="headerlink" title="3. 编写父项目POM"></a>3. 编写父项目POM</h2><p>引入BOM。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archetype - multi-maven-module<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>多模块Maven项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Server 主项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 各种 module 拓展 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.0-snapshot<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  这里选8是因为Maven兼容性问题，本来要上17但是还需要换Maven  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-compiler-plugin.version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">maven-compiler-plugin.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 对多模块项目结构似乎是必须的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注意编码很重要，否则可能导致MojoExecutionException --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用 aliyun 的 Maven 源，提升下载速度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-编写程序入口POM"><a href="#4-编写程序入口POM" class="headerlink" title="4. 编写程序入口POM"></a>4. 编写程序入口POM</h2><p>这里不需要再指定java版本和包版本了。如果需要使用不同于当前bom中所维护的jar包版本，则加上<code>&lt;version&gt;</code>覆盖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置构建的 jar 包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 如果 spring.boot.version 版本修改，则这里也要跟着修改 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> <span class="comment">&lt;!-- 将引入的 jar 打入其中 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="5-编写模块POM"><a href="#5-编写模块POM" class="headerlink" title="5. 编写模块POM"></a>5. 编写模块POM</h2><p>提供一个示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- author: SilenceZheng66 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.silencezheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>multi-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myappmodule1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="6-打包"><a href="#6-打包" class="headerlink" title="6. 打包"></a>6. 打包</h2><p>随便找个表用MyBatisX生成代码，然后运行通过后就可以打包了：<code>mvn clean package -Dmaven.test.skip=true</code>。</p><p><img src="/assets/post_img/article105/directory-structure.png" alt="ds"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;多Maven Module的项目结构，实践一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Maven" scheme="http://silencezheng.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis快速入门</title>
    <link href="http://silencezheng.top/2023/06/18/article104/"/>
    <id>http://silencezheng.top/2023/06/18/article104/</id>
    <published>2023-06-18T05:10:01.000Z</published>
    <updated>2023-06-18T05:13:24.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>攒一个MyBatis快速入门，MP用的多，但对于MyBatis还不够了解，学习之。</p><p>写了两个Demo，分别是不用框架和用Spring。<br><span id="more"></span></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MyBatis 是一款持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录。</p><p>下面以两个示例演示如何构建基于MyBatis的应用。</p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>假设有一个学生表（students），包含以下字段：</p><ul><li>id (主键，自增)</li><li>name (学生姓名)</li><li>age (学生年龄)</li><li>grade (学生年级)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> author: SilenceZheng66</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  grade <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, age, grade) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Alice&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Grade 10&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;Grade 11&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;Grade 9&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1、不用框架构建基于MyBatis的应用"><a href="#1、不用框架构建基于MyBatis的应用" class="headerlink" title="1、不用框架构建基于MyBatis的应用"></a>1、不用框架构建基于MyBatis的应用</h2><h3 id="1-安装MyBatis"><a href="#1-安装MyBatis" class="headerlink" title="1. 安装MyBatis"></a>1. 安装MyBatis</h3><p><a href="https://github.com/mybatis/mybatis-3/releases">下载</a>MyBatis的jar包并放置于类路径中。此外还需要mysql-connector-java。</p><h3 id="2-编写MyBatis配置文件-mybatis-config-xml"><a href="#2-编写MyBatis配置文件-mybatis-config-xml" class="headerlink" title="2. 编写MyBatis配置文件 mybatis-config.xml"></a>2. 编写MyBatis配置文件 mybatis-config.xml</h3><p>当使用MyBatis框架时，如果将配置文件命名为<code>mybatis-config.xml</code>，那么MyBatis会默认去加载这个文件作为配置文件。否则需要在代码中显式指定配置文件的名称，通过<code>SqlSessionFactoryBuilder</code>的build方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- XML 文件的声明部分，指定了 XML 的版本和编码方式。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- DTD（文档类型定义）声明，指定了 MyBatis 配置文件的格式和规范。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根元素，表示 MyBatis 的配置文件的起始点。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义了环境配置，其中 default 属性指定了默认的环境。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义了一个环境，其中 id 属性指定了环境的唯一标识。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定事务管理器的类型为 JDBC，表示使用 JDBC 进行事务管理。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定数据源的类型为 POOLED，表示使用连接池管理数据库连接。MyBatis框架内部包含一个简单的连接池实现。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库驱动的类名。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库的 URL。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myuser&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mypassword&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义一个或多个映射器（Mapper）配置。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定了映射器配置文件的路径，其中 resource 属性值为相对于配置文件的路径。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-编写映射文件-StudentMapper-xml"><a href="#3-编写映射文件-StudentMapper-xml" class="headerlink" title="3. 编写映射文件 StudentMapper.xml"></a>3. 编写映射文件 StudentMapper.xml</h3><p>简单的查找。注意配置文件通常放在<code>resources</code>目录下，例如<code>src/main/resources</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mybatis.simple.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;mybatis.simple.Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="4-编写实体类-Student-java"><a href="#4-编写实体类-Student-java" class="headerlink" title="4. 编写实体类 Student.java"></a>4. 编写实体类 Student.java</h3><p>用了一下Lombok，也加进类路径就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, grade=&quot;</span> + grade + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-编写数据访问接口-StudentMapper"><a href="#5-编写数据访问接口-StudentMapper" class="headerlink" title="5. 编写数据访问接口 StudentMapper"></a>5. 编写数据访问接口 StudentMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-编写数据访问接口实现类"><a href="#6-编写数据访问接口实现类" class="headerlink" title="6. 编写数据访问接口实现类"></a>6. 编写数据访问接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMapperImpl</span> <span class="keyword">implements</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentMapperImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            StudentMapper mapper = session.getMapper(StudentMapper.class);</span><br><span class="line">            <span class="keyword">return</span> mapper.getAllStudents();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-编写主程序"><a href="#7-编写主程序" class="headerlink" title="7. 编写主程序"></a>7. 编写主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybatis.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 加载 MyBatis 配置文件</span></span><br><span class="line">    String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 StudentMapper 对象</span></span><br><span class="line">    StudentMapper studentMapper = <span class="keyword">new</span> StudentMapperImpl(sqlSessionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用方法获取所有学生信息</span></span><br><span class="line">    List&lt;Student&gt; students = studentMapper.getAllStudents();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印学生信息</span></span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">      System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Student [id=<span class="number">1</span>, name=Alice, age=<span class="number">18</span>, grade=Grade <span class="number">10</span>]</span><br><span class="line">Student [id=<span class="number">2</span>, name=Bob, age=<span class="number">17</span>, grade=Grade <span class="number">11</span>]</span><br><span class="line">Student [id=<span class="number">3</span>, name=Charlie, age=<span class="number">16</span>, grade=Grade <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="2、-用Spring-Boot构建基于MyBatis的应用"><a href="#2、-用Spring-Boot构建基于MyBatis的应用" class="headerlink" title="2、 用Spring Boot构建基于MyBatis的应用"></a>2、 用Spring Boot构建基于MyBatis的应用</h2><p>从一个空Maven项目开始。</p><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在-application-properties-配置数据库"><a href="#2-在-application-properties-配置数据库" class="headerlink" title="2. 在 application.properties 配置数据库"></a>2. 在 application.properties 配置数据库</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/mydatabase</span><br><span class="line"><span class="attr">spring.datasource.username</span>=myuser</span><br><span class="line"><span class="attr">spring.datasource.password</span>=mypassword</span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=classpath*:/mapper/*.xml</span><br></pre></td></tr></table></figure><h3 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3. 创建实体类"></a>3. 创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, grade=&quot;</span> + grade + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-创建-Mapper-接口和对应的-XML-映射文件。"><a href="#4-创建-Mapper-接口和对应的-XML-映射文件。" class="headerlink" title="4. 创建 Mapper 接口和对应的 XML 映射文件。"></a>4. 创建 Mapper 接口和对应的 XML 映射文件。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>XML映射文件放置在resources下的mapper目录中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;slz.mybatis.spring.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;slz.mybatis.spring.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-编写服务类"><a href="#5-编写服务类" class="headerlink" title="5. 编写服务类"></a>5. 编写服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentService</span><span class="params">(StudentMapper studentMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentMapper = studentMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getAllStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@Autowired</code>表示需要通过自动装配的方式将 StudentMapper 对象注入到 StudentService 类中。</p><h3 id="6-编写控制器"><a href="#6-编写控制器" class="headerlink" title="6. 编写控制器"></a>6. 编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.entity.Student;</span><br><span class="line"><span class="keyword">import</span> slz.mybatis.spring.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentController</span><span class="params">(StudentService studentService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/students&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentService.getAllStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-编写入口类"><a href="#7-编写入口类" class="headerlink" title="7. 编写入口类"></a>7. 编写入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">package</span> slz.mybatis.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;slz.mybatis.spring.mapper.**&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        org.springframework.boot.SpringApplication.run(SpringApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动后访问：<code>http://localhost:8080/students</code>即可查看学生信息。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a><br>[2] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466914339296">https://www.liaoxuefeng.com/wiki/1252599548343744/1260466914339296</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>通过<code>mybatis-spring-boot-starter</code>配置MyBatis比原版有了一些便利，例如通过注解指定Mapper类扫描路径自动注册、自动配置SqlSessionFactory、自动注入Mapper实例等。</p><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;攒一个MyBatis快速入门，MP用的多，但对于MyBatis还不够了解，学习之。&lt;/p&gt;
&lt;p&gt;写了两个Demo，分别是不用框架和用Spring。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
    <category term="MyBatis" scheme="http://silencezheng.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>打包Flask应用为Docker镜像</title>
    <link href="http://silencezheng.top/2023/06/12/article103/"/>
    <id>http://silencezheng.top/2023/06/12/article103/</id>
    <published>2023-06-12T01:23:31.000Z</published>
    <updated>2023-06-12T01:25:34.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一次打包Flask应用的过程，在Ubuntu(amd64)下。</p><p>虽然看着简单，但处理软件依赖和系统环境可能会遇到很多小问题，需要耐心逐个解决。<br><span id="more"></span></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>打包Flask应用及其所有所需的环境为镜像，用户拉取镜像后直接运行即可使用服务。</p><p>环境依赖包含显卡驱动、编译器、所需文件和Python包等。</p><p>注意打包的机器的操作系统不很重要，但架构很重要，最好保持打包机的架构与要部署的服务器架构一致（amd64、arm64）。</p><blockquote><p>有一些工具和技术可以帮助实现跨架构的镜像构建，例如 buildx 工具和多架构的 Docker 镜像。buildx 是 Docker 的官方多架构构建工具，它可以让你在一台机器上同时构建多个不同架构的镜像。多架构的 Docker 镜像则允许你在同一个镜像中包含多个架构的二进制文件，使其适用于不同的机器。</p></blockquote><h2 id="修改地址"><a href="#修改地址" class="headerlink" title="修改地址"></a>修改地址</h2><p>为了使服务能够被本机外的设备访问，需要将主机地址修改为<code>0.0.0.0</code>（或其他指定地址）。</p><p>方式一，在代码中指定配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p>方式二，通过终端命令指定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">flask run</span><br></pre></td></tr></table></figure></p><p>显然方式二更灵活些，要修改服务的配置，直接在Dockerfile中修改就可以了。</p><h2 id="导出Python的依赖"><a href="#导出Python的依赖" class="headerlink" title="导出Python的依赖"></a>导出Python的依赖</h2><p>借助pipreqs导出依赖文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line">python -m pip install pipreqs <span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line">pipreqs ./ --encoding=utf8 <span class="comment"># 在项目根目录下导出</span></span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>在项目根目录下创建Dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line"><span class="comment"># 基础镜像，这里直接选择带显卡驱动的</span></span><br><span class="line"><span class="keyword">FROM</span> nvidia/cuda:<span class="number">10.0</span>-cudnn7-runtime-ubuntu18.<span class="number">04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置程序依赖的环境</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="bash">        build-essential \</span></span><br><span class="line"><span class="bash">        cmake \</span></span><br><span class="line"><span class="bash">        curl \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">        python3-dev \</span></span><br><span class="line"><span class="bash">        python3-pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理APT包管理器缓存列表</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前项目复制到容器内，这里选择在/workspace目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动时工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装setuptools，外部库需要</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget --no-check-certificate https://pypi.python.org/packages/<span class="built_in">source</span>/s/setuptools/setuptools-19.6.tar.gz<span class="comment">#md5=c607dd118eae682c44ed146367a17e26 &amp;&amp; tar -zxvf setuptools-19.6.tar.gz &amp;&amp; cd setuptools-19.6 &amp;&amp; python3 setup.py build &amp;&amp; python3 setup.py install &amp;&amp; cd .. &amp;&amp; rm -rf setuptools-19.6</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python包</span></span><br><span class="line"><span class="comment"># 清华源： -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="comment"># 安装额外依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install torch_sparse torch_scatter</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置本地化环境变量，否则之后的Flask配置会报错</span></span><br><span class="line"><span class="comment"># 注意不要用RUN，RUN仅在本层配置</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL=C.UTF_8</span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Flask环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动命令</span></span><br><span class="line"><span class="comment"># .py启动</span></span><br><span class="line"><span class="comment"># CMD [&quot;/usr/bin/python3&quot;, &quot;/workspace/app.py&quot;]</span></span><br><span class="line"><span class="comment"># 直接启动</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>在修改环境变量的时候也是既可以在Dockerfile里写死，也可以通过容器运行命令<code>docker run</code>的<code>-e</code>参数指定。</p><h2 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h2><p>进入项目根目录执行以下命令构建Docker镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask-api .</span><br></pre></td></tr></table></figure></p><p>构建完成后可以通过<code>docker images</code>查看。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>格式为：<br><code>docker run -p host-port:container-port image-name</code></p><p>放在我这里映射到5001端口就是：<br><code>docker run -p 5001:5000 flask-api</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>以请求体为json格式为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d @path/to/file.json URL</span><br></pre></td></tr></table></figure><br>注意curl中@用于表示从文件中读取数据。</p><h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><p>保存为压缩文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o &lt;保存路径/文件名.tar&gt; &lt;镜像名称:标签&gt;</span><br></pre></td></tr></table></figure></p><h2 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h2><p>通过压缩文件导入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i &lt;镜像文件.tar&gt;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录一次打包Flask应用的过程，在Ubuntu(amd64)下。&lt;/p&gt;
&lt;p&gt;虽然看着简单，但处理软件依赖和系统环境可能会遇到很多小问题，需要耐心逐个解决。&lt;br&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
    <category term="Docker" scheme="http://silencezheng.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>特殊网络地址</title>
    <link href="http://silencezheng.top/2023/06/12/article102/"/>
    <id>http://silencezheng.top/2023/06/12/article102/</id>
    <published>2023-06-12T00:43:16.000Z</published>
    <updated>2023-06-12T01:04:11.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>127.0.0.1、localhost和0.0.0.0是网络地址中常见的一些特殊用法，它们在网络通信中有不同的含义和用途。<br><span id="more"></span></p><h2 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h2><ul><li>127.0.0.1 是 IPv4 的回环地址（loopback address），通常称为本地回环地址。所有127开头的都是回环地址。</li><li>当一个应用程序使用 127.0.0.1 作为主机地址时，它将与本地计算机上运行的应用程序进行通信。</li><li>例如，当你在浏览器中输入 <code>http://127.0.0.1</code> 或 <code>http://localhost</code> 时，它们都指向本地计算机上运行的 Web 服务器（通常是你自己的机器）。</li><li>计算机以回环地址发送的消息，并不会由链路层送走，而是被本机网络层捕获。</li></ul><h2 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h2><ul><li>localhost 是一个域名，它默认解析为 IPv4 的回环地址 127.0.0.1。</li><li>当你在浏览器或其他应用程序中使用 localhost 作为主机地址时，它实际上是指向本地计算机上运行的同一应用程序。</li><li>localhost 也可以解析为 IPv6 的回环地址 <code>::1</code>，它是 IPv6 版本的 127.0.0.1。</li></ul><h2 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title="0.0.0.0"></a>0.0.0.0</h2><ul><li>0.0.0.0 是一个特殊的 IP 地址，通常用于表示所有网络接口（所有可用的网络接口）的地址。</li><li>当一个应用程序将监听地址设置为 0.0.0.0 时，它将在所有可用的网络接口上监听传入的连接。</li><li>这样可以使应用程序对于任何通过网络接口访问的请求都可见，而不仅仅是来自本地计算机的请求。</li><li>0.0.0.0 并不是一个具体的可寻址地址，它只是一个占位符，表示监听所有可用的地址。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;127.0.0.1、localhost和0.0.0.0是网络地址中常见的一些特殊用法，它们在网络通信中有不同的含义和用途。&lt;br&gt;</summary>
    
    
    
    
    <category term="计算机网络" scheme="http://silencezheng.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot集成Swagger</title>
    <link href="http://silencezheng.top/2023/06/05/article101/"/>
    <id>http://silencezheng.top/2023/06/05/article101/</id>
    <published>2023-06-05T14:21:14.000Z</published>
    <updated>2023-06-05T14:25:24.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Swagger入门与Spring Boot集成Swagger。</p><p>简单尝试了Springfox和Springdoc，感觉Springdoc问题更少些，但文档也相对少。<br><span id="more"></span></p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>Swagger最初是由Tony Tam在2010年创建的一套开源工具，用于描述和定义RESTful API。Swagger提供了一组注解和元数据，用于描述API的基本信息、接口操作、请求参数、响应模型等。它的目标是提供一种标准的方式来定义和文档化API，以便于开发人员和消费者能够更好地理解和使用API。Tony Tam在2015年加盟SmartBear Software任VP，并将Swagger相关的企业级服务都带到了 SmartBear。</p><p>Swagger团队与OpenAPI规范进行了合作，并将Swagger规范作为OpenAPI规范的基础。OpenAPI规范是一个开放标准，用于描述和定义RESTful API的详细信息。它提供了一种机器可读的方式来描述API的结构、路径、请求和响应的参数、模型定义等。OpenAPI规范允许开发人员、工具和平台之间的互操作性，使得API的设计、开发和测试更加统一和便捷。</p><p>因此，可以说Swagger是OpenAPI规范的实现之一，Swagger提供了一套工具和框架，使得使用OpenAPI规范来描述和定义API更加简单和方便。通过Swagger工具，您可以生成符合OpenAPI规范的API文档，以及使用Swagger UI界面来浏览和测试API。</p><p>用一句话总结：Swagger围绕一个既有的规范，创造了一系列的软件工具，为开发和使用API提供了极大的便利。</p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>Swagger是一个规范和完整的框架，一个用于生成、描述、调用和可视化RESTful风格的Web服务。</p><p>有三个最知名的工具需要入门者去了解，它们分别是swagger-ui、swagger-editor和swagger-codegen。</p><h3 id="1-Swagger-UI："><a href="#1-Swagger-UI：" class="headerlink" title="1. Swagger UI："></a>1. Swagger UI：</h3><p>Swagger UI是Swagger的官方工具，用于展示和测试API文档。它提供了一个交互式的界面，使得开发人员和用户可以直观地查看和理解API的各个细节。</p><p><img src="/assets/post_img/article101/ui-api.png" alt="api"></p><p><img src="/assets/post_img/article101/ui-model.png" alt="model"></p><p>Swagger UI的主要特点包括：</p><ul><li>自动生成交互式API文档界面：Swagger UI根据API的Swagger规范生成一个可交互的网页界面，以展示API的路径、参数、模型定义、请求和响应等信息。</li><li>支持请求测试：Swagger UI允许用户在界面中直接测试API，通过提供参数、发送请求并查看响应结果，帮助开发人员进行API的调试和测试。</li><li>多种展示方式：Swagger UI提供了多种展示方式，如可折叠的API路径列表、可切换的主题样式等，使得用户能够以自己喜欢的方式查看和使用API文档。</li></ul><h3 id="2-Swagger-Editor："><a href="#2-Swagger-Editor：" class="headerlink" title="2. Swagger Editor："></a>2. Swagger Editor：</h3><p>Swagger Editor是Swagger提供的一个在线编辑器，用于编写、定义和验证Swagger规范的API文档。它为开发人员提供了一个方便的界面来创建和编辑API文档，并即时反馈验证结果和错误信息。</p><p><img src="/assets/post_img/article101/editor.png" alt="editor"></p><p>Swagger Editor的主要特点包括：</p><ul><li>在线编辑器：Swagger Editor可以直接在网页中进行API文档的编写和编辑，而无需额外的编辑器或工具。</li><li>即时验证：Swagger Editor可以即时验证API文档的正确性和合法性，通过检查Swagger规范的语法、格式和规则，提供实时的反馈和错误提示。</li><li>Swagger规范支持：Swagger Editor完全支持Swagger规范，并提供了丰富的自动补全、代码提示和文档辅助功能，使得编写和编辑Swagger规范更加高效和准确。</li></ul><h3 id="3-Swagger-Codegen："><a href="#3-Swagger-Codegen：" class="headerlink" title="3. Swagger Codegen："></a>3. Swagger Codegen：</h3><p>Swagger Codegen是Swagger提供的一个代码生成工具，用于根据API文档生成各种编程语言的客户端和服务器端代码。它简化了开发人员根据API文档手动编写代码的过程，提高了开发效率和代码的一致性。</p><p>Swagger Codegen的主要特点包括：</p><ul><li>多语言支持：Swagger Codegen支持生成多种编程语言的代码，包括Java、JavaScript、Python、Ruby、C#等，使得开发人员可以根据自己的喜好和需求选择适合的语言。</li><li>自定义模板：Swagger Codegen允许开发人员根据自己的需求自定义代码生成的模板，以适应不同的编码风格和规范要求。</li><li>代码生成命令行工具：Swagger Codegen提供了命令行工具，可以方便地从Swagger规范文件生成代码，减少了手动编写代码的工作量。</li></ul><h2 id="Springfox"><a href="#Springfox" class="headerlink" title="Springfox"></a>Springfox</h2><p>Springfox是一个用于自动生成和展示RESTful API文档的Java库（Spring社区项目，非官方），与Swagger规范兼容，并提供了一套工具使得在Spring Boot应用程序中使用Swagger变得更加简单和便捷。   </p><p>下面我用一个例子来演示如何在Spring Boot应用中集成Springfox。</p><h3 id="1-引入Springfox依赖"><a href="#1-引入Springfox依赖" class="headerlink" title="1. 引入Springfox依赖"></a>1. 引入Springfox依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// author: SilenceZheng66</span><br><span class="line"><span class="comment">&lt;!--引入swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建配置类"><a href="#2-创建配置类" class="headerlink" title="2. 创建配置类"></a>2. 创建配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.slz.swagger.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .pathMapping(<span class="string">&quot;/&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-写个响应类"><a href="#3-写个响应类" class="headerlink" title="3. 写个响应类"></a>3. 写个响应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAILED = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-写个控制器"><a href="#4-写个控制器" class="headerlink" title="4. 写个控制器"></a>4. 写个控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;DummyHello&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Say Hello&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(Result.SUCCESS, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h3><p>直接进入地址 <code>http://localhost:8080/swagger-ui/index.html#/</code></p><p><img src="/assets/post_img/article101/springfox.png" alt="springfox"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Springfox在部署过程中，会出现一些问题：</p><h4 id="在-Spring-Boot3-x-x-下报Servlet缺失错误"><a href="#在-Spring-Boot3-x-x-下报Servlet缺失错误" class="headerlink" title="在 Spring Boot3.x.x 下报Servlet缺失错误"></a>在 Spring Boot3.x.x 下报Servlet缺失错误</h4><p>报错信息：<code>Type javax.servlet.http.HttpServletRequest not present</code></p><p>原因分析：Spring Boot3要求最低Java17，它使用jakarta命名空间而不是javax，但是Swagger仍然使用旧版本的命名空间。</p><blockquote><p>自Java EE 8起，Java EE已改名为Jakarta EE。Jakarta EE是一个开放的企业级Java平台，由Eclipse Foundation进行管理和发展。它是构建企业级Java应用程序的一组规范和技术。</p><p>Jakarta EE使用Jakarta命名空间，以避免与Oracle拥有的Java EE命名空间产生冲突。Jakarta命名空间用于标识与Java EE兼容的API和技术。例如，以前的javax.servlet包已经迁移到了jakarta.servlet包。类似地，其他Java EE规范和API也被迁移到了对应的Jakarta命名空间。</p></blockquote><p>解决方案：添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// author: SilenceZheng66</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-Spring-Boot2-7-8-下报空指针错误"><a href="#在-Spring-Boot2-7-8-下报空指针错误" class="headerlink" title="在 Spring Boot2.7.8 下报空指针错误"></a>在 Spring Boot2.7.8 下报空指针错误</h4><p>报错信息：<code>Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException: Cannot invoke &quot;org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()&quot; because &quot;this.condition&quot; is null</code></p><p>原因分析：Spring Boot2.6.x 以上的版本默认情况下使用的是基于Servlet的路径匹配方案，该方案使用了PathPatternParser来解析和匹配路径模式。Springfox中关于<code>getPatternsCondition</code>的代码有问题，导致空指针异常。</p><blockquote><p>PathPatternParser和AntPathMatcher是Spring Framework中用于路径匹配的两个不同的类。</p><p>AntPathMatcher是在较早的版本中引入的，它使用Ant风格的路径模式语法进行路径匹配，例如/users/*/profile。它提供了一些功能强大的特性，例如通配符匹配、路径变量、路径扩展等。AntPathMatcher是Spring Framework中常用的路径匹配工具，被广泛用于处理URL路径的匹配和请求映射等场景。</p><p>PathPatternParser是在较新的版本中引入的，它提供了更灵活和强大的路径模式解析和匹配功能。它支持多种路径模式语法，包括Ant风格和Servlet风格，并提供了更精确的路径匹配规则。PathPatternParser在设计上更加统一和一致，可以处理更复杂的路径匹配需求，并且与Servlet规范更加兼容。</p></blockquote><p>解决方案：更改Spring MVC的路径匹配策略为AntPathMatcher，在Spring Boot 默认配置文件中增加<code>spring.mvc.pathmatch.matching-strategy=ant_path_matcher</code>（KV格式）。</p><h2 id="Springdoc（推荐）"><a href="#Springdoc（推荐）" class="headerlink" title="Springdoc（推荐）"></a>Springdoc（推荐）</h2><p>Springdoc-openapi java库有助于使用 spring boot 项目自动生成 API 文档。 Springdoc通过在运行时检查应用程序以根据 spring 配置、类结构和各种注释推断 API 语义来工作。可以使用 swagger-api 通过注释来自动生成 JSON/YAML 和 HTML 格式 API 的文档。</p><p>该库支持：</p><ul><li>OpenAPI 3</li><li>Spring-boot v3 (Java 17 &amp; Jakarta EE 9)</li><li>JSR-303, specifically for @NotNull, @Min, @Max, and @Size.</li><li>Swagger-ui</li><li>OAuth 2</li><li>GraalVM native images</li></ul><p>下面演示如何在Spring Boot3.x.x中集成Springdoc，参考文档见<a href="https://springdoc.org/index.html#migrating-from-springfox">这里</a>。</p><h3 id="1-引入Springdoc依赖"><a href="#1-引入Springdoc依赖" class="headerlink" title="1. 引入Springdoc依赖"></a>1. 引入Springdoc依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// author: SilenceZheng66</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建配置类-1"><a href="#2-创建配置类-1" class="headerlink" title="2. 创建配置类"></a>2. 创建配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdocConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GroupedOpenApi <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .packagesToScan(<span class="string">&quot;com.slz.swagger.controller&quot;</span>)</span><br><span class="line">                .group(<span class="string">&quot;springdoc-demo&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-写个响应类-1"><a href="#3-写个响应类-1" class="headerlink" title="3. 写个响应类"></a>3. 写个响应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAILED = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-写个控制器-1"><a href="#4-写个控制器-1" class="headerlink" title="4. 写个控制器"></a>4. 写个控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;hello api&quot;, description = &quot;Dummy Hello&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;hello api&quot;, description = &quot;hello api for test&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(value = &#123;</span></span><br><span class="line"><span class="meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;Valid input&quot;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(responseCode = &quot;405&quot;, description = &quot;Invalid input&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(Result.SUCCESS, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-启动-1"><a href="#5-启动-1" class="headerlink" title="5. 启动"></a>5. 启动</h3><p>直接进入地址 <code>http://localhost:8080/swagger-ui/index.html#/</code></p><p><img src="/assets/post_img/article101/springdoc.png" alt="springdoc"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://swagger.io/resources/open-api/">https://swagger.io/resources/open-api/</a><br>[2] <a href="https://github.com/swagger-api">https://github.com/swagger-api</a><br>[3] <a href="https://github.com/springfox/springfox">https://github.com/springfox/springfox</a><br>[4] <a href="https://blog.csdn.net/long199366/article/details/114388171">https://blog.csdn.net/long199366/article/details/114388171</a><br>[5] <a href="http://springfox.github.io/springfox/docs/current/">http://springfox.github.io/springfox/docs/current/</a><br>[6] <a href="https://blog.csdn.net/qq_42495847/article/details/121424122">https://blog.csdn.net/qq_42495847/article/details/121424122</a><br>[7] <a href="https://stackoverflow.com/questions/71549614/springfox-type-javax-servlet-http-httpservletrequest-not-present">https://stackoverflow.com/questions/71549614/springfox-type-javax-servlet-http-httpservletrequest-not-present</a><br>[8] <a href="https://blog.csdn.net/m0_52457066/article/details/129094931">https://blog.csdn.net/m0_52457066/article/details/129094931</a><br>[9] <a href="https://blog.csdn.net/kkorkk/article/details/123774484">https://blog.csdn.net/kkorkk/article/details/123774484</a><br>[10] <a href="https://springdoc.org/v2/">https://springdoc.org/v2/</a><br>[11] <a href="https://springdoc.org/index.html#migrating-from-springfox">https://springdoc.org/index.html#migrating-from-springfox</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Swagger入门与Spring Boot集成Swagger。&lt;/p&gt;
&lt;p&gt;简单尝试了Springfox和Springdoc，感觉Springdoc问题更少些，但文档也相对少。&lt;br&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>公钥检索与常见错误</title>
    <link href="http://silencezheng.top/2023/04/11/article100/"/>
    <id>http://silencezheng.top/2023/04/11/article100/</id>
    <published>2023-04-11T06:46:45.000Z</published>
    <updated>2023-04-11T06:51:00.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在写Java的时候发现的一个报错:<br><code>java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed</code></p><p>经过一番搜索，发现主要是与MySQL版本相关，由TLS连接引起。<br><span id="more"></span></p><h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><p>考虑到有些同学只想“知其然”，先把解决方式贴出来。</p><p>引起该报错首先确定MySQL服务器的版本多半大于<code>MySQL 5.7.28</code>（当然不排除是这之前的版本但手动开启了TLS加密）。并且，多半是由于在连接时禁用了SSL。</p><p>考虑以下解决方式：</p><ol><li>开启SSL连接。</li><li>添加连接参数<code>allowPublicKeyRetrieval=true</code>。</li><li>提高JDBC版本，与服务器版本匹配（玄学）。</li></ol><h2 id="JDBC连接参数：useSSL"><a href="#JDBC连接参数：useSSL" class="headerlink" title="JDBC连接参数：useSSL"></a>JDBC连接参数：useSSL</h2><p>JDBC的useSSL是一个连接选项，用于控制在JDBC连接过程中是否启用加密连接，虽然叫SSL，但其实是TLS了。</p><p>当<code>useSSL=true</code>时，JDBC会使用SSL连接到MySQL服务器。在这种情况下，JDBC会在握手过程中验证MySQL服务器的证书，以确保与正确的服务器建立连接。同时，JDBC也会使用SSL协议对数据进行加密和解密，以保护数据传输的安全性。</p><p>当<code>useSSL=false</code>时，JDBC不会使用SSL连接到MySQL服务器。在这种情况下，JDBC会以普通的方式连接到MySQL服务器，并使用明文传输数据。这种情况下的连接可能会存在安全隐患，因为数据在传输过程中可能会被拦截和窃听。</p><p>我们可以通过抓包来验证，首先是在开启SSL的情况下：</p><p><img src="/assets/post_img/article100/useSSL.png" alt="useSSL"></p><p>此时Username不可见，然后关闭SSL再抓：</p><p><img src="/assets/post_img/article100/notUseSSL.png" alt="noUseSSL"></p><p>此时数据以明文的方式传输，但密码仍然经过加密处理（RSA），这是由于MySQL的身份验证机制。</p><h2 id="MySQL身份验证"><a href="#MySQL身份验证" class="headerlink" title="MySQL身份验证"></a>MySQL身份验证</h2><p>在MySQL 8.0之前，当MySQL客户端连接到启用了SSL加密的MySQL服务器时，会自动从服务器端下载SSL证书的公钥，以便进行SSL握手协议，从而确保客户端与服务器之间通信的机密性和完整性。但是，这个过程可能存在潜在的安全风险，因为MySQL客户端在下载公钥的过程中，可能会遭受中间人攻击。</p><p>为了解决这个安全问题，MySQL 8.0引入了Public Key Retrieval特性，它允许MySQL服务器在SSL握手协议中，发送服务器端SSL证书的SHA-256指纹（SHA-256 Fingerprint）而不是公钥。MySQL客户端可以使用这个指纹，从一个可信任的位置（如本地文件系统、内存缓存或PKCS#11设备）获取服务器端SSL证书的公钥，从而避免了中间人攻击。</p><p>在 MySQL 8.0 版本中，身份验证插件是一个可插拔的模块，用于控制 MySQL 用户身份验证的方式。在以前的 MySQL 版本中，使用的身份验证插件是 “mysql_native_password”，而在 MySQL 8.0 中，则使用   “caching_sha2_password”，这是一个更强大和更安全的插件，它使用 SHA-256 哈希函数（好像也不一定，只是SHA2）来加密密码，并提供了密码过期和密码历史记录功能，以增强数据库的安全性。</p><p>在 MySQL 8.0 中，还提供了另外两个身份验证插件，分别是 “sha256_password” 和 “mysql_old_password”。其中 “sha256_password” 也使用 SHA-256 哈希函数进行密码加密，但它不支持密码过期和密码历史记录功能。而 “mysql_old_password” 是用于向前兼容以前版本的 MySQL，它使用旧的加密方法。</p><h2 id="报错分析"><a href="#报错分析" class="headerlink" title="报错分析"></a>报错分析</h2><blockquote><p>对于使用 caching_sha2_password 插件的客户端，在连接到服务器时，密码永远不会以明文形式公开。密码传输的方式取决于是否使用安全连接或 RSA 加密：</p><p>如果连接是安全的，则不需要 RSA 密钥对，也不会使用它。这适用于使用 TLS 加密的 TCP 连接，以及 Unix 套接字文件和共享内存连接。密码以明文形式发送，但不能被窥探，因为连接是安全的。</p><p>如果连接不安全，则使用 RSA 密钥对。这适用于未使用 TLS 加密的 TCP 连接和命名管道连接。RSA 仅用于客户端和服务器之间的密码交换，以防止密码窥探。当服务器收到加密的密码时，它会对其进行解密。在加密中使用加扰来防止重复攻击。</p></blockquote><p>由于笔者使用的MySQL为8.0版本，默认使用”caching_sha2_password”插件进行身份验证，当关闭SSL时，该插件发现连接未加密，因此要求使用 RSA 加密传输密码。但是服务端并没有将公钥发送给客户端，而客户端又无法在可信位置检索到公钥，所以无法加密密码，导致报错。</p><p>基于以上分析，可以提出两种解决方案：</p><ol><li>改用加密连接。</li><li>在不用加密连接的同时，让客户端从服务器获取公钥。</li></ol><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>MySQL服务器版本：8.0.32，在每次成功连接后重启服务器，否则连接成功后会出现登录缓存，导致错误无法复现。</p><div class="table-container"><table><thead><tr><th style="text-align:center">mysql-connector-java</th><th style="text-align:center">useSSL</th><th style="text-align:center">allowPublicKeyRetrieval</th><th style="text-align:center">success</th></tr></thead><tbody><tr><td style="text-align:center">5.1.47</td><td style="text-align:center">false</td><td style="text-align:center"></td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">5.1.47</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">5.1.47</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.23</td><td style="text-align:center">false</td><td style="text-align:center"></td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">8.0.23</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.23</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.32</td><td style="text-align:center">false</td><td style="text-align:center"></td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">8.0.32</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">8.0.32</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr></tbody></table></div><p>根据实验结果，基本上可以验证之前的想法，且可以判断JDBC连接默认开启SSL并关闭allowPublicKeyRetrieval。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html">https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html</a><br>[2] <a href="https://silencezheng.top/2022/05/26/article41/">https://silencezheng.top/2022/05/26/article41/</a><br>[3] <a href="https://cloud.tencent.com/developer/news/791903">https://cloud.tencent.com/developer/news/791903</a><br>[4] <a href="https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html">https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-protocols-ciphers.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在写Java的时候发现的一个报错:&lt;br&gt;&lt;code&gt;java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;经过一番搜索，发现主要是与MySQL版本相关，由TLS连接引起。&lt;br&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://silencezheng.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus之select报错</title>
    <link href="http://silencezheng.top/2023/03/23/article99/"/>
    <id>http://silencezheng.top/2023/03/23/article99/</id>
    <published>2023-03-23T13:13:54.000Z</published>
    <updated>2023-06-18T05:11:00.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mybatis-Plus中使用Mapper进行select查询实体时，可能会遇到Invalid value for getInt()的报错，然而对应字段往往和Integer无关。</p><span id="more"></span><p>这个错误很好理解，通常是由于数据库表中的字段数据类型和实体类的对应属性数据类型不匹配，但这些很容易检查，基本不可能出错。</p><p>但在确认没有正常问题时，需要检查是否存在对实体定义了含参构造函数，而没有给出无参构造函数的情况。在这种情况下，这个错误就会莫名出现。</p><p>关于这个BUG的一种猜测是：Java在没有自定义构造函数的时候会默认有一个空构造函数，但是自定义后就没有了。也许Mybatis执行select的时候是先创建对象（找不到无参构造），再给对象设置参数的。</p><p>具体原因需要看源码才能知道。</p><p>参考：<a href="https://blog.csdn.net/W1948730080/article/details/105123966">https://blog.csdn.net/W1948730080/article/details/105123966</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Mybatis-Plus中使用Mapper进行select查询实体时，可能会遇到Invalid value for getInt()的报错，然而对应字段往往和Integer无关。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="MyBatis" scheme="http://silencezheng.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>M系Mac重装MySQL</title>
    <link href="http://silencezheng.top/2023/03/17/article98/"/>
    <id>http://silencezheng.top/2023/03/17/article98/</id>
    <published>2023-03-17T05:39:15.000Z</published>
    <updated>2023-03-17T05:40:07.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于原本的MySQL8抽风，经常<code>Communications link failure</code>和<code>ERROR 2013 (HY000): Lost connection to MySQL server during query</code>，各种方法试过后都无法解决，只好卸载重装了。</p><span id="more"></span><h2 id="卸载原有的MySQL"><a href="#卸载原有的MySQL" class="headerlink" title="卸载原有的MySQL"></a>卸载原有的MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo下进入/usr/<span class="built_in">local</span>，关闭mysql后执行如下命令：</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/mysql*</span><br><span class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</span><br><span class="line">sudo rm -rf /Library/PreferencePanes/My*</span><br><span class="line">rm -rf ~/Library/PreferencePanes/My*</span><br><span class="line">sudo rm -rf /Library/Receipts/mysql*</span><br><span class="line">sudo rm -rf /Library/Receipts/MySQL*</span><br><span class="line">sudo rm -rf /var/db/receipts/com.mysql.*</span><br><span class="line">sudo rm /tmp/mysqlx.sock /tmp/mysqlx.sock.lock</span><br></pre></td></tr></table></figure><blockquote><p>如果你不是默认路径安装的或者忘记了是不是默认路径安装的，那么除了执行上面的命令之外，还要检查以下文件中是否有对应的文件，有的话删除即可。<br>检查 /usr/local/Cellar 目录是否有mysql文件，有的话删除。<br>检查 /usr/local/var 里的mysql文件，有的话删除。<br>检查 /tmp 里的 mysql.sock、mysql.sock.lock、my.cnf 文件，有的话删除。<br>err文件以及pid文件都是在 /usr/local/var/mysql 中，有的话删除。<br>brew安装的安装包存储在 /usr/local/Library/Cache/Homebrew ，有的话删除。<br>一定要记得执行brew cleanup。</p></blockquote><h2 id="下载对应版本的MySQL"><a href="#下载对应版本的MySQL" class="headerlink" title="下载对应版本的MySQL"></a>下载对应版本的MySQL</h2><p><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>一路默认安装，记得输入管理员密码～</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于原本的MySQL8抽风，经常&lt;code&gt;Communications link failure&lt;/code&gt;和&lt;code&gt;ERROR 2013 (HY000): Lost connection to MySQL server during query&lt;/code&gt;，各种方法试过后都无法解决，只好卸载重装了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="MacOS" scheme="http://silencezheng.top/tags/MacOS/"/>
    
    <category term="MySQL" scheme="http://silencezheng.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Java常见对象辨析</title>
    <link href="http://silencezheng.top/2023/03/12/article97/"/>
    <id>http://silencezheng.top/2023/03/12/article97/</id>
    <published>2023-03-12T09:34:02.000Z</published>
    <updated>2023-03-12T09:35:45.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些Java常见Object简称解读。</p><p>VO、PO、BO、TO、DAO、DTO<br><span id="more"></span></p><h2 id="Data-Access-Object-DAO"><a href="#Data-Access-Object-DAO" class="headerlink" title="Data Access Object(DAO)"></a>Data Access Object(DAO)</h2><p>数据访问对象，是sun的一个标准j2ee设计模式，此对象用于访问数据库。通常和PO结合使用，DAO中包含了各种数据库的操作方法，夹在业务逻辑与数据库操作中间的操作层。</p><h2 id="Persistant-Object-PO"><a href="#Persistant-Object-PO" class="headerlink" title="Persistant Object(PO)"></a>Persistant Object(PO)</h2><p>PO可以看成是与数据库中的表相映射的java对象。最简单的PO就是对应数据库中某个表中的一条记录，多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。 好处就是可以把一条记录作为一个对象处理，可以方便的转为其他对象。</p><p>PO由一组属性和属性的get和set方法组成，这些属性是跟数据库表的字段一一对应的。PO对象需要实现序列化接口，它们在向数据库中添加新数据时被创建，删除数据库中数据时削除。并且PO只能存活在一个数据库连接中，断开连接就被销毁。</p><p>PO是有状态的，每个属性代表其当前的状态，他是物理数据的对象表示。使用它，可以使我们的程序与物理数据解耦，并且可以简化对象数据与物理数据之间的转换。</p><h2 id="Business-Object-BO"><a href="#Business-Object-BO" class="headerlink" title="Business Object(BO)"></a>Business Object(BO)</h2><p>业务对象，封装业务相关内容的java对象，其内容既可以只包含业务对象属性，也可以只包含业务方法，或是全包含。</p><p>一种常见的模式是把BO的信息在PO信息的基础上进行扩充，可以理解为多个PO对象的信息按照业务流程必要的拼凑在一起形成的对象。</p><h2 id="Data-Transfer-Object-DTO"><a href="#Data-Transfer-Object-DTO" class="headerlink" title="Data Transfer Object(DTO)"></a>Data Transfer Object(DTO)</h2><p>数据传输对象主要用于需要大量传输对象的地方，在已有数据基础上进行过滤筛选。 比如说，我们一张表有100个字段，那么对应的PO就有100个属性。但是我们界面上只要显示10个字段，客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构。到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO。 </p><p>DTO是一组需要跨进程或网络边界传输的聚合数据的简单容器。它不应该包含业务逻辑，也不应该将其行为限制为诸如内部一致性检查和基本验证之类的活动。</p><h2 id="Value-Object-VO"><a href="#Value-Object-VO" class="headerlink" title="Value Object(VO)"></a>Value Object(VO)</h2><p>值对象，通常用于业务层之间（前后端之间）的数据传递，仅包含数据。可以理解为展示要用的数据，传递到前端页面上，直接进行展示。</p><h2 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h2><p>一种常见的各对象间的层级关系如下图所示，但最终还是要回归于业务，根据业务对数据处理流程进行缩减或扩充。</p><p><img src="/assets/post_img/article97/objs.png" alt="obj layers"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.csdn.net/weixin_42501850/article/details/114309927">https://blog.csdn.net/weixin_42501850/article/details/114309927</a></p><p>[2] <a href="https://blog.csdn.net/weixin_33038783/article/details/114603926">https://blog.csdn.net/weixin_33038783/article/details/114603926</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一些Java常见Object简称解读。&lt;/p&gt;
&lt;p&gt;VO、PO、BO、TO、DAO、DTO&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows10深度学习环境配置</title>
    <link href="http://silencezheng.top/2023/02/25/article96/"/>
    <id>http://silencezheng.top/2023/02/25/article96/</id>
    <published>2023-02-25T03:54:00.000Z</published>
    <updated>2023-02-25T03:55:39.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Windows10深度学习环境配置，cuda11.6。</p><ul><li>anaconda</li><li>cudatoolkit</li><li>cudnn</li><li>pytorch</li><li>tensorflow<span id="more"></span></li></ul><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p><a href="https://www.anaconda.com/products/individual">anaconda</a></p><h2 id="Cudatoolkit"><a href="#Cudatoolkit" class="headerlink" title="Cudatoolkit"></a>Cudatoolkit</h2><p><a href="https://developer.nvidia.com/cuda-11-6-0-download-archive">11.6</a></p><p>全程默认安装，cmd输入<code>nvcc -V</code>检验是否按照成功。</p><h3 id="可能需要的环境变量"><a href="#可能需要的环境变量" class="headerlink" title="可能需要的环境变量"></a>可能需要的环境变量</h3><p><img src="/assets/post_img/article96/path.png" alt="path"></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如正常应用程序卸载即可，只留下：<code>NVIDIA的图形驱动程序、NVIDIA Physx系统软件、NVIDIA GeForce Experience</code>。</p><h2 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h2><p><a href="https://developer.nvidia.cn/rdp/cudnn-archive">https://developer.nvidia.cn/rdp/cudnn-archive</a></p><p>需要注册账户，选择与cudatoolkit对应的cuDNN版本进行下载。</p><p>下载下来后，把各文件夹的内容放到CUDA对应目录下。</p><h2 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h2><p>对于<code>cudatoolkit==11.6</code>，按照官网教程安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=11.6 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure><p>检验：<code>torch.cuda.isavailable()</code></p><h2 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h2><p><code>python -m pip install tensorflow==2.10.0</code>，2.10.0为最后一个支持Windows调用GPU的版本。</p><p>检验：<code>tf.config.list_physical_devices(&#39;GPU&#39;)</code></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Windows10深度学习环境配置，cuda11.6。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anaconda&lt;/li&gt;
&lt;li&gt;cudatoolkit&lt;/li&gt;
&lt;li&gt;cudnn&lt;/li&gt;
&lt;li&gt;pytorch&lt;/li&gt;
&lt;li&gt;tensorflow</summary>
    
    
    
    
    <category term="深度学习" scheme="http://silencezheng.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Windows" scheme="http://silencezheng.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下MySQL无法启动</title>
    <link href="http://silencezheng.top/2023/02/09/article95/"/>
    <id>http://silencezheng.top/2023/02/09/article95/</id>
    <published>2023-02-09T05:37:30.000Z</published>
    <updated>2023-02-17T11:43:56.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mac下长时间没有使用MySQL，会发现无法启动。</p><span id="more"></span><p>原因可能是目录<code>/usr/local/mysql/data/</code>的mysql拥有者权限发生了变更，没有写的权限，所以需要对该目录赋予写的权限，操作命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R mysql /usr/<span class="built_in">local</span>/mysql/data</span><br></pre></td></tr></table></figure><p>然后再启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server start</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/358820231">https://zhuanlan.zhihu.com/p/358820231</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Mac下长时间没有使用MySQL，会发现无法启动。&lt;/p&gt;</summary>
    
    
    
    
    <category term="MacOS" scheme="http://silencezheng.top/tags/MacOS/"/>
    
    <category term="MySQL" scheme="http://silencezheng.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>反射的基本理解</title>
    <link href="http://silencezheng.top/2023/01/29/article94/"/>
    <id>http://silencezheng.top/2023/01/29/article94/</id>
    <published>2023-01-29T12:44:36.000Z</published>
    <updated>2023-01-29T13:03:50.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>反射是Java众多框架的基石，开发中我们或许很少真的去写，但需要有基本的了解。</p><span id="more"></span><h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><p>我们都知道，Java数据类型包括基本类型和引用类型，引用类型又包括数组（array）、类（class）和接口（interface）。事实上，我们可以从创建时是否需要使用<code>new</code>关键字来判断这一点。</p><p>在Java中，所有数据类型都实现了<code>Type</code>接口，如果你不相信，请打开你的编辑器输入以下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">System.out.println(<span class="keyword">int</span>.class.getTypeName()); <span class="comment">// int</span></span><br><span class="line">System.out.println(String.class.getTypeName()); <span class="comment">// java.lang.String[]</span></span><br><span class="line">System.out.println(<span class="keyword">float</span>[].class.getTypeName()); <span class="comment">// float[]</span></span><br><span class="line">System.out.println(Type.class.getTypeName()); <span class="comment">// java.lang.reflect.Type</span></span><br></pre></td></tr></table></figure><blockquote><p>Type存在于java.lang.reflect下，是所有Java类型的通用超级接口。其中包括原始类型(raw types)、参数化类型(parameterized types)、数组类型(array types)、类型变量(type variables)和基本类型(primitive types)。</p></blockquote><p>Wait，这好像有点神奇，<code>数据类型名.class</code> 到底是什么？我们现在唯一可以确定的是，它是一个具有<code>getTypeName()</code>方法的<strong>对象</strong>（或称为<strong>实例</strong>，这是为了与“类”的概念进行区分，具体与抽象的区别）。让我们来试试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">System.out.println(<span class="keyword">int</span>.class); <span class="comment">// int</span></span><br><span class="line">System.out.println(String[].class); <span class="comment">// class [Ljava.lang.String;</span></span><br><span class="line">System.out.println(<span class="keyword">float</span>[].class); <span class="comment">// class [F</span></span><br><span class="line">System.out.println(Type.class); <span class="comment">// interface java.lang.reflect.Type</span></span><br></pre></td></tr></table></figure><p>OK，这个对象还拥有<code>toString()</code>方法，似乎我们可以通过它获取主体的数据类型，举例来说，对数据类型 <code>String[]</code>，其结果为<code>class [Ljava.lang.String;</code>，前面的 <code>class</code> 表明这是一个<strong>类</strong>，后面的 <code>[Ljava.lang.String</code> 则是 <code>String类型一维数组</code> 的<strong>类名</strong>。</p><p>你可能会感到奇怪，为什么数组会是一个类？数组和类明明是两种不同的数据类型啊。我们可以从 <code>Object</code> 中找到答案。</p><blockquote><p>Class Object is the root of the class hierarchy. Every class has Object as a superclass. All objects, including arrays, implement the methods of this class.</p></blockquote><p>而 <code>Object</code> 是如何定义的呢？<code>public class Object</code> ！因此，Java数组也是一个 <code>class</code>，但它的实现是存在于Java的语言实现层面（C/C++），而非Java类库层面（我们要清楚我们平时所称的“Java源码”其实上不是Java语言的实现，而是用Java语言编写的Java类库）。Java数组类是由JVM在运行时创建的，所以无法在JDK的Java类库中找到。</p><p>基于此，我们也可以延伸出一个话题，<strong>数据类型中的类与Java中的<code>class</code>关键字有什么关系？</strong> 这里我给出个人总结的结论：数据类型中的类是指使用<code>class</code>关键字声明的抽象结构。而方才程序的输出是从更底层的角度看待数据类型，在Java语言的实现层面，数组与类都是<code>class</code>，Java只支持 <code>class</code> 和 <code>interface</code> 两种声明抽象结构的关键字。</p><blockquote><p>笔者个人认为这个理解对于目前来说够用了，再深入的话可能需要了解一下JVM相关知识，Oop-Klass模型和类加载这些东西。</p></blockquote><p>下面我们来研究另外的一些问题，<code>数据类型名.class</code>为什么会产生一个类的实例？这个实例到底是什么？</p><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>除去基本类型外，所有的 <code>class｜interface</code> 都是由JVM在执行过程中动态加载的。JVM在第一次读取到一种 <code>class｜interface</code> 类型（这里指类元数据，而非实例）时，将其加载入内存。</p><p>每加载一种<code>class｜interface</code>，JVM就为其创建一个<code>Class</code>类型的<strong>实例</strong>，并关联起来。</p><blockquote><p><code>Class</code>是一个Java类（准确来说，一个泛型类），类名为<code>Class</code>。该类的全名为 <code>java.lang.Class</code> 。</p></blockquote><p>以<code>String</code>类为例，当JVM加载<code>String</code>类时，它首先读取<code>String.class</code>文件到内存，然后，为<code>String</code>类创建一个Class实例并关联起来，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Class strClass = <span class="keyword">new</span> Class(String);</span><br></pre></td></tr></table></figure><p>这个<code>Class</code>实例是JVM内部创建的，如果查看类库源码，可以发现<code>Class</code>类的构造方法是<code>private</code>，只有JVM能创建<code>Class</code>实例，我们自己的Java程序是无法创建<code>Class</code>实例的。</p><p>你可能会好奇<code>String.class</code>在哪里，它是Java运行时环境（JRE）的一部分（如果你真的想找到它，它存在于<code>rt.jar</code>中），可以理解为 <code>String.java</code> 编译后的结果。我们知道Java程序在运行时首先被编译为二进制Java字节码（.class文件），然后JVM负责将字节码交给解释器执行。因此JVM可以从运行环境读取<code>String.class</code>文件。</p><p>所以，<strong>JVM持有的每个<code>Class</code>实例都指向一个数据类型</strong>。等等，虽然我们刚刚论证了数组、类和接口都属于 <code>class｜interface</code> 的范畴，但基本类型呢？<code>基本类型.class</code>也能提供实例，但显然它们不存在对应的 <code>.class</code> 字节码文件，因为它们是Java的关键字！</p><p>其实，Java中有九个预定义的 <code>Class</code> 对象来表示八个基本类型和 <code>void</code>。它们由JVM创建，并与它们所代表的原始类型具有相同的名称。这与数组有些相似，它们都是在Java的语言实现层面定义的，所以没有对应的 <code>.class</code> 字节码文件。不仅如此，<code>Class</code> 类中许多方法（如判断对象是否为接口、数组、基本类型）都是 <code>native method</code>，这意味着它是使用底层语言（C/C++）实现的，而非Java语言。</p><p>解释了这个问题后，我们继续回到<code>Class</code>实例上，<strong>每个 <code>Class</code> 实例都包含了对应数据类型的完整信息</strong>（修饰词、包名、父类、实现的接口、字段、方法…），下面是示意图：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│<span class="attr">name</span> = <span class="string">&quot;java.lang.String&quot;</span>  │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│<span class="attr">package</span> = <span class="string">&quot;java.lang&quot;</span>      │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│<span class="attr">super</span> = <span class="string">&quot;java.lang.Object&quot;</span> │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│<span class="attr">interface</span> = CharSequence...│</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│<span class="attr">field</span> = value[],hash,...   │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│<span class="attr">method</span> = indexOf()...      │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p>如果我们想要查看这些信息，可以调用实例的对应方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Class&lt;String&gt; str = String.class;</span><br><span class="line">System.out.println(str);</span><br><span class="line">System.out.println(str.getTypeName());</span><br><span class="line">System.out.println(str.getModifiers());</span><br><span class="line">System.out.println(str.getSimpleName());</span><br><span class="line">System.out.println(str.getSuperclass());</span><br><span class="line">System.out.println(Arrays.toString(str.getInterfaces()));</span><br><span class="line">System.out.println(Arrays.toString(str.getFields()));</span><br><span class="line">System.out.println(Arrays.toString(str.getMethods()));</span><br></pre></td></tr></table></figure><p>总之，<code>Class</code>类的实例代表了<em>运行的Java程序</em>中的“万事万物”，所有的类和接口以及原始类型都对应某种<code>Class</code>对象，枚举（类的一种）、注解（接口的一种）以及数组也有其对应的<code>Class</code>对象，甚至关键字 <code>void</code> 也对应一个<code>Class</code>对象。我们之前通过 <code>数据类型.class</code> 获取到的对象实际上就是 <code>Class</code> 对象。</p><blockquote><p>因为Java引入了泛型，所以，只用<code>Class</code>来标识类型已经不够了。实际上，Java的类型系统结构如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                      ┌────┐</span><br><span class="line">                      │<span class="keyword">Type</span>│</span><br><span class="line">                      └────┘</span><br><span class="line">                         ▲</span><br><span class="line">                         │</span><br><span class="line">   ┌────────────┬────────┴─────────┬───────────────┐</span><br><span class="line">   │            │                  │               │</span><br><span class="line">┌─────┐┌─────────────────┐┌────────────────┐┌────────────┐</span><br><span class="line">│<span class="keyword">Class</span>││ParameterizedType││GenericArrayType││WildcardType│</span><br><span class="line">└─────┘└─────────────────┘└────────────────┘└────────────┘</span><br></pre></td></tr></table></figure></blockquote><h2 id="反射（Reflection）"><a href="#反射（Reflection）" class="headerlink" title="反射（Reflection）"></a>反射（Reflection）</h2><p>在了解了 <code>Class</code> 类后，我们可以开始尝试理解反射机制。Oracle官方对于反射的解释是这样的：</p><blockquote><p>反射使 Java 代码能够发现加载类（loaded classes）的字段、方法和构造函数的信息，并使用反射的字段、方法和构造函数在安全限制内对它们的底层对应项进行操作。</p></blockquote><p>从这个解释我们能够获取两个主要信息：</p><ol><li>通过反射能够<strong>获取</strong>类的结构信息（字段、方法和构造函数）</li><li>通过反射能够<strong>操作</strong>获取到的结构信息</li></ol><p>这似乎有点熟悉，我们刚学习了 <code>Class</code> 类，通过它我们可以获取任何数据类型的全部信息！事实也是如此，<code>Class</code> 类作为反射API中的一员，被用于提供获取 <code>class｜interface</code> 相关信息的功能。</p><p>下面我们来看看如何获取一个类型的<code>Class</code>实例：</p><p><strong>方法一</strong>：通过<code>class literals</code>（类字面量）获取。</p><blockquote><p>字面量（Literal）在计算机领域通常指用于表达源代码中一个固定值的表示法。</p><p>Java中的类字面量是指形如 <code>&lt;class|interface|array|primitive type|void&gt;.class</code> 的表达式，该表达式被计算为命名类型（或 void）的 <code>Class</code> 对象，该对象由当前实例中的 defining class loader of the class 定义。</p></blockquote><p>这也正是我们一开始接触的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Class strClass = String.class;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：通过静态方法<code>Class.forName()</code>获取。</p><p>这种方法需要知道类或接口的完整名（从包开始），如<code>java.lang.Class</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Class strClass = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>方法三</strong>：对于实例，可以通过<code>getClass()</code>方法获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Class strClass = s.getClass();</span><br></pre></td></tr></table></figure><p>因为<code>Class</code>实例在JVM中是唯一的，所以，上述方法获取的<code>Class</code>实例是同一个实例(地址相同），可以通过 <code>==</code> 运算符检验。</p><p>通过该实例获取类的相关信息我们已经接触过，下面我们来看看如何使用和操作这些信息。首先给出两个类，接下来我们将围绕它们进行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String sentence)</span></span>&#123;System.out.println(sentence);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">super</span>(name);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> score, <span class="keyword">int</span> grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student Name:&quot;</span> +  <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.score;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGrade</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> grade;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h3><p><code>Class</code> 类提供了以下几个方法来获取字段：</p><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Class stdClass = Student.class;</span><br><span class="line"><span class="comment">// 获取public字段&quot;score&quot;:</span></span><br><span class="line">System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>)); <span class="comment">// public int reflection.Student.score</span></span><br><span class="line"><span class="comment">// 获取继承的public字段&quot;name&quot;:</span></span><br><span class="line">System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>)); <span class="comment">// public java.lang.String reflection.Person.name</span></span><br><span class="line"><span class="comment">// 获取private字段&quot;grade&quot;:</span></span><br><span class="line">System.out.println(stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>)); <span class="comment">// private int reflection.Student.grade</span></span><br></pre></td></tr></table></figure><p>一个 <code>Field</code> 实例包含了一个字段的所有信息：</p><ul><li>getName()：返回字段名称;</li><li>getType()：返回字段类型，也是一个Class实例;</li><li>getModifiers()：返回字段的修饰符，它是一个int，不同的bit表示不同的含义;</li></ul><p><strong>通过 <code>Field</code> 实例不仅可以获取到指定实例的字段值，还可以设置字段的值。</strong> 下面我们来一一演示。</p><p>首先获取 <code>Class</code> 实例的 <code>Field</code> 实例，并产看字段信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Field name = stdClass.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name.getName()); <span class="comment">// &quot;name&quot;</span></span><br><span class="line">System.out.println(name.getType());; <span class="comment">// class java.lang.String</span></span><br><span class="line"><span class="keyword">int</span> m = name.getModifiers();</span><br><span class="line">System.out.println(Modifier.isFinal(m)); <span class="comment">// false</span></span><br><span class="line">System.out.println(Modifier.isStatic(m)); <span class="comment">// false</span></span><br><span class="line">System.out.println(Modifier.isPublic(m)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>利用反射拿到字段的一个 <code>Field</code> 实例后，我们还可以拿到一个实例对应的该字段的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Object p = <span class="keyword">new</span> Person(<span class="string">&quot;Silence&quot;</span>);</span><br><span class="line">Class c = p.getClass();</span><br><span class="line">Field f = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// name 是 private 字段，需要设置可访问</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 获取 p 对象的 f 字段值</span></span><br><span class="line">Object value = f.get(p);</span><br><span class="line">System.out.println(value); <span class="comment">// &quot;Silence&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，以上代码不代表 <code>private、protected</code> 修饰语无用，反射是一种<strong>非常规</strong>的用法，使用反射，首先代码非常繁琐，其次，它更多地是给工具或者底层框架来使用，目的是在不知道目标实例任何信息的情况下，获取特定字段的值。</p><p>此外，<code>setAccessible(true)</code> 可能会失败。如果JVM运行期存在<code>SecurityManager</code>，那么它会根据规则进行检查，有可能阻止<code>setAccessible(true)</code>。例如，某个<code>SecurityManager</code>可能不允许对java和javax开头的package的类调用<code>setAccessible(true)</code>，这样可以保证JVM核心库的安全。</p></blockquote><p>下面我们通过 <code>Field</code> 实例设置指定实例的字段值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">f.set(p, <span class="string">&quot;Silence Zheng&quot;</span>);</span><br><span class="line">System.out.println(f.get(p)); <span class="comment">// &quot;Silence Zheng&quot;</span></span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><code>Class</code> 类提供了以下几个方法来获取 <code>Method</code> 实例：</p><ul><li>Method getMethod(name, Class…)：获取某个public的Method（包括父类）</li><li>Method getDeclaredMethod(name, Class…)：获取当前类的某个Method（不包括父类）</li><li>Method[] getMethods()：获取所有public的Method（包括父类）</li><li>Method[] getDeclaredMethods()：获取当前类的所有Method（不包括父类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="comment">// 获取继承的public方法say，参数为String:</span></span><br><span class="line">System.out.println(stdClass.getMethod(<span class="string">&quot;say&quot;</span>, String.class)); <span class="comment">// public void reflection.Person.say(java.lang.String)</span></span><br><span class="line"><span class="comment">// 获取覆盖的public方法getName，无参数:</span></span><br><span class="line">System.out.println(stdClass.getMethod(<span class="string">&quot;getName&quot;</span>)); <span class="comment">// public java.lang.String reflection.Student.getName()</span></span><br><span class="line"><span class="comment">// 获取private方法getScore:</span></span><br><span class="line">System.out.println(stdClass.getDeclaredMethod(<span class="string">&quot;getScore&quot;</span>)); <span class="comment">// private int reflection.Student.getScore()</span></span><br></pre></td></tr></table></figure><blockquote><p>使用反射调用方法时，仍然遵循多态原则：即总是调用实际类型的覆写方法（如果存在）。如 Student 类覆写的 getName 方法。</p></blockquote><p>一个<code>Method</code>对象包含一个方法的所有信息：</p><ul><li>getName()：返回方法名称；</li><li>getReturnType()：返回方法返回值类型，也是一个Class实例；</li><li>getParameterTypes()：返回方法的参数类型，是一个Class数组；</li><li>getModifiers()：返回方法的修饰符，它是一个int，不同的bit表示不同的含义。</li></ul><p>可以利用 <code>Method</code> 对象调用对应方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Student p = <span class="keyword">new</span> Student(<span class="string">&quot;Silence&quot;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 私有方法</span></span><br><span class="line">Method getScoreMethod = Student.class.getDeclaredMethod(<span class="string">&quot;getScore&quot;</span>);</span><br><span class="line">getScoreMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 调用方法，打印结果</span></span><br><span class="line">System.out.println(getScoreMethod.invoke(p)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>对<code>Method</code>实例调用<code>invoke()</code>就相当于调用该方法，<code>invoke()</code>第一个参数是对象实例，即在哪个实例上调用该方法，后面的可变参数要与方法参数一致，否则将报错。</p><p>对于重载方法，根据参数表不同进行区分获取即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Method ssint = String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">Method ssintint = String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br></pre></td></tr></table></figure><p>如果获取到的<code>Method</code>表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以<code>invoke()</code>传入的第一个参数永远为null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="comment">// 获取静态方法valueOf</span></span><br><span class="line">Method strValueOf = String.class.getMethod(<span class="string">&quot;valueOf&quot;</span>, <span class="keyword">char</span>[].class);</span><br><span class="line"><span class="comment">// 调用静态方法valueOf</span></span><br><span class="line">String res = (String) strValueOf.invoke(<span class="keyword">null</span>, (Object) <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;);</span><br><span class="line">System.out.println(res); <span class="comment">// &quot;res&quot;</span></span><br></pre></td></tr></table></figure><h3 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h3><p>除了使用<code>new</code>来创建对象外，还可以通过反射来创建新的实例，比如调用<code>Class</code>类提供的<code>newInstance()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = Person.class.newInstance();</span><br></pre></td></tr></table></figure><p>调用<code>Class.newInstance()</code>的局限是，它只能调用该类的<strong>public无参数构造方法</strong>。如果构造方法带有参数，或者不是public，就无法直接通过<code>Class.newInstance()</code>来调用。</p><p>为了调用任意的构造方法，Java的反射API提供了<code>Constructor</code>对象，它包含一个构造方法的所有信息，可以创建一个实例。<code>Constructor</code>对象和<code>Method</code>非常类似，不同之处仅在于它是一个构造方法，并且，调用结果总是返回实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取构造方法Integer(int):</span></span><br><span class="line">Constructor cons1 = Integer.class.getConstructor(<span class="keyword">int</span>.class);</span><br><span class="line"><span class="comment">// 调用构造方法:</span></span><br><span class="line">Integer n1 = (Integer) cons1.newInstance(<span class="number">123</span>);</span><br><span class="line">System.out.println(n1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造方法Integer(String)</span></span><br><span class="line">Constructor cons2 = Integer.class.getConstructor(String.class);</span><br><span class="line">Integer n2 = (Integer) cons2.newInstance(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">System.out.println(n2);</span><br></pre></td></tr></table></figure><p>通过<code>Class</code>实例获取<code>Constructor</code>的方法如下：</p><ul><li>getConstructor(Class…)：获取某个public的Constructor；</li><li>getDeclaredConstructor(Class…)：获取某个Constructor；</li><li>getConstructors()：获取所有public的Constructor；</li><li>getDeclaredConstructors()：获取所有Constructor。</li></ul><p>注意<code>Constructor</code>总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。</p><p>调用非public的<code>Constructor</code>时，必须首先通过<code>setAccessible(true)</code>设置允许访问。<code>setAccessible(true)</code>可能会失败。</p><h3 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h3><p>有了<code>Class</code>实例，我们还可以获取它的父类的<code>Class</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Class stu = Student.class;</span><br><span class="line">Class what = stu.getSuperclass();</span><br><span class="line">System.out.println(what); <span class="comment">// class reflection.Person</span></span><br></pre></td></tr></table></figure><p>以及获取实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class s = Integer.class;</span><br><span class="line">Class[] is = s.getInterfaces();</span><br><span class="line"><span class="keyword">for</span> (Class i : is) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：<code>getInterfaces()</code>只返回当前类直接实现的接口类型，并不包括其父类实现的接口类型</p><p>此外，对所有interface的<code>Class</code>调用<code>getSuperclass()</code>返回的是null，获取接口的父接口要用<code>getInterfaces()</code></p></blockquote><p>当我们判断一个实例是否是某个类型时，正常情况下，使用<code>instanceof</code>操作符。而如果是两个<code>Class</code>实例，要判断一个向上转型是否成立，可以调用<code>isAssignableFrom()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Integer i = ?</span></span><br><span class="line">Integer.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Integer</span></span><br><span class="line"><span class="comment">// Number n = ?</span></span><br><span class="line">Number.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Number</span></span><br><span class="line"><span class="comment">// Object o = ?</span></span><br><span class="line">Object.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Object</span></span><br><span class="line"><span class="comment">// Integer i = ?</span></span><br><span class="line">Integer.class.isAssignableFrom(Number.class); <span class="comment">// false，因为Number不能赋值给Integer</span></span><br></pre></td></tr></table></figure><h2 id="动态加载（Dynamic-Loading"><a href="#动态加载（Dynamic-Loading" class="headerlink" title="动态加载（Dynamic Loading)"></a>动态加载（Dynamic Loading)</h2><p>动态加载是一个可以充分深入的话题，这里也只是提供一些宏观理解。</p><p>前面我们已经提到过，JVM在执行Java程序的时候，并不是一次性把所有用到的类全部加载到内存，而是第一次需要用到时才加载。个人认为，动态加载的意义在于提供了一种提高程序灵活性和健壮性的方式。下面我尝试举例说明这一点。</p><p>首先，我们平时通过<code>new</code>关键字构造对象时，需要先<code>import</code>进类名。比如<code>CLASSPATH</code>为<code>dir</code>，我们需要的类<code>That</code>源文件路径为<code>dir/org/company/That.java</code>，我们就需要 <code>import org.company.That</code>。这样一来，当程序进行编译时，<code>That</code>类不存在于预计位置时，程序就无法通过编译。</p><p>然而，我们也可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Class that  = Class.forName(<span class="string">&quot;org.company.That&quot;</span>);</span><br><span class="line">That thatIns = that.newInstance();</span><br></pre></td></tr></table></figure><p>这样一来，无论<code>That</code>是否真实存在，程序都可以运行。其中一个应用是在运行期根据条件加载不同的实现类。例如，Commons Logging总是优先使用Log4j，只有当Log4j不存在时，才使用JDK的logging。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Commons Logging优先使用Log4j:</span></span><br><span class="line"><span class="comment">// 只需要把Log4j的jar包放到classpath中，Commons Logging就会自动使用Log4j</span></span><br><span class="line">LogFactory factory = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (isClassPresent(<span class="string">&quot;org.apache.logging.log4j.Logger&quot;</span>)) &#123;</span><br><span class="line">    factory = createLog4j();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    factory = createJdkLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isClassPresent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射API就是为Java语言提供了一种动态相关的机制，提高了程序的灵活性，降低了类之间的耦合性。但反射并不能随意使用，因为这类操作通常慢于直接执行语句，会造成性能影响。</p><h2 id="动态代理（Dynamic-Proxy）"><a href="#动态代理（Dynamic-Proxy）" class="headerlink" title="动态代理（Dynamic Proxy）"></a>动态代理（Dynamic Proxy）</h2><p>由于接口不能实例化，所有<code>interface</code>类型的变量总是通过某个实例向上转型并赋值给接口类型变量的。但反射就是要提供更灵活的功能，通过<strong>动态代理</strong>机制，就可以<strong>在不编写实现类的情况下，在运行时动态创建接口的实例</strong>。</p><p>一个最简单的动态代理实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Good morning, &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Hello hello = (Hello) Proxy.newProxyInstance(</span><br><span class="line">            Hello.class.getClassLoader(), <span class="comment">// 传入ClassLoader</span></span><br><span class="line">            <span class="keyword">new</span> Class[] &#123; Hello.class &#125;, <span class="comment">// 传入要实现的接口</span></span><br><span class="line">            handler); <span class="comment">// 传入处理调用方法的InvocationHandler</span></span><br><span class="line">        hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行期动态创建一个interface实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li><li>通过<code>Proxy.newProxyInstance()</code>创建接口实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li>将返回的<code>Object</code>强制转型为接口。</li></ol><p>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloDynamicProxy</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    InvocationHandler handler;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloDynamicProxy</span><span class="params">(InvocationHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        handler.invoke(</span><br><span class="line">           <span class="keyword">this</span>,</span><br><span class="line">           Hello.class.getMethod(<span class="string">&quot;morning&quot;</span>, String.class),</span><br><span class="line">           <span class="keyword">new</span> Object[] &#123; name &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是JVM帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512">https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512</a><br>[2] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265104600263968">https://www.liaoxuefeng.com/wiki/1252599548343744/1265104600263968</a><br>[3] <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.3.3">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.3.3</a><br>[4] <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a><br>[5] <a href="https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html">https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html</a><br>[6] <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/index.html">https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/index.html</a><br>[7] <a href="https://blog.csdn.net/weixin_42621338/article/details/82684289（概念有偏差）">https://blog.csdn.net/weixin_42621338/article/details/82684289（概念有偏差）</a><br>[8] <a href="https://blog.csdn.net/wq6ylg08/article/details/104603787">https://blog.csdn.net/wq6ylg08/article/details/104603787</a><br>[9] <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.8.2">https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.8.2</a><br>[10] <a href="https://scx-white.blog.csdn.net/article/details/52935472">https://scx-white.blog.csdn.net/article/details/52935472</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;反射是Java众多框架的基石，开发中我们或许很少真的去写，但需要有基本的了解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>泛型的基本理解</title>
    <link href="http://silencezheng.top/2023/01/21/article93/"/>
    <id>http://silencezheng.top/2023/01/21/article93/</id>
    <published>2023-01-20T16:02:28.000Z</published>
    <updated>2023-01-20T16:07:09.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在落笔前，想了很久以什么作为切入点，因为泛型并不是一个具体的接口或工具类，而是一种Java提供的简化编码、增强代码重用率的内在机制，同时提供了<strong>仅在编译时</strong>的类型检查机制。</p><p>大年二十九两眼昏花，呕心沥血之作，祝各位新春快乐～<br><span id="more"></span></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>Java泛型 (Generics) 的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被作为一个参数，可以由使用时输入控制。</p><p>切入泛型的最佳角度应该是JCF，也就是Java Collections Framework。Java集合被设计成能保存任何引用类型的对象，可能初学者没有发觉，但我们在使用各种集合工具类时已经应用了泛型，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>我们在尖括号 <code>&lt;&gt;</code> 中传入了包装类 <code>Integer</code> 作为参数，于是我们获得了仅可以存放 <code>Integer</code> 类型实例的 <code>ArrayList</code> 实例 list，在之后的代码编写中，一旦我们试图在 list 中加入非 <code>Integer</code> 的元素，编译器就会报告错误。</p><p>这里 <code>ArrayList</code> 其实就是一个<strong>泛型类</strong>，如果你查看Java源码，你还会发现它继承了泛型虚拟类 <code>AbstractList</code> 并实现了<strong>泛型接口</strong> <code>List</code>，它还具有一些<strong>泛型方法</strong>，例如 <code>toArray()</code> 和 <code>get()</code> 等等。</p><p>OK，这又有些令人困惑，我们知道了通过尖括号传入类型参数是在使用泛型，但什么是泛型类、泛型接口、泛型方法？</p><p>其实这很容易理解，在定义类时使用泛型，你就声明了一个泛型类，泛型接口和泛型方法也是如此。只有当类是泛型类（如ArrayList）时，或接口是泛型接口（如List)时，我们才能通过尖括号传入类型参数。下面我们来具体看看如何定义它们。</p><h2 id="泛型类和泛型接口"><a href="#泛型类和泛型接口" class="headerlink" title="泛型类和泛型接口"></a>泛型类和泛型接口</h2><p>泛型类和泛型接口的声明极其相似，就放在一起说了。泛型类的声明就是在原本类的声明中加入一个<strong>类型参数声明部分</strong>，这个类型参数声明应置于类名之后，由尖括号包裹。</p><p>类型参数声明部分可包含一个或多个<strong>类型参数</strong>，参数间用逗号隔开。类型参数<em>仅能代表引用类型</em>，作为泛型类实例化时得到的实际参数类型的占位符。下面我声明一个最简单的泛型类，它具有一个类型参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span> &lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E e;</span><br><span class="line"></span><br><span class="line">    GenericClass() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    GenericClass(E e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以实例化这个泛型类，传入任何我们想要的引用数据类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">GenericClass&lt;String&gt; s = <span class="keyword">new</span> GenericClass&lt;&gt;(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">System.out.println(s.e); <span class="comment">// g</span></span><br><span class="line">GenericClass&lt;ArrayList&lt;Integer&gt;&gt; al = <span class="keyword">new</span> GenericClass&lt;&gt;(<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>)));</span><br><span class="line">System.out.println(al.e); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p>这很酷，泛型类能够存入任意引用类型的实例。如果你对Java源代码有兴趣，你会发现Java中的类型参数名（或称为泛型标记符）经常是T、E、K、V、R、U之类的大写字母。如果你对这感到疑惑，其实这只是一种编码规范，使用Type的大写首字母T占位，表示此处希望接收一个类型；或是用K表示此处接收Key的类型，用V表示此处接收Value的类型。事实上你可以用任何合法参数名作为类型参数。</p><p>那么能不能不传入类型实参直接初始化泛型类实例呢？其实是可以的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">GenericClass g = <span class="keyword">new</span> GenericClass(<span class="number">1.6</span>);</span><br><span class="line">System.out.println(g.e); <span class="comment">// 1.6</span></span><br></pre></td></tr></table></figure><p>下面我们来研究泛型接口，它的声明与泛型类近似，在原有基础上增加类型参数声明部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">T2 <span class="title">produce</span><span class="params">(T1 t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们有了一个含两个类型参数的泛型接口，并且泛型接口中存在接口抽象方法<code>produce</code>，它接收一个 <code>T1</code> 类型的参数并返回一个 <code>T2</code> 类型的值。现在，让我们尝试使用泛型类实现这个泛型接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">E</span>, <span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E e;</span><br><span class="line"></span><br><span class="line">    GenericClass() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    GenericClass(E e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">produce</span><span class="params">(E t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前为止，我们见到的东西都十分熟悉，我们的泛型类实现了泛型接口的全部抽象方法，好消息是这能用！我们成功了！ 但坏消息是，我们的实现并没有完全发挥泛型接口的实力，<code>GenericInterface</code> 的 <code>produce</code> 方法允许我们接收一个类型的参数，返回另一个不同的类型值，但 <code>GenericClass</code> 只能使这两个类型相同，因为它只有一个类型参数E！那么我们能不能通过增加它的类型参数数量来扩大 <code>GenericClass.produce()</code> 的能力呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">E1</span>, <span class="title">E2</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">E2</span>, <span class="title">E1</span>&gt; </span>&#123;</span><br><span class="line">    E1 e;</span><br><span class="line"></span><br><span class="line">    GenericClass() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    GenericClass(E1 e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E1 <span class="title">produce</span><span class="params">(E2 t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E1) t.toString(); <span class="comment">// 随便写的～</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，似乎我们做到了，我们通过增加泛型类的类型参数数量，发挥了 <code>produce</code> 方法的全部功能。（注意泛型类的类型参数与泛型接口的类型参数间存在映射关系，这容易产生错误。）现在让我们来试试通过实现泛型接口获得新功能的泛型类 <code>GenericClass</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">GenericClass&lt;Integer, Integer&gt; intG = <span class="keyword">new</span> GenericClass&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">System.out.println(intG.produce(<span class="number">2</span>)); <span class="comment">// 2</span></span><br><span class="line">GenericClass&lt;String, Integer&gt; strG = <span class="keyword">new</span> GenericClass&lt;&gt;(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">System.out.println(strG.produce(<span class="number">2</span>) <span class="keyword">instanceof</span> String); <span class="comment">// true</span></span><br><span class="line">GenericClass whateverG = <span class="keyword">new</span> GenericClass(<span class="number">1.5</span>);</span><br><span class="line">System.out.println(whateverG.produce(<span class="string">&quot;what?&quot;</span>));<span class="comment">// what?</span></span><br></pre></td></tr></table></figure><p>这些测试也有点意思，总之，我们现在学会了定义泛型接口和实现泛型接口。可能有人会想到泛型接口的类型参数表除了传入泛型外，还能传入固定类型吗？答案是可以的，并且此时接口中抽象方法的对应位置也都需要置为相同实参，比如这个“float-&gt;double转换器”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalClass</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">Float</span>, <span class="title">Double</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">produce</span><span class="params">(Float t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.valueOf(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NormalClass n = <span class="keyword">new</span> NormalClass();</span><br><span class="line">System.out.println(n.produce(<span class="number">1.5f</span>) <span class="keyword">instanceof</span> Double); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>将泛型方法放在后面是有原因的，因为它很容易与“泛型类（接口）中的方法”混淆。回忆 <code>GenericInterface</code> 中的抽象方法 <code>produce</code> ，它似乎用到了泛型，但它是泛型方法吗？答案是否定的，它只是一个存在于泛型接口中的普通方法，需要按照泛型接口接收到的类型参数办事。</p><p>然而泛型方法是另一个层面的“自由”，它不需要依赖泛型类（接口）。在定义泛型方法时，同样需要增加一个<strong>类型参数声明部分</strong>，这个部分应置于方法返回类型前。而在调用泛型方法时，也需要指明类型实参。下面我们先来写一个比较“抽象”的泛型方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Integer <span class="title">genericFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是的，这确实是一个泛型方法，但是没什么用，我们的泛型声明没有得到利用，于是我们可以修改它为如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">genericFunction</span><span class="params">(List&lt;T&gt; arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(T t:arr) System.out.println(t.toString());</span><br><span class="line">    <span class="keyword">return</span> arr.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这个泛型方法会接收一个T类型的List，打印其中的全部内容并返回首项，让我们来验证一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">List&lt;Double&gt; dList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>));</span><br><span class="line">List&lt;String&gt; sList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>));</span><br><span class="line">Double firstD = genericFunction(dList); <span class="comment">// 1.1</span></span><br><span class="line">String firstS = genericFunction(sList); <span class="comment">// &quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到，独立的泛型方法需要从函数参数表中获取类型参数，而无法使用尖括号传入类型参数。因此，泛型函数通常意味着从函数参数中获取类型参数。我们不妨来尝试一个更奇怪些的泛型函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, J&gt; <span class="function">J <span class="title">weirdGenericFunction</span><span class="params">(List&lt;T&gt; arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(T t:arr) System.out.println((K) t.toString());</span><br><span class="line">    <span class="keyword">return</span> (J) arr.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在有三个类型参数，来实验一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">List&lt;Float&gt; dList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1.1f</span>, <span class="number">1.2f</span>, <span class="number">1.3f</span>));</span><br><span class="line">Integer s = weirdGenericFunction(dList); <span class="comment">// 运行时错误</span></span><br><span class="line">System.out.println(s <span class="keyword">instanceof</span> Integer);</span><br></pre></td></tr></table></figure><p>程序在执行第二行时报错：<code>java.lang.ClassCastException: java.lang.Float cannot be cast to java.lang.Integer</code>，并且错误仅指向这一行，证明类型参数K和J都处于未定义状态，函数返回了T类型值，即Float类型。也就是说，虽然我们声明了三个类型参数，但最终仅有占位符T接收到了类型实参，发挥了作用。</p><p>现在让我们回到泛型方法容易混淆的话题，这通常出现于在泛型类中定义泛型方法的情况，让我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">E1</span>, <span class="title">E2</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">E2</span>, <span class="title">E1</span>&gt; </span>&#123;</span><br><span class="line">    E1 e;</span><br><span class="line"></span><br><span class="line">    GenericClass() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    GenericClass(E1 e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E1 <span class="title">produce</span><span class="params">(E2 t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E1) t.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">genericFunction</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们有了一个泛型类中的泛型方法，让我们来试试它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">GenericClass&lt;Integer, Integer&gt; intG = <span class="keyword">new</span> GenericClass&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">System.out.println(intG.genericFunction(<span class="string">&quot;str&quot;</span>).getClass()); <span class="comment">// class java.lang.String</span></span><br></pre></td></tr></table></figure><p>这没问题，但是如果我们把泛型方法中的占位符 T 换成 E1 会发生什么？我们省略替换，直接进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="comment">// 省略替换...</span></span><br><span class="line">GenericClass&lt;Integer, Integer&gt; intG = <span class="keyword">new</span> GenericClass&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">System.out.println(intG.genericFunction(<span class="string">&quot;str&quot;</span>).getClass()); <span class="comment">// class java.lang.String</span></span><br></pre></td></tr></table></figure><p>结果还是相同的，即便泛型类中接受了 <code>Integer</code> 类型作为 T1 的实参，但我们仍然可以向泛型方法中传入 <code>String</code> 类型的参数。这说明泛型方法与泛型类之间是独立的。</p><p>这里还有另一种情况需要考虑，即泛型类中的静态方法应该如何使用泛型？先说结论：<strong>静态方法无法访问类上定义的泛型。如果静态方法操作的引用数据类型不确定的时候，必须将静态方法定义为泛型方法。</strong> 我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticGenericClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    StaticGenericClass(T t) &#123; <span class="keyword">this</span>.t = t; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">print</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        System.out.println(t.toString());</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表面上看这没什么问题，但编译时会报错：<code>java: 无法从静态上下文中引用非静态类型变量 T</code>。其实这不难理解，静态方法如果要从所在类获取泛型，那么就丧失了静态的意义，于是我们应该通过将静态方法改写为泛型静态方法来实现其功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">print</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        System.out.println(t.toString());</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在我们来尝试使用该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">StaticGenericClass.print(<span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>也就是说，如果静态方法要使用泛型能力，就必须使其成为泛型方法。其实，我们在设计类和方法时，也需要尽量将问题抽象化，能够使用泛型方法解决的问题，就不必将整个类都泛型化。</p><h2 id="泛型与可变参数列表"><a href="#泛型与可变参数列表" class="headerlink" title="泛型与可变参数列表"></a>泛型与可变参数列表</h2><p>Well，一口气读到这里可能有点乱，但我们还是要继续探索一些新东西，比如将泛型与可变参数列表结合起来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] genericFunction(String start, T... somethings)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;We have Start : &quot;</span> + start );</span><br><span class="line">    <span class="keyword">for</span> (T t:somethings) System.out.println(t.toString());</span><br><span class="line">    <span class="keyword">return</span> somethings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>T... somethings</code>就是一个可变参数列表，它能够接收任意个T类型的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Object o = genericFunction(<span class="string">&quot;mixed list&quot;</span>, <span class="number">1.1f</span>, <span class="string">&quot;1.5&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">System.out.println(o.getClass()); <span class="comment">// class [Ljava.io.Serializable;</span></span><br></pre></td></tr></table></figure><p>执行程序，则 <code>genericFunction</code> 会依次输出 1.1, 1.5 和 true，然后返回 <code>somethings</code> 的运行时类型为 <code>Serializable</code>。</p><p>我们也可以对 <code>genericFunction</code> 做如下修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">genericFunction</span><span class="params">(String start, T... somethings)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;We have Start : &quot;</span> + start );</span><br><span class="line">    <span class="keyword">for</span> (T t:somethings) System.out.println(t.toString());</span><br><span class="line">    <span class="keyword">return</span> somethings[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时返回值的类型就会根据输入来决定，再次使用同一测试代码，返回值类型为<code>String</code>。这就是泛型与可变参数列表的全部。如果还有更多，那可能是<code>@SafeVarargs</code>注解等等…</p><h2 id="泛型限制"><a href="#泛型限制" class="headerlink" title="泛型限制"></a>泛型限制</h2><p>在使用泛型的过程中，我们可能希望将泛型限制在一定范围内，而不是引用类型的全集。让我来举一个例子说明这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;L&gt; <span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(L l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object e:l) System.out.println(e.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们声明了一个泛型方法<code>printList</code>，在方法中遍历L类型变量<code>l</code>并打印其元素。但这段代码无法通过编译，因为程序不能确定L类型是否可以作为<code>for-each</code>循环的目标。于是我们需要对L的类型加以限制，将泛型的范围缩小为可被迭代类型的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;L extends Iterable&gt; <span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(L l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object e:l) System.out.println(e.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，这段代码可以通过编译并正确的发挥作用，因为我们规定了 <em>L所代表的类型是<code>Iterable</code>的子类</em>，更确切些，是实现了<code>Iterable</code>接口的类。</p><p>需要注意的是，限制泛型的适配范围仅支持两个关键字，分别是 <code>extends</code> 和 <code>super</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">&lt;L extends T&gt; 表示L所代表的类型是T类型的子类。</span><br><span class="line">&lt;L <span class="keyword">super</span> T&gt;  表示L所代表的类型是T类型的父类。</span><br></pre></td></tr></table></figure><p>无论 T 是接口还是类，一律采用这两个关键字进行范围限制。</p><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h2><p>到目前为止，我们谈论的内容重心都在于如何定义泛型（类、接口、方法），现在我希望读者改变一下思路，从使用泛型的角度考虑问题。</p><p>让我们来关注一个问题，假设我们希望设计一个函数，它能够接收一个 <code>Number</code> 类型列表，并返回一个逐元素增加 <code>number</code> 后的列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Number&gt; <span class="title">listAddAll</span><span class="params">(List&lt;Number&gt; list, Number number)</span></span>&#123;</span><br><span class="line">    List&lt;Number&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Number n:list) res.add(n.doubleValue() + number.doubleValue());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数是可以正确编译的，并支持所有的 <code>List&lt;Number&gt;</code> 对象，以及它的子类（比如 <code>ArrayList&lt;Number&gt;</code>)。但是，当我们传入 <code>ArrayList&lt;Float&gt;</code> 会发生什么？</p><p>答案是报错：<code>java: 不兼容的类型: java.util.ArrayList&lt;java.lang.Float&gt;无法转换为java.util.List&lt;java.lang.Number&gt;</code>，这是可以理解的（参数表仅允许<code>List</code>及其子类）。但是，逻辑上 <code>ArrayList&lt;Float&gt;</code> 也需要被方法允许作为传入参数，这时我们需要一种<strong>能够代表所有类型的类型实参</strong>，通过这个神奇的类型实参，我们可以表示一种更广义的父类。<code>ArrayList&lt;Float&gt;</code> 和 <code>ArrayList&lt;Number&gt;</code>都可以是这个父类的“逻辑子类”，或者更抽象一些，对于任何形如 <code>L&lt;N&gt;</code> 的实参，只要满足 <code>L是List及其子类 且 N是Number及其子类</code> 的对象都可以被这个表示所接受。</p><p>在Java中，这个能够代表所有类型的类型实参被记为 <code>?</code> ，它也被称为<strong>类型通配符</strong>。下面我们来尝试使用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Number&gt; <span class="title">listAddAll</span><span class="params">(List&lt;? extends Number&gt; list, Number number)</span></span>&#123;</span><br><span class="line">    List&lt;Number&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Number n:list) res.add(n.doubleValue() + number.doubleValue());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我使用了 <code>extends</code> 限定类型实参的范围，因为我需要的仅仅是 <code>Number及其子类</code>。这也表明了另一件事：<code>extends</code> 和 <code>super</code> 关键字在泛型的定义和使用中都起作用。 </p><p>现在我们的方法可以接收任意的数字列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">printList(listAddAll(<span class="keyword">new</span> ArrayList&lt;Float&gt;(Arrays.asList(<span class="number">1.1f</span>, <span class="number">1.2f</span>, <span class="number">1.3f</span>)), <span class="number">9.9</span>));</span><br><span class="line">printList(listAddAll(<span class="keyword">new</span> ArrayList&lt;Number&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.6</span>)), <span class="number">9.9</span>));</span><br></pre></td></tr></table></figure><p>看到这里，我认为读者对于泛型已经有了一个基本的理解。我认为好的教程是点到为止，留给读者自己探索的空间。对新事物最好的认知规律永远不是直线，而是螺旋上升。</p><h2 id="仅在编译时"><a href="#仅在编译时" class="headerlink" title="仅在编译时"></a>仅在编译时</h2><p>Well，我们在一开始就提到了“泛型提供了仅在编译时的类型检查机制”，并举出了一个例子说明。那我们是否有办法绕过泛型检查机制，向 <code>ArrayList</code> 中添加非法数据呢，其实是可以的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Class clas = list.getClass();</span><br><span class="line">Method add = clas.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"><span class="comment">//通过反射添加</span></span><br><span class="line">add.invoke(list, <span class="string">&quot;illegal content!&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list)</span><br></pre></td></tr></table></figure><p>程序输出结果为<code>[illegal content!]</code>，说明我们通过反射将字符串加入到了整型 <code>ArrayList</code> 中，这段代码在编译中不会被泛型机制检查。                       </p><p>这是因为程序编译之后会采取<em>去泛型化</em>的措施。在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦除（Type Erasure），并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段，通常会由 <code>Object</code> 取代泛型占位符。</p><p>创造泛型的目的是提供在编译时检查类型安全的机制，并且通过<em>自动且隐式的类型转换</em>简化编码，这一点还需要读者多加体会。</p><p>由于去泛型化的存在，我们也不能对泛型类的实例使用 <code>instanceof</code> 操作，如下代码是非法的，它会产生编译时错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">System.out.println(list <span class="keyword">instanceof</span> ArrayList&lt;Integer&gt;);</span><br></pre></td></tr></table></figure><p>事实上很多时候原本常规的代码，用上泛型后却行不通，比如实例化一个 <code>Integer</code> 我们可以这样做： <code>Integer i = new Integer()</code>。但实例化泛型却会发生编译错误，例如 <code>T t = new T()</code>，此时我们需要借助反射来实现。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://www.cnblogs.com/coprince/p/8603492.html">https://www.cnblogs.com/coprince/p/8603492.html</a><br>[2] <a href="https://www.runoob.com/java/java-generics.html">https://www.runoob.com/java/java-generics.html</a><br>[3] <a href="https://www.cnblogs.com/springmorning/p/10285780.html">https://www.cnblogs.com/springmorning/p/10285780.html</a><br>[4] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265104600263968">https://www.liaoxuefeng.com/wiki/1252599548343744/1265104600263968</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在落笔前，想了很久以什么作为切入点，因为泛型并不是一个具体的接口或工具类，而是一种Java提供的简化编码、增强代码重用率的内在机制，同时提供了&lt;strong&gt;仅在编译时&lt;/strong&gt;的类型检查机制。&lt;/p&gt;
&lt;p&gt;大年二十九两眼昏花，呕心沥血之作，祝各位新春快乐～&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数组与集合间转换</title>
    <link href="http://silencezheng.top/2023/01/18/article92/"/>
    <id>http://silencezheng.top/2023/01/18/article92/</id>
    <published>2023-01-18T15:42:18.000Z</published>
    <updated>2023-01-18T15:43:44.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数组是Java三大引用数据类型之一，也是最简单的复合数据类型。</p><p>在实际开发中，我们总会用到Collection接口来提高编码效率，能够灵活的操作数组与实现集合接口的类间的转换是Java程序员的基本功之一。本文仅涉及Java8及之前的内容。<br><span id="more"></span></p><h2 id="Collections-Framework"><a href="#Collections-Framework" class="headerlink" title="Collections Framework"></a><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html">Collections Framework</a></h2><p>Java集合框架（<strong>JCF</strong>）包含集合接口、一系列实现以及其他内容，其中 <em>Collection接口</em> 分为两组。</p><p>最基本的接口<code>java.util.Collection</code>具有以下后代：</p><ul><li>java.util.Set</li><li>java.util.SortedSet</li><li>java.util.NavigableSet</li><li>java.util.Queue</li><li>java.util.concurrent.BlockingQueue</li><li>java.util.concurrent.TransferQueue</li><li>java.util.Deque</li><li>java.util.concurrent.BlockingDeque</li></ul><p>其他 <em>Collection接口</em> 基于<code>java.util.Map</code>而不是真正的集合。但是，这些接口包含 <em>collection-view</em>（集合视图） 操作，这使它们能够作为集合进行操作。<code>Map</code>有以下后代：</p><ul><li>java.util.SortedMap</li><li>java.util.NavigableMap</li><li>java.util.concurrent.ConcurrentMap</li><li>java.util.concurrent.ConcurrentNavigableMap</li></ul><p>实现集合接口的类通常具有 <code>&lt; Implementation-style &gt; &lt; Interface &gt;</code> 形式的名称。下表总结了通用实现：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Interface</th><th style="text-align:center">Hash Table</th><th style="text-align:center">Resizable Array</th><th style="text-align:center">Balanced Tree</th><th style="text-align:center">Linked List</th><th style="text-align:center">Hash Table + Linked List</th></tr></thead><tbody><tr><td style="text-align:center">Set</td><td style="text-align:center">HashSet</td><td style="text-align:center"></td><td style="text-align:center">TreeSet</td><td style="text-align:center"></td><td style="text-align:center">LinkedHashSet</td></tr><tr><td style="text-align:center">List</td><td style="text-align:center"></td><td style="text-align:center">ArrayList</td><td style="text-align:center"></td><td style="text-align:center">LinkedList</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Deque</td><td style="text-align:center"></td><td style="text-align:center">ArrayDeque</td><td style="text-align:center"></td><td style="text-align:center">LinkedList</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Map</td><td style="text-align:center">HashMap</td><td style="text-align:center"></td><td style="text-align:center">TreeMap</td><td style="text-align:center"></td><td style="text-align:center">LinkedHashMap</td></tr></tbody></table></div><h2 id="java-util-Arrays"><a href="#java-util-Arrays" class="headerlink" title="java.util.Arrays"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html">java.util.Arrays</a></h2><p>Arrays类包含用于操作数组（例如排序和搜索）的各种方法，还包含一个允许将数组视为列表的静态工厂。</p><p>这个类实际上是JCF的一部分。</p><h2 id="数组转List"><a href="#数组转List" class="headerlink" title="数组转List"></a>数组转List</h2><p>这里介绍四种方法，也是最常见的一些方法。</p><h3 id="方法一：Arrays-asList"><a href="#方法一：Arrays-asList" class="headerlink" title="方法一：Arrays.asList()"></a>方法一：Arrays.asList()</h3><blockquote><p>该方法返回由指定数组支持的固定大小列表。（<em>对返回列表的更改会直接写入到数组</em>。）</p><p>此方法充当基于数组和基于集合的 API 之间的桥梁，并与 <code>Collection.toArray()</code> 结合使用。返回的列表是可序列化的，并实现随机存取。</p></blockquote><p>在使用这个方法时需要注意两个要点。首先，该方法仅支持<strong>引用类型数组</strong>(如Integer、Double、String…)转换到列表。其次，转换到列表后，不能对其进行增删，只能查改。</p><p>这是因为<code>Arrays.asList()</code>返回值是 <code>java.util.Arrays</code> 类中一个私有静态内部类 <code>java.util.Arrays.ArrayList</code>，它并非 <code>java.util.ArrayList</code> 类。<code>java.util.Arrays.ArrayList</code> 类具有 <code>set()，get()，contains()</code> 等方法，但是不具有添加<code>add()</code>或删除<code>remove()</code>方法。</p><p>下面我们来写一点代码进行实践，首先让我们初始化两个数组，一个基本数据类型数组<code>unboxed</code>和一个包装类数组<code>boxed</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">int</span>[] unboxed = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">Integer[] boxed = <span class="keyword">new</span> Integer[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>下面我们先来尝试操作基本数据类型数组转换为列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : Arrays.asList(unboxed)) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时会报错：<code>java: 不兼容的类型: int[]无法转换为int</code>。这是因为<code>asList</code>方法将<code>int[] unboxed</code>的类型看为<code>int[]</code>，则只接收到了一个元素<code>unboxed</code>，并没有像我们希望的将数组中的元素视为最小组成。于是我们可以修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] i: Arrays.asList(unboxed)) &#123;</span><br><span class="line">    System.out.println(Arrays.toString(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时会运行成功，输出<code>[1, 1, 1, 1, 1]</code>，虽然解决了运行时错误，但这不是我们希望的结果。下面我们来尝试使用包装类数组<code>boxed</code>作为参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(boxed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    list.set(i, list.get(i) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i:boxed) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时程序会逐个输出数组内的元素，并且数组内元素已经被增加1，说明自动拆箱工作正常，并且对于列表的修改直接写入到了原数组，得到了我们想要的结果。</p><p>同时，在Java8中，我们可以通过<strong>Lambda表达式</strong>与<strong>函数式接口</strong>的配合实现更简单的“把列表元素自增1”的操作：<code>list.replaceAll(integer -&gt; integer + 1);</code></p><h3 id="方法二：java-util-ArrayList"><a href="#方法二：java-util-ArrayList" class="headerlink" title="方法二：java.util.ArrayList"></a>方法二：java.util.ArrayList</h3><p>这种方法是对于<code>Arrays.asList()</code>的延伸，相当于将该方法产生的返回值由<code>java.util.Arrays.ArrayList</code>转为<code>java.util.ArrayList</code>。新产生的ArrayList与原数组无关，是一块新的内存空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(boxed));</span><br><span class="line">list.replaceAll(i -&gt; i + <span class="number">1</span>);</span><br><span class="line">System.out.println(boxed[<span class="number">0</span>].toString() + <span class="string">&quot;  &quot;</span> + list.get(<span class="number">0</span>).toString());</span><br></pre></td></tr></table></figure><p>程序输出<code>1  2</code>，说明<code>list</code>与原数组<code>boxed</code>无关。</p><h3 id="方法三：Collections-addAll"><a href="#方法三：Collections-addAll" class="headerlink" title="方法三：Collections.addAll()"></a>方法三：Collections.addAll()</h3><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html">Collections</a>类是JCF的成员，包含对集合进行操作或返回集合的静态方法。</p><p>该方法与方法二类似，但性能最高。首先根据数组的长度创建一个长度相同的列表，然后通过<code>Collections.addAll()</code>方法，将数组中的元素转为二进制，然后添加到列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(boxed.length);</span><br><span class="line">Collections.addAll(list, boxed);</span><br></pre></td></tr></table></figure><p>注意该方法无法操作基本类型数组。</p><h3 id="方法四：Stream"><a href="#方法四：Stream" class="headerlink" title="方法四：Stream"></a>方法四：Stream</h3><p>Java8加入的特性，通过流式API操作集合。通过该方法可以直接对基本类型数组进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.stream(unboxed).boxed().collect(Collectors.toList());</span><br><span class="line"><span class="comment">// 或 ArrayList&lt;Integer&gt; list = (ArrayList&lt;Integer&gt;) Arrays.stream(unboxed).boxed().collect(Collectors.toList());</span></span><br></pre></td></tr></table></figure><h2 id="List转数组"><a href="#List转数组" class="headerlink" title="List转数组"></a>List转数组</h2><p>除了循环赋值（效率低）外，提供两种方法作为参考。</p><h3 id="方法一：List-toArray"><a href="#方法一：List-toArray" class="headerlink" title="方法一：List.toArray()"></a>方法一：List.toArray()</h3><p>List接口下的<code>toArray()</code>方法存在重载，即 <code>Object[] toArray();</code> 和 <code>&lt;T&gt; T[] toArray(T[] a);</code>。 当我们使用无参形式时，返回的值为Object数组，那么我们后面需要手动进行类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Integer[] intArr = (Integer[]) list.toArray(); <span class="comment">// Wrong</span></span><br></pre></td></tr></table></figure><p>以上写法会报错：<code>java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.Integer;</code>。说明Object数组不能简单的转化为其他类数组，于是我们应该逐个转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">int</span>[] intArr = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">Object[] arr = list.toArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    intArr[i] = (Integer) arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逐个转换当然也可以应用自动装箱和拆箱，于是可以与基本类型数组做转换。</p><p>另一种方式就是采用含参的<code>toArray()</code>，于是只能转换到类数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">Integer[] arr1 = list.toArray(<span class="keyword">new</span> Integer[]&#123;list.size()&#125;);</span><br><span class="line">Integer[] arr2 = list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);</span><br><span class="line">Integer[] arr3 = list.toArray(<span class="keyword">new</span> Integer[]&#123;&#125;);</span><br></pre></td></tr></table></figure><p>以上三行写法效果是一样的。</p><h3 id="方法二：Stream"><a href="#方法二：Stream" class="headerlink" title="方法二：Stream"></a>方法二：Stream</h3><p>使用流API做数组转换，支持转到类数组和基本类型数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接转，对于这个例子来说用不用流区别不大</span></span><br><span class="line">Integer[] IntArr = list.stream().toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 先转IntStream 再转为数组</span></span><br><span class="line"><span class="keyword">int</span>[] intArr = list.stream().mapToInt(Integer::valueOf).toArray();</span><br></pre></td></tr></table></figure><h2 id="其他Collection"><a href="#其他Collection" class="headerlink" title="其他Collection"></a>其他Collection</h2><p>最常用的转换应该就是数组与列表（List）间，但数组与集合间的转换不止于此。</p><p>以Set为例，我们可以这样构造一个HashSet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author: SilenceZheng66</span></span><br><span class="line">HashSet&lt;Integer&gt; set  = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">System.out.println(set.toString());</span><br></pre></td></tr></table></figure><p>输出结果为<code>[1, 2]</code>，这也是对类数组去重的一种方式。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://blog.csdn.net/qq_37132495/article/details/121304797">https://blog.csdn.net/qq_37132495/article/details/121304797</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;数组是Java三大引用数据类型之一，也是最简单的复合数据类型。&lt;/p&gt;
&lt;p&gt;在实际开发中，我们总会用到Collection接口来提高编码效率，能够灵活的操作数组与实现集合接口的类间的转换是Java程序员的基本功之一。本文仅涉及Java8及之前的内容。&lt;br&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>__init__.py的作用</title>
    <link href="http://silencezheng.top/2023/01/12/article91/"/>
    <id>http://silencezheng.top/2023/01/12/article91/</id>
    <published>2023-01-12T14:59:58.000Z</published>
    <updated>2023-01-12T15:03:01.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Python工程里，当检测到一个目录下存在<code>__init__.py</code>文件时，python就会把它当成一个包。</p><span id="more"></span><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p><p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Python中，一个<code>.py</code>文件就称之为一个<strong>模块</strong>（Module）。</p><p>除了提高代码的可维护性外，使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</p><h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><p>那么，如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为<strong>包</strong>（Package）。</p><p>举个例子，一个<code>abc.py</code>的文件就是一个名字叫abc的模块，一个<code>xyz.py</code>的文件就是一个名字叫xyz的模块。</p><p>现在，假设我们的abc和xyz这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个<strong>顶层包名</strong>，比如<code>mycompany</code>，按照如下目录存放：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line">├─ __init__.<span class="keyword">py</span></span><br><span class="line">├─ <span class="keyword">abc</span>.<span class="keyword">py</span></span><br><span class="line">└─ xyz.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code>abc.py</code>模块的名字就变成了<code>mycompany.abc</code>。</p><h2 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a>__init__.py</h2><p>请注意，每一个包目录下面都会有一个<code>__init__.py</code>的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。<code>__init__.py</code><strong>可以是空文件</strong>，也可以有Python代码，因为<code>__init__.py</code>本身就是一个模块，而它的模块名就是<code>mycompany</code>。</p><p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line"> ├─ web</span><br><span class="line"> │  ├─ __init__.<span class="keyword">py</span></span><br><span class="line"> │  ├─ utils.<span class="keyword">py</span></span><br><span class="line"> │  └─ www.<span class="keyword">py</span></span><br><span class="line"> ├─ __init__.<span class="keyword">py</span></span><br><span class="line"> ├─ <span class="keyword">abc</span>.<span class="keyword">py</span></span><br><span class="line"> └─ utils.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>文件<code>www.py</code>的模块名就是<code>mycompany.web.www</code>，两个文件<code>utils.py</code>的模块名分别是<code>mycompany.utils</code>和<code>mycompany.web.utils</code>。</p><blockquote><p>自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为<code>sys.py</code>，否则将无法导入系统自带的sys模块。</p></blockquote><p>总之，模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>现在，让我们来处理一个实际问题。已有<code>utils</code>目录结构如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">utils</span><br><span class="line"> ├─ forms</span><br><span class="line"> │  ├─ loginForm.<span class="keyword">py</span></span><br><span class="line"> │  └─ registerForm.<span class="keyword">py</span></span><br><span class="line"> └─ utils.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>其中<code>loginForm.py</code>和<code>registerForm.py</code>中分别存在类<code>LoginForm</code>、<code>RegisterForm</code>。</p><p>此时如果我们想引用这两个类，需要这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">from</span> utils.forms.loginForm <span class="keyword">import</span> LoginForm</span><br><span class="line"><span class="keyword">from</span> utils.forms.registerForm <span class="keyword">import</span> RegisterForm</span><br></pre></td></tr></table></figure><p>这显得十分啰嗦，我们想要将<code>utils</code>作为模块包，直接从<code>utils</code>包中引入表单，于是我们更改目录结构为如下形式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">utils</span><br><span class="line"> ├─ forms</span><br><span class="line"> │  ├─ loginForm.<span class="keyword">py</span></span><br><span class="line"> │  └─ registerForm.<span class="keyword">py</span></span><br><span class="line"> ├─ __init__.<span class="keyword">py</span></span><br><span class="line"> └─ utils.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>并在<code>__init__.py</code>中写入如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">from</span> .forms.loginForm <span class="keyword">import</span> LoginForm <span class="keyword">as</span> LoginForm</span><br><span class="line"><span class="keyword">from</span> .forms.registerForm <span class="keyword">import</span> RegisterForm <span class="keyword">as</span> RegisterForm</span><br></pre></td></tr></table></figure><p>现在，我们就可以以如下方式引入我们想要的类，而不用记忆一连串繁琐的模块路径了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: SilenceZheng66</span></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> LoginForm, RegisterForm</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145014176">https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145014176</a><br>[2]<a href="https://www.cnblogs.com/tp1226/p/8453854.html">https://www.cnblogs.com/tp1226/p/8453854.html</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在Python工程里，当检测到一个目录下存在&lt;code&gt;__init__.py&lt;/code&gt;文件时，python就会把它当成一个包。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code Server探索</title>
    <link href="http://silencezheng.top/2023/01/06/article90/"/>
    <id>http://silencezheng.top/2023/01/06/article90/</id>
    <published>2023-01-06T15:05:07.000Z</published>
    <updated>2023-01-06T15:06:49.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一时兴起，折腾折腾，主要是玩具性质。</p><p>目的是实现iPad上通过基于Web的方式连接远端VS Code Server编程。<br><span id="more"></span></p><h2 id="Visual-Studio-Code-Server"><a href="#Visual-Studio-Code-Server" class="headerlink" title="Visual Studio Code Server"></a>Visual Studio Code Server</h2><p>在以往的VS Code使用中，我们要么是在本地进行开发，要么是通过VS Code Remote Development extensions连接服务器进行开发。远程开发扩展的工作原理是在远端服务器上安装远程环境，通过本机上的VS Code以SSH连接远端源代码和运行时环境进行编程，它提供了很好的性能（正常网络下SSH不会太卡）和开发体验（像在本地开发一样）。</p><p>但如果我们想要在不能安装VS Code的设备上进行开发，或者是无法使用SSH进行连接时进行开发，该怎么办呢？</p><p>微软在这方面做了很多尝试，例如将VS Code搬到浏览器中，如果你现在登录到 <a href="https://vscode.dev">https://vscode.dev</a> 时，会看到一个完全在浏览器中运行的轻量级 VS Code 版本。</p><blockquote><p>.dev新顶级域名，开发专用域名。<br>.dev 域名主要面向开发人员，和.app 类似，它要求强制性使用 HTTPS，以阻挡广告恶意程序和 ISP 植入的跟踪代码。</p></blockquote><p>那么我们能否自己搭建一个这样的运行在浏览器中的 VS Code 呢？答案是Yep！</p><blockquote><p>Visual Studio Code Server是一个基于远程扩展使用的相同底层服务器构建的独立的服务，加上一些额外的功能，如交互式 CLI 和与 vscode.dev 更便利的安全连接。</p><p>VS Code 服务器允许您以新的方式使用 VS Code，例如：</p><ul><li>在 SSH 支持可能受限或需要基于 Web 的访问的远程计算机上进行开发。</li><li>在不支持安装 VS Code 桌面的机器上开发，例如 iPad / 平板电脑或 Chromebook。</li><li>体验所有代码都可以在浏览器沙箱中执行的客户端安全优势。</li></ul></blockquote><p>VS Code Server的详细信息：<a href="https://code.visualstudio.com/docs/remote/vscode-server">https://code.visualstudio.com/docs/remote/vscode-server</a></p><p>vscode.dev的详细信息：<a href="https://code.visualstudio.com/blogs/2021/10/20/vscode-dev">https://code.visualstudio.com/blogs/2021/10/20/vscode-dev</a></p><h2 id="在本地搭建VS-Code-Server"><a href="#在本地搭建VS-Code-Server" class="headerlink" title="在本地搭建VS Code Server"></a>在本地搭建VS Code Server</h2><p>在 Mac 下可以使用 brew 来安装一个 code-server。具体命令为：<code>brew install code-server</code>。 安装完成后，配置文件在<code>~/.config/code-server/config.yaml</code>。 修改bind-addr，从127.0.0.1:8080修改为0.0.0.0:8080，密码修改为你的密码。如下所示：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">yourpassword</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><br>然后使用<code>brew services start code-server</code>或直接运行code-server即可启动服务。通过浏览器访问127.0.0.1:8080，按提示输入上述设置的密码即可打开在线编辑器。</p><h2 id="在Ubuntu服务器上架设VS-Code-Server"><a href="#在Ubuntu服务器上架设VS-Code-Server" class="headerlink" title="在Ubuntu服务器上架设VS Code Server"></a>在Ubuntu服务器上架设VS Code Server</h2><p>注意运行服务的端口防火墙需要放开，通常是在云服务器平台进行安全组设置。</p><h3 id="自动安装方式一"><a href="#自动安装方式一" class="headerlink" title="自动安装方式一"></a>自动安装方式一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check architecture</span></span><br><span class="line">arch</span><br><span class="line"><span class="comment"># download</span></span><br><span class="line">curl -fOL https://github.com/coder/code-server/releases/download/v4.9.1/code-server_4.9.1_amd64.deb</span><br><span class="line"><span class="comment"># install</span></span><br><span class="line">sudo dpkg -i code-server_4.9.1_amd64.deb</span><br><span class="line"><span class="comment"># boot auto-start and start now</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br><span class="line"><span class="comment"># Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml</span></span><br><span class="line"><span class="comment"># if you want to let public network user to access the service by public ip</span></span><br><span class="line">code-server --host <span class="string">&quot;0.0.0.0&quot;</span></span><br></pre></td></tr></table></figure><h3 id="自动安装方式二-未验证"><a href="#自动安装方式二-未验证" class="headerlink" title="自动安装方式二 (未验证)"></a>自动安装方式二 (未验证)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download and install</span></span><br><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br><span class="line"><span class="comment"># start</span></span><br><span class="line">sudo systemctl start code-server@<span class="variable">$USER</span></span><br><span class="line"><span class="comment"># configure</span></span><br><span class="line">vim ~/.config/code-server/config.yaml <span class="comment"># then configure</span></span><br><span class="line"><span class="comment"># restart to make the configuration make effect</span></span><br><span class="line">sudo systemctl restart code-server@<span class="variable">$USER</span></span><br><span class="line"><span class="comment"># boot auto-start</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop code-server@<span class="variable">$USER</span></span><br><span class="line">rm -rf /usr/lib/code-server</span><br><span class="line">rm -rf ~/.<span class="built_in">local</span>/share/code-server</span><br><span class="line">rm -rf ~/.config/code-server</span><br></pre></td></tr></table></figure><h2 id="在iPad上访问VS-Code-Server"><a href="#在iPad上访问VS-Code-Server" class="headerlink" title="在iPad上访问VS Code Server"></a>在iPad上访问VS Code Server</h2><p>有两种方式，一种是直接用浏览器访问远端的<code>IP:PORT</code>，另一种是安装软件Servediter for code-server，打开后选择自己的服务器（是免费的），输入地址和密码保存。</p><p>后者的沉浸感稍好一点，但需要安装软件略显麻烦。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://blog.csdn.net/day_to_die/article/details/105990565">https://blog.csdn.net/day_to_die/article/details/105990565</a><br>[2] <a href="https://blog.csdn.net/weixin_43681778/article/details/116203039">https://blog.csdn.net/weixin_43681778/article/details/116203039</a><br>[3] <a href="https://blog.csdn.net/romanticRose/article/details/101351679">https://blog.csdn.net/romanticRose/article/details/101351679</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首发于 <a href="https://silencezheng.top">silencezheng.top</a>，转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一时兴起，折腾折腾，主要是玩具性质。&lt;/p&gt;
&lt;p&gt;目的是实现iPad上通过基于Web的方式连接远端VS Code Server编程。&lt;br&gt;</summary>
    
    
    
    
    <category term="VSCode" scheme="http://silencezheng.top/tags/VSCode/"/>
    
  </entry>
  
</feed>
