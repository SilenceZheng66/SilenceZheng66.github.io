<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>silenceZheng66-BLOG</title>
  
  <subtitle>log</subtitle>
  <link href="http://silencezheng.top/atom.xml" rel="self"/>
  
  <link href="http://silencezheng.top/"/>
  <updated>2022-02-13T07:42:13.276Z</updated>
  <id>http://silencezheng.top/</id>
  
  <author>
    <name>silenceZheng66</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elastic Search7.x学习笔记</title>
    <link href="http://silencezheng.top/2022/02/13/article31/"/>
    <id>http://silencezheng.top/2022/02/13/article31/</id>
    <published>2022-02-13T07:41:30.000Z</published>
    <updated>2022-02-13T07:42:13.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elastic-Search7-x学习笔记"><a href="#Elastic-Search7-x学习笔记" class="headerlink" title="Elastic Search7.x学习笔记"></a>Elastic Search7.x学习笔记</h1><ol><li>前言</li><li>入门</li></ol><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>近期开始学习ES，先从官方文档和视频入手学习。</p><span id="more"></span><h2 id="入门："><a href="#入门：" class="headerlink" title="入门："></a>入门：</h2><ul><li>如何下载／运行 Elasticsearch，及其先决条件<ul><li>使用容器环境安装ES和Kibana<ul><li>通过docker可以运行单或多节点ES集群（多节点可通过compose），这里先安装单节点ES和单节点Kibana组成集群。</li></ul></li></ul></li><li>通过CRUD REST API 添加，更新，检索和删除数据<ul><li>ES概念简析</li><li>ES集群相关命令</li><li>索引CRUD命令</li><li>文档CRUD命令</li><li>使用开发工具可以很方便的进行调试，具有自动补全功能</li></ul></li><li>基本的文本分析，包括标记和过滤</li><li>基本搜索查询</li><li>聚合：Elasticsearch 的面向和分析的主功能</li></ul><h3 id="如何下载／运行-Elasticsearch，及其先决条件"><a href="#如何下载／运行-Elasticsearch，及其先决条件" class="headerlink" title="如何下载／运行 Elasticsearch，及其先决条件!"></a>如何下载／运行 Elasticsearch，及其先决条件!</h3><p>可以通过直接下载或者包管理工具下载ES和Kibana到本地，也可以使用容器安装ELK，这里介绍使用容器环境安装。</p><h4 id="使用容器环境安装ES和Kibana"><a href="#使用容器环境安装ES和Kibana" class="headerlink" title="使用容器环境安装ES和Kibana"></a>使用容器环境安装ES和Kibana</h4><p>通过docker可以运行单节点ES，也可以运行ES集群（通过compose），这里先安装单节点ES和单节点Kibana组成集群。</p><h5 id="使用容器环境安装ES：https-www-elastic-co-guide-en-elasticsearch-reference-current-docker-html"><a href="#使用容器环境安装ES：https-www-elastic-co-guide-en-elasticsearch-reference-current-docker-html" class="headerlink" title="使用容器环境安装ES：https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html"></a>使用容器环境安装ES：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html</a></h5><ol><li>创建桥接网络elastic  <code>docker network create elastic</code></li><li>拉取es7镜像  <code>docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.0</code></li><li>创建容器es01-test，网络为elastic，镜像为es7 <code>docker run --name es01-test --net elastic -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.17.0</code>  <em>注意： 9200 是供 http 访问端口，9300 是供 tcp 访问的端口，如果不做端口映射，浏览器就不能访问 elasticsearch 的服务。</em></li><li>查看es <code>http://127.0.0.1:9200</code></li></ol><h5 id="使用容器环境安装Kibana：https-www-elastic-co-guide-en-kibana-current-docker-html"><a href="#使用容器环境安装Kibana：https-www-elastic-co-guide-en-kibana-current-docker-html" class="headerlink" title="使用容器环境安装Kibana：https://www.elastic.co/guide/en/kibana/current/docker.html"></a>使用容器环境安装Kibana：<a href="https://www.elastic.co/guide/en/kibana/current/docker.html">https://www.elastic.co/guide/en/kibana/current/docker.html</a></h5><ol><li>在新的终端，拉kibana镜像 <code>docker pull docker.elastic.co/kibana/kibana:7.17.0</code></li><li>跑容器kib01-test <code>docker run --name kib01-test --net elastic -p 127.0.0.1:5601:5601 -e &quot;ELASTICSEARCH_HOSTS=http://es01-test:9200&quot; docker.elastic.co/kibana/kibana:7.17.0</code></li><li>查看kibana <code>http://localhost:5601</code>   这里kibana是没有数据的，需要添加，可以添加一个示例数据，我这里添加web log。</li></ol><h5 id="终止、移除容器"><a href="#终止、移除容器" class="headerlink" title="终止、移除容器"></a>终止、移除容器</h5><pre><code>docker stop es01-testdocker stop kib01-testdocker network rm elasticdocker rm es01-testdocker rm kib01-test</code></pre><h3 id="通过CRUD-REST-API-添加，更新，检索和删除数据"><a href="#通过CRUD-REST-API-添加，更新，检索和删除数据" class="headerlink" title="通过CRUD REST API 添加，更新，检索和删除数据!"></a>通过CRUD REST API 添加，更新，检索和删除数据!</h3><ul><li>概念简析<ul><li>Index<ul><li>索引index是文档doc的容器，是一类文档的集合。</li><li>作为名词，类比关系型数据库，索引相当于SQL中的一个Database。索引由其名称(必须为全小写字符)进行标识。</li><li>作为动词，含义为保存一个文档到索引的过程。这类似于SQL语句中的 INSERT关键词。如果该文档已存在时那就相当于数据库的UPDATE。</li><li>关系型数据库通过增加一个B+树索引到指定的列上，以便提升数据检索速度。索引ElasticSearch 使用了一个叫做<strong>倒排索引</strong>的结构来达到相同的目的。</li></ul></li><li>Document、Doc<ul><li>Index 里面单条的记录称为Document（文档）。等同于关系型数据库表中的行。</li><li>_index：文档所属索引名称。</li><li>_type：文档所属类型名。</li><li>_id：Doc的主键。在写入的时候，可以指定该Doc的ID值，如果不指定，则系统自动生成一个唯一的UUID值。</li><li>_version：文档的版本信息。Elasticsearch通过使用version来保证对文档的变更能以正确的顺序执行，避免乱序造成的数据丢失。</li><li>_seq_no：严格递增的顺序号，每个文档一个，Shard级别严格递增，保证后写入的Doc的_seq_no大于先写入的Doc的_seq_no。</li><li>_primary_term：_/primary_term也和_seq_no一样是一个整数，每当Primary Shard发生重新分配时，比如重启，Primary选举等，_primary_term会递增1</li><li>found：查询的ID正确那么ture, 如果 Id 不正确，就查不到数据，found字段就是false。</li><li>_source：文档的原始JSON数据。</li></ul></li><li>Type<ul><li>在7.0开始，一个索引只能建一个Type为_doc</li></ul></li><li>Cluster<ul><li>ElasticSearch集群实际上是一个分布式系统，它需要具备两个特性：高可用性和可扩展性。</li><li>1⃣️允许有节点停止服务；2⃣️部分节点丢失，不会丢失数据；3⃣️随着请求量的不断提升，数据量的不断增长，系统可以将数据分布到其他节点，实现水平扩展；</li><li>集群健康值Green：所有主要分片和复制分片都可用，Yellow：所有主要分片可用，但不是所有复制分片都可用，Red：不是所有的主要分片都可用当集群状态为 red，它仍然正常提供服务，它会在现有存活分片中执行请求，我们需要尽快修复故障分片，防止查询数据的丢失。</li></ul></li><li>Node<ul><li>节点是一个ElasticSearch的实例，其本质就是一个Java进程</li><li>一台机器上可以运行多个ElasticSearch实例，但是建议在生产环境中一台机器上只运行一个ElasticSearch实例</li><li>Node 是组成集群的一个单独的服务器，用于存储数据并提供集群的搜索和索引功能。</li><li>与集群一样，节点也有一个唯一名字，默认在节点启动时会生成一个uuid作为节点名，该名字也可以手动指定。</li><li>单个集群可以由任意数量的节点组成。如果只启动了一个节点，则会形成一个单节点的集群。</li></ul></li><li>Shard<ul><li>Primary Shard(主分片）<ul><li>ES中的shard用来解决节点的容量上限问题，通过主分片，可以将数据分布到集群内的所有节点之上。</li><li>一个节点对应一个ES实例</li><li>一个节点可以有多个index（索引）</li><li>一个index可以有多个shard（分片）</li><li>一个分片是一个lucene index（此处的index是lucene自己的概念，与ES的index不是一回事）</li><li>主分片数是在索引创建时指定，后续不允许修改，除非Reindex</li><li>一个索引中的数据保存在多个分片中(默认为一个)，相当于水平分表。一个分片便是一个Lucene 的实例，它本身就是一个完整的搜索引擎。我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。</li></ul></li><li>Replica Shard（副本）<ul><li>服务高可用：由于数据只有一份,如果一个node挂了,那存在上面的数据就都丢了,有了replicas,只要不是存储这条数据的node全挂了,数据就不会丢。因此分片副本不会与主分片分配到同一个节点</li><li>扩展性能：通过在所有replicas上并行搜索提高搜索性能.由于replicas上的数据是近实时的(near realtime),因此所有replicas都能提供搜索功能,通过设置合理的replicas数量可以极高的提高搜索吞吐量</li></ul></li><li>分片设定<ul><li>对于生产环境中分片的设定，需要提前做好容量规划，因为主分片数是在索引创建时预先设定的，后续无法修改。</li><li>分片数过小会导致后续无法增加节点进行水平扩展、导致分片的数据量太大，数据在重新分配时耗时</li><li>分片数过大会影响搜索结果的相关性打分，影响统计结果的准确性、单个节点上过多的分片，会导致资源浪费，同时也会影响性能；</li></ul></li></ul></li><li>倒排索引<ul><li>ES的搜索功能是基于lucene,而lucene搜索的基本原理就是倒叙索引,倒序排序的结果跟分词的类型有关</li><li>假设我们搜索谷歌地图之父,搜索流程会是这样分词,分词插件将句子分为3个term 谷歌,地图,之父，然后将这3个term拿到倒叙索引中去查找(会很高效,比如二分查找),如果匹配到了就拿对应的文档id,获得文档内容</li><li>TF、IDF在结果排序中起到了作用</li></ul></li></ul></li><li>ES集群相关命令<ul><li>_cat系列提供了一系列查询Elasticsearch集群状态的接口<ul><li>_cat/shards          #查看各shard的详细情况</li><li>_cat/nodes           #查看所有节点信息</li><li>_cat/count           #查看当前集群的doc数量</li><li>_cat/allocation      #查看单节点的shard分配整体情况</li><li>_cat/health          #查看集群当前状态：红、黄、绿</li><li>…etc</li><li>每个命令都支持使用?v参数，让输出内容表格显示表头; pretty则让输出缩进更规范。 如<code>GET \_cat/health?v</code></li></ul></li></ul></li><li>索引CRUD命令<ul><li>查询索引举例<ul><li>_cat/indices         #查看集群中所有index的详细信息</li><li>_cat/indices/{index} #查看集群中指定index的详细信息</li><li>_cat/segments        #查看各index的segment详细信息,包括segment名, 所属shard, 内存(磁盘)占用大小, 是否刷盘</li><li>_cat/segments/{index}#查看指定index的segment详细信息</li><li>_cat/indices?v&amp;health=yellow   #查询健康状态为yellow的索引</li><li>cat/indices?v&amp;health=yellow&amp;s=docs.count:desc #根据文档数量进行索引排序</li></ul></li><li>创建索引举例<ul><li>PUT /student{“settings”: {“number_of_shards”: 3,”number_of_replicas”: 1},”mappings”: {“properties”: {“name”: {“type”:”text”}, “country”: {“type”:”keyword”},”age”: {“type”:”integer”},”date”: {“type”: “date”,”format”: “yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis”}}}}</li><li>查看创建结果<code>GET /_cat/indices/student?v</code></li></ul></li><li>删除索引<ul><li>curl -X DELETE “localhost:9200/index-name”</li></ul></li></ul></li><li>文档CRUD命令<ul><li>POST /uri用于创建，DELETE /uri/xxx用于删除，PUT /uri/xxx用于更新或创建，GET /uri/xxx用于查询</li><li>POST与PUT的区别<ul><li>在ES中,如果不确定文档的ID，那么就需要用POST，它可以自己生成唯一的文档ID。如果确定文档的ID，那么就可以用PUT，当然也可以用POST，它们都可以创建或修改文档（如果是修改，那么_version版本号提高1）</li><li>PUT、GET、DELETE是幂等的，而POST并不一定是幂等。如果你对POST也指定了文档ID,那它其实和PUT没啥区别，那它就是幂等。如果你没有指定文档ID那么就不是幂等操作了，因为同一数据，你执行多次POST，那么生成多个UUID的文档，也就是每POST一次都会新增一条数据</li></ul></li><li>创建文档<ul><li>PUT方式：<code>PUT  /student/_doc/1 &#123;&quot;name&quot;: &quot;xxx&quot;,&quot;country&quot;: &quot;tj&quot;,&quot;age&quot;: &quot;3&quot;,&quot;date&quot;: &quot;2019-09-04&quot;&#125;</code></li><li>POST方式：<code>POST  /student/_doc&#123;&quot;name&quot;: &quot;xxx&quot;,&quot;country&quot;: &quot;tj&quot;,&quot;age&quot;: &quot;3&quot;,&quot;date&quot;: &quot;2019-09-04&quot;&#125;</code></li><li>POST也可以指定文档ID,如果指定文档ID,那么就和PUT没有区别。ID不存在则创建，存在则更新并且_version版本+1.</li></ul></li><li>查看文档<ul><li><code>GET  /student/_doc/1</code></li></ul></li><li>更新文档<ul><li>PUT和POST执行的时候，如果指定的文档ID存在，那么就可以执行更新操作。不过它们执行的是全量更新，如果需要单独对某字段更新我们可以使用关键字_update</li><li>如<code>POST /student/_update/1 &#123;&quot;doc&quot; : &#123;&quot;age&quot;: 5&#125;&#125;</code></li></ul></li><li>删除文档<ul><li><code>DELETE /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</code></li></ul></li></ul></li></ul><ul><li>使用开发工具可以很方便的进行调试，具有自动补全功能<ul><li><code>GET /</code>可以查看es页面的接口信息</li><li>添加数据 <code>POST student/_doc/1 &#123;&quot;name&quot;:&quot;Jack&quot;,&quot;sid&quot;:&quot;1&quot;,&quot;city&quot;:&quot;bj&quot;,&quot;country&quot;:&quot;china&quot;&#125;</code>     格式为POST index/type/id 后面跟json数据</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Elastic-Search7-x学习笔记&quot;&gt;&lt;a href=&quot;#Elastic-Search7-x学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Elastic Search7.x学习笔记&quot;&gt;&lt;/a&gt;Elastic Search7.x学习笔记&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;前言&lt;/li&gt;
&lt;li&gt;入门&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;近期开始学习ES，先从官方文档和视频入手学习。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ElasticSearch" scheme="http://silencezheng.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="http://silencezheng.top/2022/01/29/article30/"/>
    <id>http://silencezheng.top/2022/01/29/article30/</id>
    <published>2022-01-28T16:42:17.000Z</published>
    <updated>2022-02-13T07:37:53.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><ul><li>前言：学习方法</li><li>第一个demo</li><li>构建RESTful风格的服务</li><li>连接MySQL</li><li>使用RESTful风格的服务</li><li>用Spring Boot构建Web应用</li><li>使用 Spring MVC 提供 Web 内容</li><li>保护 Web 应用程序，确认用户 </li></ul><h2 id="前言：学习方法"><a href="#前言：学习方法" class="headerlink" title="前言：学习方法"></a>前言：学习方法</h2><p>先从各种guide入手，先对Spring程序结构体系有一个宏观了解，再结合文档进行精细化学习，文档地址（2.6.2版本）：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">https://docs.spring.io/spring-boot/docs/current/reference/html/</a></p><span id="more"></span><h2 id="第一个demo"><a href="#第一个demo" class="headerlink" title="第一个demo"></a>第一个demo</h2><p><a href="https://spring.io/quickstart">https://spring.io/quickstart</a></p><ol><li>@SpringBootApplication、@RestController、@GetMapping</li><li>本地配置tomcat要开权限，不然idea不能启动tomcat</li><li>代码示例：<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line"><span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">GetMapping</span>(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">String</span> <span class="selector-tag">hello</span>(<span class="variable">@RequestParam</span>(value = <span class="string">&quot;name&quot;</span>, defaultValue = <span class="string">&quot;World&quot;</span>) String name) &#123;</span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">String</span><span class="selector-class">.format</span>(<span class="string">&quot;Hello %s!&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="构建RESTful风格的服务"><a href="#构建RESTful风格的服务" class="headerlink" title="构建RESTful风格的服务"></a>构建RESTful风格的服务</h2><p><a href="https://spring.io/guides/gs/rest-service/#initial">https://spring.io/guides/gs/rest-service/#initial</a></p><ol><li>通过 mvn clean package将app进行打包（jar），终端可以直接运行java -jar</li><li>jar包和war包的区别，spring boot项目的jar包内建服务器可以直接运行</li><li>不需要web.xml，纯Java</li></ol><h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><p><a href="https://spring.io/guides/gs/accessing-data-mysql/">https://spring.io/guides/gs/accessing-data-mysql/</a></p><ol><li>需要添加新依赖，bash进入mysql时若用sudo命令要先输入sudo密码再输入root密码</li><li>MySQL创建新用户后的%指允许在任何主机登陆，可换为ip或localhost（仅在本地）</li><li>在resources中修改application.properties文件，了解spring.jpa.hibernate.ddl-auto的四个类型，数据库用户和scheme也从这里配置</li><li>了解Hibernate ORM ，Hibernate 将 Java 类映射到数据库表中，从 Java 数据类型中映射到 SQL 数据类型中。此demo通过Hibernate将user类映射到MySQL中，可通过Datagrip查看</li><li>用postman发送请求测试接口</li><li>进行安全测试，防止sql注入攻击，将用户权限设置为只能对数据操作而无法涉及数据表结构（scheme） </li></ol><h2 id="使用RESTful风格的服务"><a href="#使用RESTful风格的服务" class="headerlink" title="使用RESTful风格的服务"></a>使用RESTful风格的服务</h2><p><a href="https://spring.io/guides/gs/consuming-rest/">https://spring.io/guides/gs/consuming-rest/</a></p><ol><li>一般可以通过浏览器访问URL来使用一个web服务，但用变成方式来使用RESTful风格的服务是更有用的方法,这个demo要从接口中取数据放到springboot的控制台中以log形式显示</li><li>由于demo给定的接口无法访问（可能是墙的原因），CommandLineRunner启动会失败，故无法查看结果，接口应获得的内容如下：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">   type:</span> <span class="string">&quot;success&quot;</span>,</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">   value:</span> &#123;</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">      id:</span> <span class="number">10</span>,</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">      quote:</span> <span class="string">&quot;Really loving Spring Boot, makes stand alone Spring apps easy.&quot;</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125; 为一个两层结构的json对象</span><br></pre></td></tr></table></figure></li><li>@JsonIgnoreProperties表示任何未绑定在此类型中的属性都应被忽略，要将接口获得的数据与自定义的类型绑定（反序列化），需要使定义的变量名与json对象的键名完全一致，如果不匹配可以用@JsonProperty注释来指定json对象中的某个键（这也可以用于处理含特殊字符或其他不便于作为变量名出现的json键）</li></ol><h2 id="用spring-boot构建Web应用"><a href="#用spring-boot构建Web应用" class="headerlink" title="- 用spring boot构建Web应用"></a>- 用spring boot构建Web应用</h2><p><a href="https://spring.io/guides/gs/spring-boot/">https://spring.io/guides/gs/spring-boot/</a></p><ol><li>CommandLineRunner, ApplicationContext, DispatcherServlet</li><li>添加单元测试，先添加maven依赖. MockMvc, 两种测试。</li><li>Spring Boot Actuator，帮助监控和管理web应用。添加依赖到maven，通过<a href="http://localhost:8080/actuator">http://localhost:8080/actuator</a> 可访问。详细见：<a href="https://docs.spring.io/spring-boot/docs/2.5.0/reference/htmlsingle/#actuator">https://docs.spring.io/spring-boot/docs/2.5.0/reference/htmlsingle/#actuator</a></li><li>JMX，是Java Management Extensions(Java管理扩展)的缩写，是一个为应用程序植入管理功能的框架。</li><li>For more details about each of these REST endpoints and how you can tune their settings with an application.properties file (in src/main/resources), see the <a href="https://docs.spring.io/spring-boot/docs/2.5.0/reference/htmlsingle/#production-ready-endpoints">https://docs.spring.io/spring-boot/docs/2.5.0/reference/htmlsingle/#production-ready-endpoints</a></li><li>Groovy 另一门语言（基于Java）</li></ol><h2 id="使用-Spring-MVC-提供-Web-内容"><a href="#使用-Spring-MVC-提供-Web-内容" class="headerlink" title="- 使用 Spring MVC 提供 Web 内容"></a>- 使用 Spring MVC 提供 Web 内容</h2><p><a href="https://spring.io/guides/gs/serving-web-content/">https://spring.io/guides/gs/serving-web-content/</a></p><ol><li>Model object, easy to use in view template</li><li>Thymeleaf, 一个现代的服务器端 Java 模板引擎，适用于 Web 和独立环境。添加spring-boot-starter-thymeleaf</li><li>Spring-boot-devtools, 可以实现指定目录（默认为classpath路径）下的文件进行更改后，项目自动重启，更改后的代码自动生效，热部署节省了“编写更改代码、重新启动应用程序并刷新浏览器以查看更改”这一过程的时间，添加依赖</li><li>Spring boot app serves static content from resources in the classpath at /static (or /public). The index.html resource is used as a welcome page.</li></ol><h2 id="保护-Web-应用程序，确认用户"><a href="#保护-Web-应用程序，确认用户" class="headerlink" title="- 保护 Web 应用程序，确认用户"></a>- 保护 Web 应用程序，确认用户</h2><p><a href="https://spring.io/guides/gs/securing-web/">https://spring.io/guides/gs/securing-web/</a></p><ol><li>分两部分，先构建一个app(Spring MVC)，再用Spring Security做登录界面</li><li>Spring MVC负责请求的转发和视图管理</li><li>If Spring Security is on the classpath, Spring Boot automatically secures all HTTP endpoints with “basic” authentication. </li><li>第二部分，首先添加ss的两个依赖（本身和测试），然后编写安全类</li><li>根据配置，Spring Security提供了一个过滤器，可以拦截请求和验证用户的过滤器。如果用户无法验证，页面将被重定向到/login？error，您的页面显示适当的错误信息。成功退出登录后，您的申请将发送到/login?logout，您的页面将显示适当的成功信息。</li><li>更新hello页面，We display the username by using Spring Security’s integration with HttpServletRequest#getRemoteUser(). The “Sign Out” form submits a POST to /logout. Upon successfully logging out, it redirects the user to /login?logout.</li><li>关于Thymeleaf:</li></ol><blockquote><p>${user.name}表示“获取用户的变量，并调用其getName()方法”<br>通过标签中的th:text属性来填充该标签的一段内容，意思是$表达式只能写在th标签内部,不然不会生效,使用th:text标签的值替换div标签里面的值,至于div里面的原有的值只是为了给前端开发时做展示用的.这样的话很好的做到了前后端分离.意味着div标签中的内容会被表达式${session.book}的值所替代，无论模板中它的内容是什么，之所以在模板中“多此一举“地填充它的内容，完全是为了它能够作为原型在浏览器中直接显示出来。<br>访问spring-mvc中model的属性，语法格式为“${}”，如${user.id}可以获取model里的user对象的id属性<br>为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问。例如${ #dates.format(dateVar, ‘dd/MMM/yyyy HH:mm’)} 使用java.util.Date的功能方法类</p></blockquote><ol start="8"><li>结果是智能允许名为user密码为password的用户登录</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring学习笔记&quot;&gt;&lt;a href=&quot;#Spring学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Spring学习笔记&quot;&gt;&lt;/a&gt;Spring学习笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;前言：学习方法&lt;/li&gt;
&lt;li&gt;第一个demo&lt;/li&gt;
&lt;li&gt;构建RESTful风格的服务&lt;/li&gt;
&lt;li&gt;连接MySQL&lt;/li&gt;
&lt;li&gt;使用RESTful风格的服务&lt;/li&gt;
&lt;li&gt;用Spring Boot构建Web应用&lt;/li&gt;
&lt;li&gt;使用 Spring MVC 提供 Web 内容&lt;/li&gt;
&lt;li&gt;保护 Web 应用程序，确认用户 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言：学习方法&quot;&gt;&lt;a href=&quot;#前言：学习方法&quot; class=&quot;headerlink&quot; title=&quot;前言：学习方法&quot;&gt;&lt;/a&gt;前言：学习方法&lt;/h2&gt;&lt;p&gt;先从各种guide入手，先对Spring程序结构体系有一个宏观了解，再结合文档进行精细化学习，文档地址（2.6.2版本）：&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/&quot;&gt;https://docs.spring.io/spring-boot/docs/current/reference/html/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>双重指针，指针的指针！</title>
    <link href="http://silencezheng.top/2021/07/13/article29/"/>
    <id>http://silencezheng.top/2021/07/13/article29/</id>
    <published>2021-07-13T09:09:17.000Z</published>
    <updated>2021-07-13T15:04:01.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说来惭愧，从大一完了以后接触Java就觉得C好笨啊，于是现在重学数据结构的时候，总是遇到C语言的一些问题，今天终于对双重指针有了一定理解，但还有一些问题，待日后学习再解决吧。对了，此问题是由严蔚敏数据结构中，稀疏矩阵压缩存储的十字链表引申而来。</p><span id="more"></span><h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h2><p>首先为了对新手友好，先放如下代码解决一下typedef方面的问题。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LNode&#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct LNode *<span class="keyword">next</span>;</span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"><span class="regexp">//</span>等价于下面：</span><br><span class="line"><span class="regexp">//</span>struct LNode&#123;</span><br><span class="line"><span class="regexp">//</span>    int data;</span><br><span class="line"><span class="regexp">//</span>    struct LNode *<span class="keyword">next</span>;</span><br><span class="line"><span class="regexp">//</span>&#125;</span><br><span class="line"><span class="regexp">//</span>typedef struct LNode LNode;</span><br><span class="line"><span class="regexp">//</span>typedef struct LNode *LinkList;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就正式开始解决双重指针的问题啦，我将我的解释写在了注释中，读者可以边读代码边看注释进行理解（当然我的理解也可能有问题，欢迎大家评论告诉我～）。下面代码可以extern到main.c中跑一下，注意头文件。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  双重指针.c</span></span><br><span class="line"><span class="comment">//  test</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by silenceZheng on 2021/7/13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;ANode, * ALink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ALink *start;</span><br><span class="line">&#125;AList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pointerAsArray_int</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* a = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="number">6</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    a[<span class="number">3</span>] = data;</span><br><span class="line">    a[<span class="number">5</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pointerAsArray_ptr</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 分配空间</span></span><br><span class="line">    AList* alist = (AList *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AList));</span><br><span class="line">    ALink* s = (ALink *)<span class="built_in">malloc</span>(<span class="number">3</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(ALink));</span><br><span class="line">    ALink node1 = (ALink)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ANode));</span><br><span class="line">    ALink node2 = (ALink)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ANode));</span><br><span class="line">    ALink node3 = (ALink)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ANode));</span><br><span class="line">    <span class="comment">// 赋值</span></span><br><span class="line">    node1-&gt;data = <span class="number">1</span>;</span><br><span class="line">    node2-&gt;data = <span class="number">22</span>;</span><br><span class="line">    node3-&gt;data = data;</span><br><span class="line">    node1-&gt;next = node2;</span><br><span class="line">    node2-&gt;next = node3;</span><br><span class="line">    node3-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 这里ALink*与上面int*的实质是一样的，只不过是“指针的指针”，ALink*指向ALink，其值为ALink的地址。</span></span><br><span class="line">    <span class="comment">// 由于我分配了3个ALink的空间，所以可以存放3个ALink成为数组。</span></span><br><span class="line">    <span class="comment">// 而ALink实质是ANode的指针，也就是结构体指针，所以需要再为ALink指向的东西（ANode）分配空间。</span></span><br><span class="line">    <span class="comment">// 这样就构成了AList中ALink*是一个指针，也是一个数组的头指针</span></span><br><span class="line">    <span class="comment">// 该数组中的每一个元素都是一个指针，指向一个ANode节点。</span></span><br><span class="line">    <span class="comment">// 下面开始将结点放到数组中。</span></span><br><span class="line">    s[<span class="number">0</span>] = node1;</span><br><span class="line">    s[<span class="number">1</span>] = node2;</span><br><span class="line">    s[<span class="number">2</span>] = node3;</span><br><span class="line">    alist-&gt;start = s;</span><br><span class="line">    <span class="comment">// 验证结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,alist-&gt;start[<span class="number">2</span>]-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,alist-&gt;start[<span class="number">0</span>]-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,alist-&gt;start[<span class="number">0</span>]-&gt;next-&gt;next-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 说明与问题</span></span><br><span class="line">    <span class="comment">// ANode使用链表节点的结构是随便用的，事实上并不对阐述“指针的指针”这一概念有任何帮助。</span></span><br><span class="line">    <span class="comment">// 问题1. s[500] = node3; printf(&quot;%d\n&quot;,alist-&gt;start[500]-&gt;data);</span></span><br><span class="line">    <span class="comment">//       上面语句依然可以正确输出参数值，而实际上我只给ALink指针分配了3个ALink大小的空间。</span></span><br><span class="line">    <span class="comment">//       如果这样，那么为ALink*分配空间有什么意义？ 或者说分配的空间是固定的？而不分配</span></span><br><span class="line">    <span class="comment">//       则有可能丢失数据？</span></span><br><span class="line">    <span class="comment">// 问题2.    printf(&quot;%lu\n&quot;,sizeof(ANode));</span></span><br><span class="line">    <span class="comment">//          printf(&quot;%lu\n&quot;,sizeof(ALink));</span></span><br><span class="line">    <span class="comment">//          printf(&quot;%lu\n&quot;,sizeof(AList));</span></span><br><span class="line">    <span class="comment">//      输出结果分别为16、8、8，在我的电脑里int的size是4，为什么ANode是8？</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;说来惭愧，从大一完了以后接触Java就觉得C好笨啊，于是现在重学数据结构的时候，总是遇到C语言的一些问题，今天终于对双重指针有了一定理解，但还有一些问题，待日后学习再解决吧。对了，此问题是由严蔚敏数据结构中，稀疏矩阵压缩存储的十字链表引申而来。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://silencezheng.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="C" scheme="http://silencezheng.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Mac下配置MAP环境（mysql+apache+php）</title>
    <link href="http://silencezheng.top/2021/07/11/article28/"/>
    <id>http://silencezheng.top/2021/07/11/article28/</id>
    <published>2021-07-11T09:03:38.000Z</published>
    <updated>2021-07-11T09:07:26.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>发个库存，前一阵在Mac上捣鼓PHP，不想用MAMP，就自己搭了一下，凑活能用吧～<br>本文的目的是实现类WAMP集成环境的配置效果。</p><span id="more"></span><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><ol><li>下载MySQL社区版，下载地址：<a href="https://dev.mysql.com/downloads/mysql/。">https://dev.mysql.com/downloads/mysql/。</a></li><li>点击安装，会让你设置密码，或提供一个随机密码，如果提供随机密码一定要记住。</li><li>打开系统偏好，启动数据库服务。</li><li>mysql -u root -p登陆。</li></ol><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><ol><li>使用Mac自带的Apache服务器。</li><li>sudo apachectl start启动服务器，浏览器输入localhost出现it works证明开启成功。</li><li>系统自带的服务器位于/etc/apache2下，打开httpd.conf配置文件，可以先备份一下。</li><li>LoadModule php7_module libexec/apache2/libphp7.so打开支持PHP7。</li><li>Include /private/etc/apache2/extra/httpd-vhosts.conf打开支持虚拟主机配置文件。</li><li>打开虚拟主机配置文件，同样可以先备份一下。</li><li> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">ServerAdmin</span> webmaster@mysite.local</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">&quot;/Library/WebServer/Documents/testApache&quot;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> mysite.local</span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="string">&quot;/private/var/log/apache2/mysite.local-error_log&quot;</span></span><br><span class="line">    <span class="attribute">CustomLog</span> <span class="string">&quot;/private/var/log/apache2/mysite.local-access_log&quot;</span> common</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> 加入到文件中，这里描述的虚拟主机域名为mystie.local，根目录为/Library/WebServer/Documents/testApache。</li><li>编辑/etc/hosts文件，将域名绑定到127.0.0.1。 <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span>       localhost mysite.local</span><br></pre></td></tr></table></figure></li><li>sudo apachectl restart重启服务器，在上述根目录中加入index.php测试配置。</li></ol><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ol><li>Mac有自带PHP，这里演示使用homebrew下载新版本PHP配置。</li><li>brew install <a href="mailto:php@7.4">php@7.4</a>下载7.4版本的PHP。</li><li>brew services start <a href="mailto:php@7.4">php@7.4</a>启动PHP服务。</li><li>打开.bash_profile配置文件，添加 export PATH=”/opt/homebrew/opt/php@7.4/bin/:$PATH”将刚下的PHP加入环境变量。（这里的意思就是在PATH前加入该路径，:是Mac中环境变量的分隔符，和windows中;等同。）</li><li>打开zsh配置文件.zshrc，加入source ~/.bash_profile，使其刷新环境。</li><li>source ～/.zshrc，输入php -v检查是否安装成功。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;发个库存，前一阵在Mac上捣鼓PHP，不想用MAMP，就自己搭了一下，凑活能用吧～&lt;br&gt;本文的目的是实现类WAMP集成环境的配置效果。&lt;/p&gt;</summary>
    
    
    
    
    <category term="MacOS" scheme="http://silencezheng.top/tags/MacOS/"/>
    
    <category term="PHP" scheme="http://silencezheng.top/tags/PHP/"/>
    
    <category term="MySQL" scheme="http://silencezheng.top/tags/MySQL/"/>
    
    <category term="Apache" scheme="http://silencezheng.top/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客个性化设置（yilia主题）</title>
    <link href="http://silencezheng.top/2021/07/11/article27/"/>
    <id>http://silencezheng.top/2021/07/11/article27/</id>
    <published>2021-07-11T08:54:12.000Z</published>
    <updated>2021-07-11T09:01:49.062Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近依然在学习考研，祝自己能上岸吧，上岸后还有很多想做的事，学学Spring全家桶啥的，提升一下自己的技能库。最近发现李沐大神的动手学深度学习v2不错，茶余饭后看一看提升一下科研素质，以后发论文没准还是得靠这个，想用Java搞科研还没看出有什么门路。还准备每周在b站发俩做力扣的实战视频，水着玩儿也提高一下算法能力。说回正题，这个博文记录一下我在我的博客所做的一些个性化设置，持续更新～</p><span id="more"></span><h2 id="yilia添加字数统计和阅读时长功能"><a href="#yilia添加字数统计和阅读时长功能" class="headerlink" title="yilia添加字数统计和阅读时长功能"></a>yilia添加字数统计和阅读时长功能</h2><ol><li>安装 hexo-wordcount<br>在博客目录下打开Git Bash Here，输入命令:<br>npm i –save hexo-wordcount</li><li>文件配置<br>在theme\yilia\layout_partial\post下创建word.ejs文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:10px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-time&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-keyboard-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span>  字数统计: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&lt;%= wordcount(post.content) %&gt;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-time&quot;</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-hourglass-half&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span>  阅读时长: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&lt;%= min2read(post.content) %&gt;分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>然后在themes/yilia/layout/_partial/article.ejs中添加:<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-inner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &lt;% if (post.link || post.title)</span><span class="xquery">&#123; %&gt;</span></span><br><span class="line"><span class="xquery">      <span class="xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;article-header&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="xquery">        &lt;%- partial(&#x27;post/title&#x27;, </span><span class="xquery">&#123;class_name: <span class="string">&#x27;article-title&#x27;</span>&#125;</span></span><span class="xml">) %&gt;</span></span><br><span class="line"><span class="xml">        &lt;% if (!post.noDate)</span><span class="xquery"><span class="xquery">&#123; %&gt;</span></span></span><br><span class="line"><span class="xquery"><span class="xquery">        &lt;<span class="meta">%-</span> partial(<span class="string">&#x27;post/date&#x27;</span>, &#123;class_name: <span class="string">&#x27;archive-article-date&#x27;</span>, date_format: null&#125;</span></span><span class="xml">) %&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 需要添加的位置 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 开始添加字数统计--&gt;</span></span></span><br><span class="line"><span class="xml">        &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)</span><span class="xquery"><span class="xquery">&#123;%&gt;</span></span></span><br><span class="line"><span class="xquery"><span class="xquery">          &lt;<span class="meta">%-</span> partial(<span class="string">&#x27;post/word&#x27;</span>) %&gt;</span></span></span><br><span class="line"><span class="xquery"><span class="xquery">          &lt;% &#125;</span></span><span class="xml"> %&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 添加完成 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>开启功能<br>在站点的_config.yml中添加下面代码:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启字数统计</span></span><br><span class="line"><span class="comment">#不需要使用，直接设置值为false，或注释掉</span></span><br><span class="line"><span class="attr">word_count:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="添加不蒜子统计插件"><a href="#添加不蒜子统计插件" class="headerlink" title="添加不蒜子统计插件"></a>添加不蒜子统计插件</h2><ol><li>配置是否开启不蒜子访问量统计功能<br>在themes/yilia/_config.yml添加属性<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启访问量统计功能(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>引入不蒜子并添加站点访问量<br>在themes/yilia/layout/_partial/footer.ejs末尾footer标签前添加如下代码<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class="line">        <span class="comment">&lt;!-- 不蒜子统计 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">                本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">                本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li>添加文章访问量<br>这种形式是：外面不显示，只在文章里面才显示，位置为右上角时间的右边。<br>在themes/yilia/layout/_partial/post/date.ejs开头添加如下代码<figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="perl"> <span class="keyword">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable &amp;&amp; !<span class="keyword">index</span>)&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 不蒜子统计 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_page_pv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;&lt;%=</span></span></span><span class="perl"> class_name </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-smile icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 阅读数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125; </span><span class="xml">%&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="在hexo博客养一只猫"><a href="#在hexo博客养一只猫" class="headerlink" title="在hexo博客养一只猫"></a>在hexo博客养一只猫</h2><ol><li><p>安装模块</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> --save hexo-helper-live2d</span><br><span class="line"></span><br><span class="line">这里解释一下npm <span class="keyword">install</span>的命令含义：</span><br><span class="line">npm <span class="keyword">install</span> moduleName <span class="comment"># 安装模块到项目目录</span></span><br><span class="line"></span><br><span class="line">npm <span class="keyword">install</span> -g moduleName <span class="comment"># -g 意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。</span></span><br><span class="line"></span><br><span class="line">npm <span class="keyword">install</span> --save moduleName <span class="comment"># --save的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。</span></span><br><span class="line"></span><br><span class="line">npm <span class="keyword">install</span> --save-dev moduleName <span class="comment"># --save -dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。</span></span><br></pre></td></tr></table></figure></li><li><p>安装模型</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用 npm <span class="keyword">install</span> 模型名字安装。</span><br><span class="line">模型列表如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在hexo或者主题的_config.yml文件中添加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D:</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line">  <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line"><span class="attr">display:</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="attr">width:</span> <span class="number">150</span> <span class="comment"># 显示位置及大小</span></span><br><span class="line">  <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">hOffset:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">vOffset:</span> <span class="number">-20</span></span><br><span class="line"><span class="attr">mobile:</span></span><br><span class="line">  <span class="attr">show:</span> <span class="literal">false</span> <span class="comment"># 手机显示开关，建议关闭</span></span><br><span class="line"><span class="attr">react:</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure></li><li><p>遇到的问题…<br>在我配置好一切后，出现了不能更换模型的bug，怎么更改配置也没有用，我就尝试使用npm audit fix修复，看了一下报告大概是hexo等等插件的版本问题，然后强制fix了一波以后还是没好。。。一气之下我就把下载的东西都卸了，现在audit一下果然没问题了，然后重新用npm装一遍。。果然发现了些问题。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> WARN deprecated fsevents@<span class="number">1</span>.<span class="number">2</span>.<span class="number">13</span>: fsevents <span class="number">1</span> will break <span class="literal">on</span> node v<span class="number">14</span>+ and could be using insecure binaries. Upgrade to fsevents <span class="number">2</span>.</span><br><span class="line"><span class="attribute">npm</span> WARN deprecated chokidar@<span class="number">2</span>.<span class="number">1</span>.<span class="number">8</span>: Chokidar <span class="number">2</span> will break <span class="literal">on</span> node v<span class="number">14</span>+. Upgrade to chokidar <span class="number">3</span> with <span class="number">15</span>x less dependencies.</span><br><span class="line"><span class="attribute">npm</span> WARN deprecated hexo-bunyan@<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>: Please see https://github.com/hexojs/hexo-bunyan/issues/<span class="number">17</span></span><br><span class="line"><span class="attribute">npm</span> WARN deprecated core-js@<span class="number">2</span>.<span class="number">6</span>.<span class="number">12</span>: core-js@&lt;<span class="number">3</span>.<span class="number">3</span> is no longer maintained and not recommended for usage due to the number of issues. Because of the V<span class="number">8</span> engine whims, feature detection in old core-js versions could cause a slowdown up to <span class="number">100</span>x even if nothing is polyfilled. Please, upgrade your dependencies to the actual version of core-js.</span><br></pre></td></tr></table></figure><p>从上面的警告可以看出我目前使用的nodejs15版本对有些插件的支持是比较差的，按照提示我运行audit fix来修复一下，结果修复完出来了更多issue。。从8个变成13了😅，试了一遍还是改不了模型和位置，索性不安了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近依然在学习考研，祝自己能上岸吧，上岸后还有很多想做的事，学学Spring全家桶啥的，提升一下自己的技能库。最近发现李沐大神的动手学深度学习v2不错，茶余饭后看一看提升一下科研素质，以后发论文没准还是得靠这个，想用Java搞科研还没看出有什么门路。还准备每周在b站发俩做力扣的实战视频，水着玩儿也提高一下算法能力。说回正题，这个博文记录一下我在我的博客所做的一些个性化设置，持续更新～&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://silencezheng.top/tags/Hexo/"/>
    
    <category term="yilia" scheme="http://silencezheng.top/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客迁移之windows to macOS</title>
    <link href="http://silencezheng.top/2021/05/28/article26/"/>
    <id>http://silencezheng.top/2021/05/28/article26/</id>
    <published>2021-05-28T09:40:00.000Z</published>
    <updated>2022-01-28T16:54:05.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前在windows电脑上迁移过博客，但是没有记录过程，这次正好换到另一台电脑，迁移一下博客并记录一下。碰到了不少小坑～ 网上的方式各种麻烦，感觉我目前用的这种最简单粗暴。</p><span id="more"></span><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>node.js环境, git环境搭建好</li><li>cnpm替换npm，安装hexo框架cnpm install -g hexo-cli</li></ol><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><ol><li>新建目录，hexo init创建博客。</li><li>cnpm install –save hexo-deployer-git，在blog目录下安装git部署插件。</li><li>将原博客的下列文件复制到新博客目录中<br> _config.yml<br>  package.json (不清楚有没有用到)<br>  scaffolds/ (不清楚有没有用到)<br>  source/<br>  themes/</li><li>hexo clean &amp;&amp; hexo g</li><li>hexo s本地测试, 没问题就可以发布了。</li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li>因为我原博客中添加了字数统计插件，所以第一次进行完第四步测试会报错，npm i –save hexo-wordcount在目录中添加插件解决。</li><li>当我首次发布到远端时，报错fatal: unable to access ‘<a href="https://github.com/silenceZheng66/silenceZheng66.github.io.git/&#39;">https://github.com/silenceZheng66/silenceZheng66.github.io.git/&#39;</a>: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443，看网上说是因为设置了https代理，<br>但当我去掉代理也没有反应，输入以下命令则可以成功发布。<br>git config –global http.sslBackend “openssl” </li><li>当解决2错误后，我注意到有另一个报错：FATAL err: Error: Spawn failed 大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容，解决办法如下：<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 删除<span class="string">.deploy_git</span>文件夹<span class="params">(如果没有跳过这步。)</span></span><br><span class="line">2. 输入git config <span class="params">--global</span> core.autocrlf <span class="literal">false</span></span><br><span class="line">然后，依次执行：</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">成功！</span><br></pre></td></tr></table></figure> 原理：<br> 1、不同操作系统下，处理行尾结束符的方法是不同的：</li></ol><p>　   　    windows下：CRLF（表示句尾使用回车换行两个字符，即windows下的”\r\n”换行）</p><pre><code>       unix下：LF（表示句尾，只使用换行）       mac下：CR（表示只使用回车）2、Git下处理“换行”（line ending）</code></pre><p>　　    core.autocrlf是git中负责处理lineending的变量，可以设置3个值：true，false，input。<br>    （1）设置为true【config –global core.autocrlf true】<br>          当设置成true时，这意味着你在任何时候添加(add)文件到git仓库时，git都会视为它是一个文本文件(text file)。<br>　　　     它将把crlf变成LF。<br>    （2）设置为false【config –global core.autocrlf false】<br>          当设置成false时，line endings将不做转换操作。文本文件保持原来的样子。<br>    （3）设置为input时，添加文件git仓库时，git把crlf编程lf。当有人Check代码时还是lf方式。因此在window操作系统下，不要使用这个设置。<br>4. 某一篇博客中可能存在”’{连着#“字符串，去掉它，或者去掉”#”.否则generate时会报错！</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前在windows电脑上迁移过博客，但是没有记录过程，这次正好换到另一台电脑，迁移一下博客并记录一下。碰到了不少小坑～ 网上的方式各种麻烦，感觉我目前用的这种最简单粗暴。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://silencezheng.top/tags/Hexo/"/>
    
    <category term="MacOS" scheme="http://silencezheng.top/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>M1 MacBook配置arm版homebrew</title>
    <link href="http://silencezheng.top/2021/05/25/article25/"/>
    <id>http://silencezheng.top/2021/05/25/article25/</id>
    <published>2021-05-25T07:33:55.000Z</published>
    <updated>2021-07-11T08:52:53.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>呼～一转眼，五个多月没有更新啦，其实中间一直有在写，但是没有上传，主要是没有时间整理，加上在准备考研，准备考完后再全心投入到编程学习中咯。这篇分享一下M1 MacBook配置arm版homebrew，实测靠谱。</p><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>设置使用中科大镜像<br>HOMEBREW_CORE_GIT_REMOTE=<a href="https://mirrors.ustc.edu.cn/homebrew-core.git">https://mirrors.ustc.edu.cn/homebrew-core.git</a></p></li><li><p>安装homebrew<br>/bin/bash -c “$(curl -fsSL <a href="https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)&quot;">https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)&quot;</a></p></li><li><p>添加 Homebrew 到 /Users/你的用户名/.zprofile 文件的 PATH 中，执行下面命令即可:<br>echo ‘eval “$(/opt/homebrew/bin/brew shellenv)”‘ &gt;&gt; /Users/你的用户名/.zprofile<br>eval “$(/opt/homebrew/bin/brew shellenv)”</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;呼～一转眼，五个多月没有更新啦，其实中间一直有在写，但是没有上传，主要是没有时间整理，加上在准备考研，准备考完后再全心投入到编程学习中咯。这篇分享一下M1 MacBook配置arm版homebrew，实测靠谱。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Homebrew" scheme="http://silencezheng.top/tags/Homebrew/"/>
    
    <category term="MacOS" scheme="http://silencezheng.top/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Python基础笔记-常用内置函数（一）</title>
    <link href="http://silencezheng.top/2020/12/31/article24/"/>
    <id>http://silencezheng.top/2020/12/31/article24/</id>
    <published>2020-12-31T11:41:55.000Z</published>
    <updated>2020-12-31T12:06:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一下平时做项目用到的内置函数。<br>本篇函数包含：enumerate()、ord()、 shuffle() </p><span id="more"></span><h3 id="用法及示例"><a href="#用法及示例" class="headerlink" title="用法及示例"></a>用法及示例</h3><p><strong>enumerate()</strong><br>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。<br>Python 2.3. 以上版本可用，2.6 添加 start 参数。</p><p>语法： enumerate(sequence, [start=0])</p><p>参数： </p><ul><li>sequence – 一个序列、迭代器或其他支持迭代对象。</li><li>start – 下标起始位置。<br>该方法返回枚举对象。</li></ul><p>实例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> i, <span class="keyword">element</span> <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">...     print i, <span class="keyword">element</span></span><br><span class="line">... </span><br><span class="line"><span class="number">0</span> <span class="literal">one</span></span><br><span class="line"><span class="number">1</span> <span class="literal">two</span></span><br><span class="line"><span class="number">2</span> <span class="literal">three</span></span><br></pre></td></tr></table></figure><p><strong>ord()</strong><br>ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。</p><p>语法： ord(c)</p><p>返回值是对应的十进制整数。</p><p>实例：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="function"><span class="title"><span class="built_in">ord</span></span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="number">97</span></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title"><span class="built_in">ord</span></span>(<span class="string">&#x27;b&#x27;</span>)</span></span><br><span class="line"><span class="number">98</span></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title"><span class="built_in">ord</span></span>(<span class="string">&#x27;c&#x27;</span>)</span></span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><p><strong>shuffle()</strong><br>shuffle() 方法将序列的所有元素随机排序。</p><p>语法(注意：shuffle()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法)：<br>import random<br>random.shuffle (lst )</p><p>参数： </p><ul><li>lst – 可以是一个列表。<br>该方法没有返回值。</li></ul><p>实例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">list = [<span class="number">20</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br><span class="line">random.<span class="built_in">shuffle</span>(list)</span><br><span class="line">print <span class="string">&quot;随机排序列表 : &quot;</span>,  list</span><br><span class="line"></span><br><span class="line">random.<span class="built_in">shuffle</span>(list)</span><br><span class="line">print <span class="string">&quot;随机排序列表 : &quot;</span>,  list</span><br><span class="line"></span><br><span class="line">输出结果为：</span><br><span class="line">随机排序列表 :  [<span class="number">16</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">随机排序列表 :  [<span class="number">16</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录一下平时做项目用到的内置函数。&lt;br&gt;本篇函数包含：enumerate()、ord()、 shuffle() &lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础笔记-面向对象</title>
    <link href="http://silencezheng.top/2020/12/31/article23/"/>
    <id>http://silencezheng.top/2020/12/31/article23/</id>
    <published>2020-12-31T09:14:55.000Z</published>
    <updated>2020-12-31T11:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>断更两个多月了，一直在忙学校的事情，疫情下压缩课时，每天都有很多事情要处理，现在终于放假了，继续<br>开始更新这两个月内的学习收获，这两个月在python和java的基础方面进行了很多实践，这篇来记录一下python的面向对象编程收获，都是一些基础知识。</p><span id="more"></span><h3 id="Python的面向对象编程"><a href="#Python的面向对象编程" class="headerlink" title="Python的面向对象编程"></a>Python的面向对象编程</h3><p>面向对象学的很多了，直接上一段类的代码分析一下就好，以下是一段我在项目中写的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">    _<span class="built_in">id</span> = <span class="string">&quot;Entity&quot;</span>    <span class="comment">#_id表示保护变量，只能允许其本身与子类进行访问，不能用于 from module import * ，__id表示私有变量，只能允许这个类本身进行访问。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  <span class="comment">#__init__是python中的特殊函数之一，作为构造函数。</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Something the player can interact with</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._collidable = <span class="literal">True</span>  <span class="comment">#与Java中不太相同的是，python的类变量不需要全部声明在类中。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_collide</span>(<span class="params">self, collidable</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">        self._collidable = collidable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">can_collide</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._collidable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span>     <span class="comment">#__str__和__repr__也是特殊函数，用于将值或者说类转化为字符串形式，但有区分，此处不细说。</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.__class__.__name__&#125;</span>()&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要说明的是，在python中不引入模块的话是无法创建抽象类的，但我可以将Entity类当作抽象类来使用。<br>如果需要构建抽象类，下面是抽象类的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc <span class="comment">#利用abc模块实现抽象类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">All_file</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span></span><br><span class="line">    all_type=<span class="string">&#x27;file&#x27;</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment">#定义抽象方法，无需实现功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;子类必须定义读功能&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment">#定义抽象方法，无需实现功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;子类必须定义写功能&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Txt</span>(<span class="params">All_file</span>):</span> <span class="comment">#子类继承抽象类，但是必须定义read和write方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文本数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文本数据的读取方法&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下面继续说回刚刚我定义的实体类Entity，如下有几个类对其进行了继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wall</span>(<span class="params">Entity</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    _<span class="built_in">id</span> = WALL</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.set_collide(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">Entity</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_hit</span>(<span class="params">self, game</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure><p>WALL是一个可以使用的类，而Item则是另一个抽象基类。这里raise用于抛出异常 类似java中throw。而调用父类方法需要用super().xxx<br>而Item是我需要用来创建各种游戏中角色的基类（这个项目是一个tkinter的游戏），如下是他的其中一个子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveIncrease</span>(<span class="params">Item</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    _<span class="built_in">id</span> = MOVE_INCREASE</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, moves=<span class="number">5</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._moves = moves</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_hit</span>(<span class="params">self, game</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line">        player = game.get_player()</span><br><span class="line">        player.change_move_count(self._moves)</span><br><span class="line">        game.get_game_information().pop(player.get_position())</span><br></pre></td></tr></table></figure><p>为子类创建实例 –&gt;&gt; m=MoveIncrease()<br>调用实例函数 –&gt;&gt; m.on_hit(game)<br>调用实例变量 –&gt;&gt; m.id          当然调用的方式有很多比如getattr()之类，就不一一列举了。</p><p>python中的类还有一些内置属性：<br>“<strong>dict</strong>“ : 类的属性（包含一个字典，由类的数据属性组成）<br>“<strong>doc</strong>“ :类的文档字符串<br>“<strong>name</strong>“: 类名<br>“<strong>module</strong>“: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）<br>“<strong>bases</strong>“ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</p><p>关于重写方法，只要在子类中使用与父类中相同函数名就可以了。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这只是面向对象最基础的部分，还有许多如运算符重载，垃圾回收等等没有写入进去，留待日后有心得再补充。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;断更两个多月了，一直在忙学校的事情，疫情下压缩课时，每天都有很多事情要处理，现在终于放假了，继续&lt;br&gt;开始更新这两个月内的学习收获，这两个月在python和java的基础方面进行了很多实践，这篇来记录一下python的面向对象编程收获，都是一些基础知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://silencezheng.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE基础笔记-多态(继承)，异常处理，文件流，比较器</title>
    <link href="http://silencezheng.top/2020/10/12/article22/"/>
    <id>http://silencezheng.top/2020/10/12/article22/</id>
    <published>2020-10-12T12:30:55.000Z</published>
    <updated>2020-10-12T12:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>两天做了两个很有意思的项目，一个Nim游戏，一个塔防游戏，对类与继承，比较器，异常处理和文件IO操作<br>的训练效果还是挺不错的，收获很多，写一篇笔记来记录一下学习效果。源代码有需要的可以微博联系我，<br>虽然我代码写的很乱哈。</p><span id="more"></span><h3 id="从Nim游戏中理解比较器，异常处理和文件流操作"><a href="#从Nim游戏中理解比较器，异常处理和文件流操作" class="headerlink" title="从Nim游戏中理解比较器，异常处理和文件流操作"></a>从Nim游戏中理解比较器，异常处理和文件流操作</h3><p>先来简述一下Nim游戏的规则吧，给出一堆石子的总数和每次允许取出的最大上限，两个玩家开始按<br>规则取石子，取走最后一个石子的玩家Lose，规则很简单。（关于这个游戏的继承我不详细说，有些简单，<br>塔防游戏要更复杂一些，用于对类与继承进行理解更加深刻。） 我们要做的任务就是：</p><ul><li>制作一个类Linux的命令行面板用于接收输入，注意：命令可能会有数量不等的参数传入。</li><li>游戏运行有100个用户同时存在，但游戏同一时间内只能存在一场对局。</li><li>用户的数据统计和基本信息在游戏界面程序启动时从文件中读取并在游戏程序关闭时写入文件。（也就是一个数据库）</li><li>要求能够实现添加玩家，添加AI玩家，删除玩家，编辑玩家基本信息，重置玩家数据统计，展示玩家信息，按数据统计顺序逆序排名等功能。</li><li>没错，这个游戏需要实现人机对战和机机对战。</li><li>程序要能够处理异常，包括移动石子数，参数不足和指令不存在。</li></ul><p>命令行面板如下图，下图展示的是commands功能：<br><img src="/assets/post_img/article22/nimcmd.png" alt="NIMCommands"><br><strong>类的设计</strong><br>那对游戏本身有了一个了解之后我们就要去设计类了，显然玩家分为人类玩家和AI玩家，让这两个类继承玩家类就好了，<br>因为AI除了在移动石子上不需要从键盘输入以外和人类玩家的其他信息都是一样的，所以只需要重写移动方法。<br>接下来一个NimGame类用来实现游戏主体，一个NimSys类用来管理命令行面板和其他功能，在需要游戏的时候，创建<br>一个游戏实体就好了。</p><p><strong>命令行面板实现</strong><br>项目要求指令有不同的参数传入，指令和参数间用空格隔开，参数和参数间用英文逗号隔开。<br>这里记录第一个问题，就是java的Scanner缺陷问题。<br><font color=#FF4500 size=4 face="黑体">1 Scanner的hasNext方法无法检测是否有下一个输入</font><br>java开发文档这样解释：<br>public boolean hasNext()<br>如果此扫描器的输入中有另一个标记，则返回 true。在等待要扫描的输入时，此方法可能阻塞。扫描器将不执行任何输入。</p><p>经过我各种实验发现这个方法在交互上没有任何作用，所以舍弃。于是改用另一种办法：在死循环中用next()与指令进行比对<br>配对成功进入对应函数，不成功抛出异常。 但问题在于，接受了next()后，如果同行有参数传入，如何处理？<br>关键在于<strong>nextLIne()</strong>函数，在同行读取了指令的情况下使用<strong>nextLIne()</strong>可以读取到指令后面的所有内容。<br>这样再用split处理就可以得到想要的参数数组了，同样，如果个数不够，抛出异常。<br>ps：去除字符串首尾空格用.trim()函数。</p><p><strong>玩家信息用文件流存储</strong><br>这个实现起来相对简单，方法也很多，我只提供一种读写方式作为参考。<br><font color=#FF4500 size=4 face="黑体">2 Buffered包装文件流处理</font></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">写入方法：</span><br><span class="line">String url = <span class="string">&quot;./players.dat&quot;</span>;<span class="comment">//存储地址</span></span><br><span class="line">        File database = <span class="keyword">new</span> <span class="constructor">File(<span class="params">url</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!database.exists<span class="literal">()</span>)&#123;</span><br><span class="line">            database.create<span class="constructor">NewFile()</span>;<span class="comment">//不存在就创建，注意mkdir是创建文件夹，文件要用createNewFile</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            database.delete<span class="literal">()</span>;</span><br><span class="line">            database.create<span class="constructor">NewFile()</span>;<span class="comment">//因为启动都要读取数据到缓存，所以退出时删了重写就好</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读入</span></span><br><span class="line">        <span class="keyword">if</span>(this.players.is<span class="constructor">Empty()</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            BufferedWriter writer = <span class="keyword">new</span> BufferedWriter (<span class="keyword">new</span> <span class="constructor">OutputStreamWriter(<span class="params">new</span> FileOutputStream(<span class="params">database</span>,<span class="params">false</span>)</span>,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            NimPlayer value = null;</span><br><span class="line">            Iterator iter = this.players.iterator<span class="literal">()</span>;<span class="comment">//迭代器遍历玩家数组</span></span><br><span class="line">            <span class="keyword">while</span> (iter.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                value = (NimPlayer) iter.next<span class="literal">()</span>;</span><br><span class="line">                String tmp = value.get<span class="constructor">INFO()</span>;<span class="comment">//给玩家一个格式化信息的方法便于写入</span></span><br><span class="line">                writer.write(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            writer.flush<span class="literal">()</span>;<span class="comment">//强制将缓冲区中数据发送出去，不必等到缓冲区满</span></span><br><span class="line">            writer.close<span class="literal">()</span>;<span class="comment">//关闭流，习惯要好。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">读入方法：</span><br><span class="line">String url = <span class="string">&quot;./players.dat&quot;</span>;</span><br><span class="line">        File database = <span class="keyword">new</span> <span class="constructor">File(<span class="params">url</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (database.exists<span class="literal">()</span>)&#123;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> <span class="constructor">BufferedReader(<span class="params">new</span> InputStreamReader(<span class="params">new</span> FileInputStream(<span class="params">database</span>)</span>,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                String stmp = reader.read<span class="constructor">Line()</span>;</span><br><span class="line">                <span class="keyword">if</span> (stmp==null)&#123;</span><br><span class="line">                    break;<span class="comment">//读到末尾</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    String<span class="literal">[]</span> tmp = stmp.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (tmp.length&gt;<span class="number">5</span>)&#123;</span><br><span class="line">                        NimAIPlayer tmpPlayer = <span class="keyword">new</span> <span class="constructor">NimAIPlayer(<span class="params">tmp</span>[0],<span class="params">tmp</span>[1],<span class="params">tmp</span>[2],Integer.<span class="params">parseInt</span>(<span class="params">tmp</span>[3])</span>,<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">tmp</span>[4])</span>);</span><br><span class="line">                        this.players.add(tmpPlayer);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        NimPlayer tmpPlayer = <span class="keyword">new</span> <span class="constructor">NimPlayer(<span class="params">tmp</span>[0],<span class="params">tmp</span>[1],<span class="params">tmp</span>[2],Integer.<span class="params">parseInt</span>(<span class="params">tmp</span>[3])</span>,<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">tmp</span>[4])</span>);</span><br><span class="line">                        this.players.add(tmpPlayer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>玩家数组</strong><br>玩家数组这里我用ArrayList设置定长100处理（其实没必要），推荐个帖子：<a href="https://www.cnblogs.com/msymm/p/9872818.html">https://www.cnblogs.com/msymm/p/9872818.html</a></p><p><strong>玩家信息按字母a-z顺序打印</strong><br>这个功能实现起来用两个技巧，一个是compareTo方法对String类型的处理，一个是通过重写比较器Comparator的compara接口来<br>实现排序功能。话不多说直接上代码。<br><font color=#FF4500 size=3 face="黑体">3 比较器</font></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>sort(console.players, <span class="keyword">new</span> Comparator&lt;NimPlayer&gt;<span class="literal">()</span> &#123;</span><br><span class="line">@Override</span><br><span class="line">public <span class="built_in">int</span> compare(NimPlayer s1, NimPlayer s2) &#123;</span><br><span class="line">String name1 = s1.get<span class="constructor">Username()</span>.<span class="keyword">to</span><span class="constructor">LowerCase()</span>;</span><br><span class="line">String name2 = s2.get<span class="constructor">Username()</span>.<span class="keyword">to</span><span class="constructor">LowerCase()</span>;</span><br><span class="line"><span class="built_in">int</span> num = name1.compare<span class="constructor">To(<span class="params">name2</span>)</span>;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//display all</span></span><br><span class="line"><span class="keyword">for</span> (NimPlayer aplayer:console.players) &#123;</span><br><span class="line">String info = <span class="string">&quot;&quot;</span>;</span><br><span class="line">info = info+aplayer.get<span class="constructor">Username()</span>+<span class="string">&quot;, &quot;</span>+aplayer.get<span class="constructor">Firstname()</span>+<span class="string">&quot;, &quot;</span>+aplayer.get<span class="constructor">Famname()</span>+<span class="string">&quot;, &quot;</span>+aplayer.get<span class="constructor">Turns()</span>+<span class="string">&quot; games, &quot;</span>+aplayer.get<span class="constructor">Wins()</span>+<span class="string">&quot; wins&quot;</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个重点要记住：形参s1的实参为数组中第二个对象。<br>举个例子：[Mike，Allen] 有一个这样的玩家数组，当用比较器排序时，传入参数s1为Allen，s2为Mike。然后String的compareTo方法<br>会比较字符串1的第一个字符跟字符串2的第一个字符不相等，则两个字符串都按照第一个字符的ASCII码顺序进行比较，其他字符都不用看<br>，并返回一个整型（ASCII码的差值）。这里a-m = 97-109 = -12 。 之后比较器会判断权重，因为返回了负数，所以后者会排在前面。</p><p><img src="/assets/post_img/article22/asc2.jpeg" alt="ASCII码"></p><p><strong>ranking按胜率排序</strong><br>按胜率排序，胜率相同按字母顺序排序。类似，直接上代码。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//make ordered</span></span><br><span class="line">         Collections.<span class="built_in">sort</span>(<span class="keyword">this</span>.players, <span class="keyword">new</span> Comparator&lt;NimPlayer&gt;() &#123;</span><br><span class="line">             @Override</span><br><span class="line">             <span class="keyword">public</span> <span class="built_in">int</span> compare(NimPlayer s1, NimPlayer s2) &#123;</span><br><span class="line">                 <span class="built_in">int</span> <span class="built_in">key</span> = <span class="number">0</span>;</span><br><span class="line">                 <span class="keyword">String</span> name1 = s1.getUsername().toLowerCase();</span><br><span class="line">                 <span class="keyword">String</span> name2 = s2.getUsername().toLowerCase();</span><br><span class="line">                 <span class="built_in">int</span> num1 = name1.compareTo(name2);</span><br><span class="line">                 <span class="comment">//System.out.println(s1.getWinRate()+&quot;   &quot;+s2.getWinRate());</span></span><br><span class="line">                 <span class="keyword">double</span> dnum2 = s1.getWinRate() - s2.getWinRate();</span><br><span class="line">                 <span class="comment">//System.out.println(dnum2);</span></span><br><span class="line">                 <span class="keyword">if</span> (dnum2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="built_in">key</span> =  <span class="number">-1</span>;</span><br><span class="line">                 &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dnum2==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="built_in">key</span> = num1;</span><br><span class="line">                 &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dnum2&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="built_in">key</span> =  <span class="number">1</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">return</span> <span class="built_in">key</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><p><strong>人机对战</strong><br>其他与人类玩家一样，只是在接受输入的使用通过判断是机器人玩家后，直接从机器人玩家中获取移动的石子数，<br>这里分享一个我写的Nim游戏必胜策略，不一定准确。可以通过简单测试。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">do</span> a <span class="keyword">input</span></span><br><span class="line">   <span class="built_in">public</span> <span class="type">boolean</span> isVictory(<span class="type">int</span> stoneremain, <span class="type">int</span> upperbound,<span class="type">int</span> <span class="keyword">move</span>)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">100</span>;k++)&#123;</span><br><span class="line">           <span class="keyword">if</span>((stoneremain-<span class="keyword">move</span>) == k*(upperbound+<span class="number">1</span>)+<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">public</span> <span class="type">int</span> removeStone(<span class="type">int</span> upperbound,<span class="type">int</span> stoneremain)&#123;</span><br><span class="line">       <span class="type">int</span> <span class="keyword">limit</span> = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (upperbound&gt;=stoneremain)&#123;</span><br><span class="line">           <span class="keyword">limit</span> = stoneremain;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (upperbound&lt;stoneremain)&#123;</span><br><span class="line">           <span class="keyword">limit</span> = upperbound;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> movedStones = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="keyword">limit</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (isVictory(stoneremain,upperbound,i))&#123;</span><br><span class="line">               movedStones = i;</span><br><span class="line">               break;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (movedStones==<span class="number">0</span>)&#123;</span><br><span class="line">           movedStones = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="keyword">after</span> = stoneremain - movedStones;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">after</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="从塔防游戏中理解抽象类，继承，抽象方法和重写方法。"><a href="#从塔防游戏中理解抽象类，继承，抽象方法和重写方法。" class="headerlink" title="从塔防游戏中理解抽象类，继承，抽象方法和重写方法。"></a>从塔防游戏中理解抽象类，继承，抽象方法和重写方法。</h3><p>同样，简单说下题目。<br><img src="/assets/post_img/article22/bee.png" alt="Bee塔防"><br>图中有两类对象，地砖Tile和昆虫Insect，昆虫分为蜜蜂和马蜂，蜜蜂有三种，分别是BusyBee、StingyBee和TankyBee。<br>这个游戏可以用植物大战僵尸来类比，上面三种分别对应太阳花，豌豆射手和地刺。<br>下面主要从蜜蜂类来学习多态的一些方法。</p><p><strong>抽象类</strong><br>如果一个类中没有包含足够的信息来描绘一个具体的对象，将这个类称为抽象类。<br>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。<br>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。在Java中抽象类表示的是一种继承关系，一个类只能继承<br>一个抽象类，而一个类却可以实现多个接口。举个例子来说明为什么要写一个抽象类，在植物大战僵尸的游戏流程中，只需要<br>出现豌豆射手和冰冻豌豆射手就好了，对“射手”这个父类没有实例化需求，那么将这个类设置为抽象类。同理，蜜蜂和马蜂同属<br>于昆虫类，故将昆虫类设置为抽象类。下面给一个我写的抽象类例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Insect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tile myTile;</span><br><span class="line">    <span class="keyword">private</span> int hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Insect(Tile aTile,int hp)&#123;</span><br><span class="line">        <span class="keyword">this</span>.myTile = aTile;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.myTile.addInsect(<span class="keyword">this</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> new IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Tile getPosition()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.myTile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> int getHealth()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setPosition(Tile newTile)&#123;</span><br><span class="line">        <span class="keyword">this</span>.myTile = newTile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//other methods</span></span><br><span class="line">    <span class="keyword">public</span> void takeDamage(int damage)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> instanceof HoneyBee &amp;&amp; <span class="keyword">this</span>.myTile.isHive())&#123;</span><br><span class="line">            damage = (int) (damage*<span class="number">0.9</span>);</span><br><span class="line">            <span class="keyword">this</span>.hp = <span class="keyword">this</span>.hp-damage;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hp&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.myTile.removeInsect(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.hp = <span class="keyword">this</span>.hp-damage;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hp&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.myTile.removeInsect(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> boolean takeAction();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> boolean equals(Object o)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>==o)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(o instanceof Insect))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Insect io = (Insect) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.myTile.equals(io.myTile) &amp;&amp; <span class="keyword">this</span>.hp==io.hp)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了基本的成员变量和构造方法，该抽象类中还包含一个抽象方法takeAction()和重写的equals方法。</p><p><strong>重写方法和继承</strong><br>重写是子类对父类的允许访问的方法的实现过程进行重新编写！返回值和形参都不能改变。即外壳不变，核心重写！<br>重写的好处在于子类可以根据需要，定义特定于自己的行为。也就是说子类能够根据需要实现父类的方法。<br>下面给出蜜蜂类来再看一下重写方法，因为蜜蜂类也不需要实例化，所以设置为抽象类，继承昆虫这个抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HoneyBee</span> <span class="keyword">extends</span> <span class="title">Insect</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cost4Food;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoneyBee</span><span class="params">(Tile aTile, <span class="keyword">int</span> hp,<span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(aTile, hp);  <span class="comment">//我们在继承父类时，不需要将同样的代码再写一遍，直接使用super关键字调用父类构造方法。</span></span><br><span class="line">        <span class="keyword">this</span>.cost4Food = cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCost</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cost4Food;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(o))&#123;  <span class="comment">//同样调用父类方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> HoneyBee))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HoneyBee io = (HoneyBee) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cost4Food == io.cost4Food)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=#FF4500 size=3 face="黑体">4 重写方法的一些规则</font></p><ul><li>参数列表必须完全与被重写方法的相同；</li><li>返回类型必须完全与被重写方法的返回类型相同；</li><li>访问权限不能比父类中被重写的方法的访问权限更高。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为final的方法不能被重写。</li><li>声明为static的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个方法，则不能重写这个方法。</li></ul><p>另外，关于为什么要重写equals方法，这里有一篇博客写的比较好：<a href="https://blog.csdn.net/panchao888888/article/details/80888592">https://blog.csdn.net/panchao888888/article/details/80888592</a><br>我这里从中摘录一些：<br><font color=#FF4500 size=3 face="黑体">5 为什么要重写equals()方法？</font><br>1.Object类中equals方法比较的是两个对象的引用地址，只有对象的引用地址指向同一个地址时，才认为这两个地址是相等的，否则这两个对象就不想等。</p><p>2.如果有两个对象，他们的属性是相同的，但是地址不同，这样使用equals()比较得出的结果是不相等的，而我们需要的是这两个对象相等，因此默认的equals()方法是不符合我们的要求的，这个时候我们就需要对equals()方法进行重写以满足我们的预期结果。</p><p>3.在java的集合框架中需要用到equals()方法进行查找对象，如果集合中存放的是自定义类型，并且没有重写equals()方法，则会调用Object父类中的equals()方法按照地址比较，往往会出现错误的结果，此时我们应该根据业务需求重写equals()方法。</p><p><strong>抽象方法</strong><br>抽象方法和抽象类的使用原因十分相似，都是为了个性化定制每个实体类的方法，而将方法名统一。<br>下面用StingyBee类继承蜜蜂类来具体看一下如何重写抽象方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StingyBee</span> <span class="title">extends</span> <span class="title">HoneyBee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> int attack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StingyBee(Tile aTile, int attack) &#123;</span><br><span class="line">        <span class="keyword">super</span>(aTile, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.attack = attack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> boolean takeAction() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getPosition().isHive()||<span class="keyword">this</span>.getPosition().isOnThePath())&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.getPosition().getHornet()!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.getPosition().isNest())&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.getPosition().getHornet().takeDamage(<span class="keyword">this</span>.attack);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Tile tmp = <span class="keyword">this</span>.getPosition().towardTheNest();</span><br><span class="line">                    <span class="keyword">if</span> (tmp.isNest())&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (tmp.isNest())&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tmp.getHornet()!=<span class="literal">null</span>)&#123;</span><br><span class="line">                                tmp.getHornet().takeDamage(<span class="keyword">this</span>.attack);</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                tmp = tmp.towardTheNest();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> boolean equals(Object o)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(o))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(o instanceof StingyBee))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StingyBee io = (StingyBee) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.attack == io.attack)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>断断续续写了三天才完成这篇文章，写的还是不是很满意，但是想记录的东西都记录下来了，有什么问题欢迎来微博找我交流。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;两天做了两个很有意思的项目，一个Nim游戏，一个塔防游戏，对类与继承，比较器，异常处理和文件IO操作&lt;br&gt;的训练效果还是挺不错的，收获很多，写一篇笔记来记录一下学习效果。源代码有需要的可以微博联系我，&lt;br&gt;虽然我代码写的很乱哈。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>jQuery写法规范和chrome无法自动播放视频问题解决</title>
    <link href="http://silencezheng.top/2020/10/07/article21/"/>
    <id>http://silencezheng.top/2020/10/07/article21/</id>
    <published>2020-10-07T07:05:16.000Z</published>
    <updated>2020-10-07T14:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>做了个纯html实现引导页加网课视频答题demo的小项目，总结一下技术要点，太久不写html基础语法都不记得了。</p><span id="more"></span><p>1 <strong>jq入口函数以及js入口函数</strong><br>没有用入口函数可能导致一些功能失效报错。</p><p>jQuery 入口函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 开始写 jQuery 代码...</span></span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 开始写 jQuery 代码...</span></span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。</p><p>如果在文档没有完全加载之前就运行函数，操作可能失败。</p><p>JavaScript 入口函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jQuery 入口函数与 JavaScript 入口函数的区别：</p><ul><li>jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li><li>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li></ul><p>2 <strong>jQuery选择器</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>) 选取 &lt;p&gt; 元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p.intro&quot;</span>) 选取所有 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;intro&quot;</span> 的 &lt;p&gt; 元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p#demo&quot;</span>) 选取所有 id=<span class="string">&quot;demo&quot;</span> 的 &lt;p&gt; 元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;[href]&quot;</span>) 选取所有带有 href 属性的元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;[href=&#x27;#&#x27;]&quot;</span>) 选取所有带有 href 值等于 <span class="string">&quot;#&quot;</span> 的元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;[href!=&#x27;#&#x27;]&quot;</span>) 选取所有带有 href 值不等于 <span class="string">&quot;#&quot;</span> 的元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;[href$=&#x27;.jpg&#x27;]&quot;</span>) 选取所有 href 值以 <span class="string">&quot;.jpg&quot;</span> 结尾的元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>); <span class="comment">//css选择器</span></span><br></pre></td></tr></table></figure><p>3 <strong>html页面中的路径问题</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相对路径写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ./ 表示当前文件所在目录，即404.html所在目录，即G:/testworkspace/ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ./可省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;logo.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;./logo.png&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ../ 表示当前文件所在目录的上级目录，即G:/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;../testworkspace/logo.png&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- /表示根路径，即G:/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;/testworkspace/logo.png&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绝对路径写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;G:/testworkspace/logo.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般能用相对不要用绝对</p><p>4 <strong>实现视频播到一半弹出答题界面</strong><br>主要用currentTime和duration属性，在当前进度达到视频总长的一半时，用js操作弹出界面，<br>我是采用jq隐藏加显示的方式。<br>HTML5音视频相关DOM链接在这：<a href="https://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp">https://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp</a></p><p>5 <strong>引导页加载自动播放和把video铺满全屏的方式</strong><br>这里我只说chrome可以使用的方法，因为objectfill貌似很多浏览器不兼容。<br>先说把视频铺满屏幕，下面是html文件中的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&#x27;prevideo&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bt&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;skip()&quot;</span>&gt;</span>开始学习<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">class</span> =<span class="string">&quot;video&quot;</span> <span class="attr">id</span> =<span class="string">&quot;video&quot;</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;src/insec.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">                   <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">                   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="selector-class">.prevideo</span>&#123;</span><br><span class="line">                   <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">                   <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">                   <span class="attribute">position</span>: absolute;    </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="selector-class">.video</span>&#123;</span><br><span class="line">                   <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">                   <span class="attribute">position</span>: absolute;</span><br><span class="line">                   <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">                   <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">                   <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">                   <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">                   <span class="attribute">object-fit</span>: fill;<span class="comment">/*这里是关键*/</span></span><br><span class="line">                   <span class="attribute">width</span>: auto;</span><br><span class="line">                   <span class="attribute">height</span>: auto;</span><br><span class="line">                   -ms-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">                   -webkit-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">                   <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">                   <span class="attribute">background-size</span>: cover;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="selector-id">#bt</span>&#123;</span><br><span class="line">                   <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">                   <span class="attribute">left</span>: <span class="number">45%</span>;</span><br><span class="line">                   <span class="attribute">right</span>: <span class="number">45%</span>;</span><br><span class="line">                   <span class="attribute">bottom</span>: <span class="number">50%</span>;</span><br><span class="line">                   <span class="attribute">text-align</span>: center;</span><br><span class="line">                   <span class="attribute">position</span>: absolute;</span><br><span class="line">                   <span class="attribute">z-index</span>: <span class="number">102</span>;</span><br><span class="line">                   <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">                   <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">                   <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><p>然后是自动播放，chrome从某个版本后禁止了交互前自动播放视频，如果非要自动播放需要在video标签<br>加静音属性，即上面html代码中：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video <span class="keyword">class</span> =&quot;<span class="symbol">video</span>&quot; <span class="symbol">id</span> =&quot;<span class="symbol">video</span>&quot; <span class="symbol">autoplay</span> <span class="symbol">muted</span>&gt;</span><br></pre></td></tr></table></figure><p>6 <strong>js页面跳转</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">window.location.href</span>=<span class="string">&#x27;hello.html&#x27;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>7 <strong>video标签的controls属性</strong><br>controls 属性是一个 boolean(布尔) 属性。</p><p>controls 属性规定浏览器应该为视频提供播放控件。</p><p>如果设置了该属性，则规定不存在作者设置的脚本控件。</p><p>浏览器控件应该包括：</p><ul><li>播放</li><li>暂停</li><li>定位</li><li>音量</li><li>全屏切换</li><li>字幕（如果可用）</li><li>音轨（如果可用）    </li></ul><p>用法如下:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;video controls&gt;</span><span class="section">&lt;/video&gt;</span></span><br></pre></td></tr></table></figure><p>8 <strong>解决html页面在浏览器中乱码</strong><br>在html标签下面添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span><span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>扩展资料：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">&quot;Content-Language&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;zh-CN&quot;</span> /&gt;</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">&quot;author&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">&quot;Copyright&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">&quot;description&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;meta <span class="attribute">content</span>=<span class="string">&quot;&quot;</span> <span class="attribute">name</span>=<span class="string">&quot;keywords&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>第一行说明了他的文字编码<br>第二行说明了他采用的语言<br>第三行说明了他的作者<br>第四行说明了他的版权<br>第五行是对网站的简单描述<br>第六行是说明了本网站的关键字</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;做了个纯html实现引导页加网课视频答题demo的小项目，总结一下技术要点，太久不写html基础语法都不记得了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="HTML" scheme="http://silencezheng.top/tags/HTML/"/>
    
    <category term="Javascript" scheme="http://silencezheng.top/tags/Javascript/"/>
    
    <category term="Chrome" scheme="http://silencezheng.top/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用操作汇总</title>
    <link href="http://silencezheng.top/2020/10/05/article20/"/>
    <id>http://silencezheng.top/2020/10/05/article20/</id>
    <published>2020-10-05T12:08:24.000Z</published>
    <updated>2020-10-05T12:37:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做了下Linux上的网络诊断，Ubantu和CentOS用了一下，<br>感觉还是Ubantu更好用些，下面写点简单命令行操作用来给自己记录一下。</p><span id="more"></span><p><strong>复制</strong><br>cp–该命令的功能是将给出的文件或目录拷贝到另一文件或目录中。</p><p>语法： cp [选项] 源文件或目录 目标文件或目录<br>说明：该命令把指定的源文件复制到目标文件或把多个源文件复制到目标目录中。</p><p>该命令的各选项含义如下：</p><ul><li>-a 该选项通常在拷贝目录时使用。它保留链接、文件属性，并递归地拷贝目录，其作用等于dpR选项的组合。</li><li>-d 拷贝时保留链接。</li><li>-f 删除已经存在的目标文件而不提示。</li><li>-i 和f选项相反，在覆盖目标文件之前将给出提示要求用户确认。回答y时目标文件将被覆盖，是交互式拷贝。</li><li>-p 此时cp除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中。</li><li>-r 若给出的源文件是一目录文件，此时cp将递归复制该目录下所有的子目录和文件。此时目标文件必须为一个目录名。</li><li>-l 不作拷贝，只是链接文件。</li></ul><p>为防止用户在不经意的情况下用cp命令破坏另一个文件，如用户指定的目标文件名已存在，用cp命令拷贝文件后，这个文件就会被新源文件覆盖，<br>因此，建议用户在使用cp命令拷贝文件时，最好使用i选项。</p><p><strong>新建文件</strong><br>touch–在当前工作目录底下新建一个文件</p><p>语法：touch 文件名.后缀</p><p><strong>删除</strong><br>rm–删除文件和文件夹</p><p>语法：rm [选项] 文件名或文件夹名</p><p>该命令的各选项含义如下：</p><ul><li>-f、–force    强力删除，不要求确认</li><li>-i        每删除一个文件或进入一个子目录都要求确认</li><li>-I        在删除超过三个文件或者递归删除前要求确认</li><li>-r、-R    递归删除子目录</li><li>-d、-dir    删除空目录</li><li>-v、-verbose    显示删除结果</li></ul><p>下面删除文件夹的例子加深理解：<br>1 删除文件夹的内容包括文件夹：<br>rm -rf 文件夹的名字       （-r 是 循环的意思， f是不询问的意思）</p><p>2 删除文件夹的内容不包括文件夹：<br>rm -rf  文件夹的名字/*      (后面加上/*表示删除内容不删除文件夹)</p><p><strong>ls输出的文件和目录颜色含义（默认）</strong><br><font color=#000000 size=5 face="黑体">白色</font>：表示普通文件<br><font color=#0000FF size=5 face="黑体">蓝色</font>：表示目录<br><font color=#228B22 size=5 face="黑体">绿色</font>：表示可读执行文件<br><font color=#FF4500 size=5 face="黑体">红色</font>：表示压缩文件<br><font color=#AFEEEE size=5 face="黑体">浅蓝色</font>：链接文件<br><font color=#DC143C size=5 face="黑体">红色闪烁</font>：表示链接的文件有问题<br><font color=#FFFF00 size=5 face="黑体">黄色</font>：表示设备文件<br><font color=grey size=5 face="黑体">灰色</font>：表示其他文件</p><p>这个颜色可以在配置文件中修改。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近做了下Linux上的网络诊断，Ubantu和CentOS用了一下，&lt;br&gt;感觉还是Ubantu更好用些，下面写点简单命令行操作用来给自己记录一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://silencezheng.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>HTML中input控件接受docx文件问题解决</title>
    <link href="http://silencezheng.top/2020/10/05/article19/"/>
    <id>http://silencezheng.top/2020/10/05/article19/</id>
    <published>2020-10-05T09:09:24.000Z</published>
    <updated>2020-10-07T06:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做web文件上传发现从前端控制文件格式的时候在input控件accept属性里找不到.docx，所以从网上查了下，解决了。</p><span id="more"></span><p>先给出部分accept可接受的信息表：</p><table><thead><tr><th>扩展名</th><th align="right">对应属性</th><th align="center">文件格式</th></tr></thead><tbody><tr><td>*.3gpp</td><td align="right">audio/3gpp, video/3gpp</td><td align="center">3GPP Audio/Video</td></tr><tr><td>*.ac3</td><td align="right">audio/ac3</td><td align="center">AC3 Audio</td></tr><tr><td>*.asf</td><td align="right">allpication/vnd.ms-asf</td><td align="center">Advanced Streaming Format</td></tr><tr><td>*.au</td><td align="right">audio/basic</td><td align="center">AU Audio</td></tr><tr><td>*.css</td><td align="right">text/css</td><td align="center">Cascading Style Sheets</td></tr><tr><td>*.csv</td><td align="right">text/csv</td><td align="center">Comma Separated Values</td></tr><tr><td>*.doc</td><td align="right">application/msword</td><td align="center">MS Word Document</td></tr><tr><td>*.dot</td><td align="right">application/msword</td><td align="center">MS Word Template</td></tr><tr><td>*.dtd</td><td align="right">application/xml-dtd</td><td align="center">Document Type Definition</td></tr><tr><td>*.dwg</td><td align="right">image/vnd.dwg</td><td align="center">AutoCAD Drawing Database</td></tr><tr><td>*.dxf</td><td align="right">image/vnd.dxf</td><td align="center">AutoCAD Drawing Interchange Format</td></tr><tr><td>*.gif</td><td align="right">image/gif</td><td align="center">Graphic Interchange Format</td></tr><tr><td>*.htm</td><td align="right">text/html</td><td align="center">HyperText Markup Language</td></tr><tr><td>*.html</td><td align="right">text/html</td><td align="center">HyperText Markup Language</td></tr><tr><td>*.jp2</td><td align="right">image/jp2</td><td align="center">JPEG-2000</td></tr><tr><td>*.jpe</td><td align="right">image/jpeg</td><td align="center">JPEG</td></tr><tr><td>*.jpeg</td><td align="right">image/jpeg</td><td align="center">JPEG</td></tr><tr><td>*.jpg</td><td align="right">image/jpeg</td><td align="center">JPEG</td></tr><tr><td>*.js</td><td align="right">text/javascript, application/javascript</td><td align="center">JavaScript</td></tr><tr><td>*.json</td><td align="right">application/json</td><td align="center">JavaScript Object Notation</td></tr><tr><td>*.mp3</td><td align="right">audio/mpeg</td><td align="center">MPEG Audio Stream, Layer III</td></tr><tr><td>*.mp4</td><td align="right">audio/mp4, video/mp4</td><td align="center">MPEG-4 Audio/Video</td></tr><tr><td>*.pdf</td><td align="right">application/pdf</td><td align="center">Portable Document Format</td></tr><tr><td>*.png</td><td align="right">image/png</td><td align="center">Portable Network Graphics</td></tr><tr><td>*.pot</td><td align="right">application/vnd.ms-powerpoint</td><td align="center">MS PowerPoint Template</td></tr><tr><td>*.pps</td><td align="right">application/vnd.ms-powerpoint</td><td align="center">MS PowerPoint Slideshow</td></tr><tr><td>*.ppt</td><td align="right">application/vnd.ms-powerpoint</td><td align="center">MS PowerPoint Presentation</td></tr><tr><td>*.svf</td><td align="right">image/vnd.svf</td><td align="center">Simple Vector Format</td></tr><tr><td>*.txt</td><td align="right">text/plain</td><td align="center">Plain Text</td></tr><tr><td>*.wdb</td><td align="right">application/vnd.ms-works</td><td align="center">MS Works Database</td></tr><tr><td>*.wps</td><td align="right">application/vnd.ms-works</td><td align="center">Works Text Document</td></tr><tr><td>*.xhtml</td><td align="right">application/xhtml+xml</td><td align="center">Extensible HyperText Markup Language</td></tr><tr><td>*.xlc</td><td align="right">application/vnd.ms-excel</td><td align="center">MS Excel Chart</td></tr><tr><td>*.xlm</td><td align="right">application/vnd.ms-excel</td><td align="center">MS Excel Macro</td></tr><tr><td>*.xls</td><td align="right">application/vnd.ms-excel</td><td align="center">MS Excel Spreadsheet</td></tr><tr><td>*.xlt</td><td align="right">application/vnd.ms-excel</td><td align="center">MS Excel Template</td></tr><tr><td>*.xlw</td><td align="right">application/vnd.ms-excel</td><td align="center">MS Excel Workspace</td></tr><tr><td>*.xml</td><td align="right">text/xml, application/xml</td><td align="center">Extensible Markup Language</td></tr><tr><td>*.zip</td><td align="right">aplication/zip</td><td align="center">Compressed Archive</td></tr></tbody></table><p>然后发现表中没有docx和xlsx等，继续查又发现了下图：<br><img src="/assets/post_img/article19/mme.png" alt="MIME"></p><p>尝试了该docx属性后发现无效。</p><p>最终通过：<br>    accept:”.docx”<br>发现在chrome中可用，不知道其他浏览器是不是也这样，可以直接用扩展名尝试。<br>不过这个accept属性只是一个伪限制，真要限制传入文件格式还得进行js方面的限制才行。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近做web文件上传发现从前端控制文件格式的时候在input控件accept属性里找不到.docx，所以从网上查了下，解决了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="HTML" scheme="http://silencezheng.top/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习日记-02</title>
    <link href="http://silencezheng.top/2020/10/05/article18/"/>
    <id>http://silencezheng.top/2020/10/05/article18/</id>
    <published>2020-10-05T08:31:01.000Z</published>
    <updated>2020-10-05T12:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>持续学习中，解决了项目创建多级包，Idea配置本地仓库等问题。<br>IDE：idea 2020.1.1<br>Maven：apache-maven-3.6.3</p><span id="more"></span><p><strong>如何在Idea项目中配置Maven本地仓库</strong></p><p>1 setting中搜索Maven找到Build Tools下的Maven，点击：</p><p><img src="/assets/post_img/article18/mvnlocal.png" alt="ML"><br>上图红色笔画出的三个位置修改成本地Maven的路径即可，repo（即本地仓库）解压Maven后是没有的，需要手动创建。</p><p>2 修改配置文件内容，配置文件位置在maven包下conf\settings.xml，添加本地仓库的路径。</p><p><img src="/assets/post_img/article18/mvnconf.png" alt="MC"></p><p>3 在配置文件中添加阿里云远程仓库（为提高下载速度，不需要可不修改）、</p><p>在settings.xml中mirrors下添加：</p><p><img src="/assets/post_img/article18/mvnali.png" alt="MA"></p><p>到这里基本配置就完成了，但是下次打开项目时仓库路径还会变回去，此时需要修改Idea中File下的默认设置：<br>（注意原本的other settings新版本中已经没有了，从for new中修改）</p><p><img src="/assets/post_img/article18/set.png" alt="Set"></p><p><strong>Idea项目创建多级包</strong><br>勾选取消下面图中的设置即可。<br><img src="/assets/post_img/article18/duo.png" alt="DUO"></p><p><strong>如何在一个Maven项目中创建多个子项目</strong></p><ol><li>新建一个Maven项目，不要使用骨架。</li><li>删除src文件</li><li>new module创建Maven子项目<br>效果如下：<br><img src="/assets/post_img/article18/fs.png" alt="FATHERANDSON"></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;持续学习中，解决了项目创建多级包，Idea配置本地仓库等问题。&lt;br&gt;IDE：idea 2020.1.1&lt;br&gt;Maven：apache-maven-3.6.3&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Maven" scheme="http://silencezheng.top/tags/Maven/"/>
    
    <category term="Idea" scheme="http://silencezheng.top/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>idea编写swing项目的一些心得</title>
    <link href="http://silencezheng.top/2020/09/18/article17/"/>
    <id>http://silencezheng.top/2020/09/18/article17/</id>
    <published>2020-09-18T11:04:57.000Z</published>
    <updated>2020-09-21T09:23:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天用swing写了一个小项目，发现idea编写swing项目比起eclipse来说也是方便了不少，<br>以前只觉得javafx牛逼，现在发现swing也还不错，有了idea内置的可视化编辑加持，对于<br>写个小图形界面十分好用。下面做简单分享。</p><span id="more"></span><p>快速创建swing项目：</p><ol><li>new-&gt;Swing-&gt;GUI Form,打开form文件，会得到设计界面，左边为属性栏，<br>中间是界面呈现，右边是组件栏。</li><li>fieldname为组件在代码中的id，text为显示内容，align属性设置布局方式。</li><li>设计完成后在类中alt+insert选择FormMain可以生成main函数，但是建议另创建一个函数<br>存储该代码，在需要时调用。并且在idea中创建的swing项目会跟有一个.form文件，我个人理解<br>是用来存储界面样式，这样的项目在eclipse中是不能运行的，我尝试过添加form.rt的jar包进eclipse中<br>也并不能解决问题，所以idea编辑的swing项目还是不要到其他ide中运行比较好。</li></ol><p>为组件添加事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">close.addMouseListener(<span class="keyword">new</span> <span class="function"><span class="title">MouseAdapter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">mouseClicked</span>(<span class="params">MouseEvent e</span>)</span> &#123;</span><br><span class="line">              jna.close();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p>控制swing窗口大小和弹出位置：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">frame</span>.setSize(<span class="number">600</span>,<span class="number">500</span>);</span><br><span class="line"><span class="attribute">frame</span>.setPreferredSize(new Dimension(<span class="number">600</span>,<span class="number">500</span>));</span><br></pre></td></tr></table></figure><p>窗口跳转方式：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">if</span> (isSuper==true)&#123;</span><br><span class="line"><span class="comment">//跳转</span></span><br><span class="line"><span class="selector-tag">frame</span><span class="selector-class">.dispose</span>();</span><br><span class="line"><span class="selector-tag">new</span> <span class="selector-tag">superview</span>()<span class="selector-class">.back</span>();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JList更新数据（用ArrayList list来维护数据）：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">back.get<span class="constructor">ShowList()</span>.set<span class="constructor">ListData(<span class="params">list</span>)</span>;</span><br></pre></td></tr></table></figure><p>要使list可滚动可以将其放入滚动面板中。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>关于javafx还是swing的问题<br>javafx比较新，Oracle2008年才推出的，功能比较强大，并且持续更新。swing是比较老的GUI框架，已经停止更新了。<br>但javafx的问题可能在于参考文档较少，使用的人也不多。虽然运行速度稍快，但swing下功夫也可以做出好看的界面，<br>如JB。所以我认为时下来说，swing并不算过时。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天用swing写了一个小项目，发现idea编写swing项目比起eclipse来说也是方便了不少，&lt;br&gt;以前只觉得javafx牛逼，现在发现swing也还不错，有了idea内置的可视化编辑加持，对于&lt;br&gt;写个小图形界面十分好用。下面做简单分享。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Idea" scheme="http://silencezheng.top/tags/Idea/"/>
    
    <category term="Swing" scheme="http://silencezheng.top/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>idea2020.2新变动</title>
    <link href="http://silencezheng.top/2020/09/11/article16/"/>
    <id>http://silencezheng.top/2020/09/11/article16/</id>
    <published>2020-09-11T02:49:57.000Z</published>
    <updated>2020-09-11T03:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>好家伙今天一早起来打开idea，差点以为我退回社区版了，查了一上午才知道在idea最新的2020.2版本已经移除了原本创建web项目的方法，<br>也更改了Spring的创建流程！这波操作属实有点。。。看不懂。<br>信息来源：<a href="https://blog.csdn.net/qq_45738810/article/details/107842532">https://blog.csdn.net/qq_45738810/article/details/107842532</a></p><span id="more"></span><p>更新简介：<br><img src="/assets/post_img/article16/idea2020.2%E6%9B%B4%E6%96%B0.png" alt="2020.2updates"></p><p>现在创建Web项目要先创建一个普通的JAVA项目，然后右键项目名Add Framework Support，就能看到原来的<br>Web Application4.0了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好家伙今天一早起来打开idea，差点以为我退回社区版了，查了一上午才知道在idea最新的2020.2版本已经移除了原本创建web项目的方法，&lt;br&gt;也更改了Spring的创建流程！这波操作属实有点。。。看不懂。&lt;br&gt;信息来源：&lt;a href=&quot;https://blog.csdn.net/qq_45738810/article/details/107842532&quot;&gt;https://blog.csdn.net/qq_45738810/article/details/107842532&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Idea" scheme="http://silencezheng.top/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>为什么要学框架？</title>
    <link href="http://silencezheng.top/2020/09/10/article15/"/>
    <id>http://silencezheng.top/2020/09/10/article15/</id>
    <published>2020-09-10T11:49:57.000Z</published>
    <updated>2022-02-13T06:43:45.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>看完了struts2，看的一知半解，再看spring，虽然博文写的很不错，但也只是模糊的概念，<br>于是产生了一个疑问，为什么要学习框架？为什么Java有如此众多的框架？找到了令我满意<br>的答案，下面全文拷贝于网络，可谓是学习框架前的真正第一课。<br>原答案链接：<a href="https://www.zhihu.com/question/25654738/answer/31302541">https://www.zhihu.com/question/25654738/answer/31302541</a></p><span id="more"></span><p>归纳题主的问题：这个世界上有各种各样的框架，设计这些五花八门框架的初衷到底是什么？我们该不该学习框架，该如何学习使用这些框架？回答题主的问题：一、首先，到底什么是框架？想要回答这个问题，我们要慢慢来。①首先从DRY原则开始说起Don’t Repeat Yourself，不要重复你的代码。DRY原则的重要性怎么提都不过分，很多人说编程是种机械性的工作，而有很多程序员也自嘲为码农，意为编程成了一种没有技术含量的体力性工作。如果不想沦为这个境界，首先需要的就是将DRY原则融入你的血液，在今后的编码工作中加以运用。<br>1）最初级的DRY：语法级别</p><pre><code>System.out.println(1);System.out.println(2);……System.out.println(10);</code></pre><p>我想只要学过基础语法，都会采用下面的形式。</p><pre><code>for (int i = 1; i &lt;= 10; i++) &#123;    System.out.println(i);&#125;</code></pre><p>如果发现有任何人采用上面一种形式的编码形式，那么不用怀疑，他对于编程绝对还没有入门。我们当然会选择省力的做法，这种做法不但省力，还会有利于我们后续修改或扩展这组代码，如：</p><pre><code>for (int i = 1; i &lt;= 10; i++) &#123;    System.out.println(i * 2 + 1);&#125;</code></pre><p>我们进行这样的修改，只需要修改一处，而上面的形式却需要修改10处，当然会更麻烦且更容易出错，所以请记住能不重复就不重复。2）进阶的DRY原则：方法级别当我们经常写一些重复性代码时，我们就要注意看能否将其抽取出来成为一个方法，如：</p><pre><code>try &#123;    Thread.sleep(1000);&#125; catch (InterruptedException e) &#123;    e.printStackTrace();&#125;</code></pre><p>让我们将其抽取到一个方法 threadSleep() 中，这样我们只需要调用 threadSleep() 就可以实现原来的功能，不但所需敲击的代码更少，而且代码看起来更加清楚明白。而为了增加这个方法的复用性，我们还可以将其中固定的数字抽取成为参数，如：</p><pre><code>private static void threadSleep(int millis) &#123;    try &#123;        Thread.sleep(millis);    &#125; catch (InterruptedException e) &#123;        e.printStackTrace();    &#125;&#125;</code></pre><p>这样我们就可以利用这个方法实现不同时间的sleep了。要注意提高代码的复用性也是实践DRY原则的一个重要方法，在后面我们也可以看到框架为了提高所谓的灵活性进行的一些设计，如在适当的位置增加扩展点。3）继续进阶的DRY原则：类型级别现在我们看一个类</p><pre><code>public class Person &#123;    private String name;    private int age;    // Setter &amp; Getter ...&#125;</code></pre><p>我们新建一些Person类实例，并进行一些操作：</p><pre><code>Person person = new Person();person.setName(&quot;jack&quot;);person.setAge(18);Person person2 = new Person();person2.setName(&quot;rose&quot;);person2.setAge(17);.....System.out.printf(&quot;Name: %s, Age:%d\n&quot;, person.getName(), person.getAge());System.out.printf(&quot;Name: %s, Age:%d\n&quot;, person2.getName(), person2.getAge());.....</code></pre><p>观察这些代码，其实有很大的DRY改造空间，首先可以添加一个构造方法</p><pre><code>public Person(String name, int age) &#123;    this.name = name;    this.age = age;&#125;</code></pre><p>其次，可以添加一个toString()方法</p><pre><code>public String toString() &#123;    return String.format(&quot;Name: %s, Age: %d&quot;, name, age);&#125;</code></pre><p>这样的话，上面的代码就可以改成下面的形式。</p><pre><code>Person person = new Person(&quot;jack&quot;, 18);Person person2 = new Person(&quot;rose&quot;, 17);......System.out.println(person.toString());System.out.println(person2.toString());......</code></pre><p>4）继续继续进阶的DRY原则：多个类组合级别上面的代码我们其实还是有改善空间，就是利用容器类</p><pre><code>List&lt;Person&gt; list = new ArrayList&lt;&gt;();list.add(new Person(&quot;jack&quot;, 18));list.add(new Person(&quot;rose&quot;, 17));......list.forEach(p -&gt; System.out.println(p));</code></pre><p>这里利用JDK8的Stream API以及Lambda表达式输出，其实可以进一步简化为 </p><pre><code>list.forEach(System.out::println);</code></pre><p>这里我们可以看到，基本上我们写代码只写有变化的代码，而尽量不写机械性重复性的代码，其实后面我们就会知道，这就叫专注于业务逻辑，所谓业务逻辑就是你这个项目中，与别的项目都不一样的地方，必须由你亲自去编写实现的部分。其实容器类很大程度上也是为了帮助我们编写代码而被设计出来的，首先让我们不必为每一个对象起名字（省去了person,person2,…等变量）<br>，然后又为批量操作提供了可能性。像是这样一系列有用的类组合起来可以称之为类库。常用的类库有Commons-Lang包等，为我们提供了一大批实用方法，我之所以提到类库，也是因为框架其实也是一种特殊的类库，但是却与一般的类库有着本质的不同。②设计模式，更高层级的DRY应用上面我讲到了DRY原则的几个层次，一般情况下大家也早就这样使用了，属于入门之后很容易自己<br>就想到得一些层次。但是设计模式不一样，设计模式是经过长时间编码之后，经过系统性的总结所提出的针对某一类问题的最佳解决方案，又称之为最佳实践。而在小规模的编码工作中，其实并不需要什么设计模式，只有大型程序才有设计模式发挥的空间，所以我们需要借助一些特定领域有足够规模的问题来了解一下设计模式存在的必要性。<br>1）连接数据库，进行一些操作，并安全释放数据库连接。</p><pre><code>public static boolean updatePassword(String username, String password, String newpassword) &#123;    Connection conn = null;    PreparedStatement stmt = null;    ResultSet rs = null;    boolean success = false;    try &#123;        conn = beginTransaction();        stmt = conn.prepareStatement(&quot;select id, password from user where username = ?&quot;);        stmt.setString(1, username);        rs = stmt.executeQuery();        if (rs.next()) &#123;            if (rs.getString(&quot;password&quot;).equals(password)) &#123;                PreparedStatement stmt2 = null;                try &#123;                    stmt2 = conn.prepareStatement(&quot;update user set password = ? where id = ?&quot;);                    stmt2.setString(1, newpassword);                    stmt2.setLong(2, rs.getLong(&quot;id&quot;));                    success = stmt2.executeUpdate() &gt; 0;                &#125; finally &#123;                    safeClose(stmt2);                &#125;            &#125;        &#125;        commitTransaction(conn);        return success;    &#125; catch (SQLException e) &#123;        rollbackTransaction(conn);        throw new RuntimeException(e);    &#125; finally &#123;        safeClose(rs);        safeClose(stmt);        safeClose(conn);    &#125;&#125;</code></pre><p>上面是一个简单的数据库事务，虽然只有一个查询和一个更新，但是想要将其继续简化却并不容易，虽然其中有关于业务逻辑的部分只是少量几行代码，但是初始化，异常，提交，回滚操作让我们很难抽取出一个合适的方法来。虽然我们已经抽取出了 begin,commit,rollback,safeClose等方法，但是仍嫌繁琐。我们发现之所以我们难以抽取方法，主要是因为流程，因为里面牵扯到流程控制，<br>而流程控制一般是由我们程序员来控制的，所以也就必然需要我们手动编码来完成。难道真的就不能继续简化了吗？这就是需要设计模式的时候了。<br>2）应用设计模式「模板方法模式」</p><pre><code>public static boolean updatePassword(String username, String password, String newpassword) &#123;    return connection(conn -&gt; statement(conn, &quot;select id, password from user where username = ?&quot;, stmt -&gt; &#123;        stmt.setString(1, username);        return resultSet(stmt, rs -&gt; &#123;            if (rs.next()) &#123;                if (rs.getString(&quot;password&quot;).equals(password)) &#123;                    long id = rs.getLong(&quot;id&quot;);                    return statement(conn, &quot;update user set password = ? where id = ?&quot;, stmt2 -&gt; &#123;                        stmt2.setString(1, newpassword);                        stmt2.setLong(2, id);                        return stmt2.executeUpdate() == 1;                    &#125;);                &#125;            &#125;            return false;        &#125;);    &#125;));&#125;</code></pre><p>可以看到，所有的conn,stmt,rs的开启和关闭，事务的提交和回滚都不用自己手动编写代码进行操作了，之所以可以达到这个效果，就是因为使用了模板方法设计模式，核心就是通过回调方法传递想对资源进行的操作，然后将控制权交给另一个方法，让这个方法掌握流程控制，然后适当的时候回调我们的代码（也就是我们自己写的业务逻辑相关的代码）。<br>这是需要额外写的几个方法</p><pre><code>public interface ConnectionCallback&lt;T&gt; &#123;    T doConnection(Connection conn) throws SQLException;&#125;public interface StatementCallback&lt;T&gt; &#123;    T doStatement(PreparedStatement stmt) throws SQLException;&#125;public interface ResultSetCallback&lt;T&gt; &#123;    T doResultSet(ResultSet rs) throws SQLException;&#125;public static &lt;T&gt; T connection(ConnectionCallback&lt;T&gt; callback) &#123;    Connection conn = null;    T result = null;    try &#123;        conn = beginTransaction();        result = callback.doConnection(conn);        commitTransaction(conn);    &#125; catch (SQLException e) &#123;        rollbackTransaction(conn);        throw new RuntimeException(e);    &#125; finally &#123;        safeClose(conn);    &#125;    return result;&#125;public static &lt;T&gt; T statement(Connection conn, String sql, StatementCallback&lt;T&gt; callback) throws SQLException &#123;    PreparedStatement stmt = null;    T result = null;    try &#123;        stmt = conn.prepareStatement(sql);        result = callback.doStatement(stmt);    &#125; finally &#123;        safeClose(stmt);    &#125;    return result;&#125;public static &lt;T&gt; T resultSet(PreparedStatement stmt, ResultSetCallback&lt;T&gt; callback) throws SQLException &#123;    ResultSet rs = null;    T result = null;    try &#123;        rs = stmt.executeQuery();        result = callback.doResultSet(rs);    &#125; finally &#123;        safeClose(rs);    &#125;    return result;&#125;</code></pre><p>你们可能会疑惑，这些代码加上我们写的业务逻辑的代码，比原来的代码还要长，有什么必要使用这个设计模式。这正是我前面已经指出的一个问题，那就是要你的程序规模足够大才有必要应用设计模式，试想如果你有上百个乃至上千个数据库操作方法需要写，<br>那么是不是写这几个额外的方法，就不算什么了呢。其实这正是DRY原则在更高层次上的应用，即结合设计模式来达到更高层次的代码复用效果，进而应用DRY原则。而想要在这个层次继续向上攀升，那就必须是结合众多设计模式以及一些高层架构设计，能够帮助我们实现这一目的的就是框架。<br>3）框架，是设计模式的集大成者，是DRY原则的最高应用先让我们来看一下，使用框架会是什么样的一种体验？这里以Hibernate + Spring声明式事务为例</p><pre><code>@Transactionalpublic boolean updatePassword(String username, String password, String newpassword) &#123;    User user = (User) session().createQuery(&quot;from User where username = :username&quot;)            .setString(&quot;username&quot;, username)            .uniqueResult();    if (user != null &amp;&amp; user.getPassword().equals(password)) &#123;        user.setPassword(newpassword);        return true;    &#125;    return false;&#125;</code></pre><p>可以发现令人惊讶的简洁，而且代码逻辑异常清晰，完全不需要考虑conn,stmt,rs等资源的释放，以及事务的提交和回滚，但是这些事情其实框架已经默默的帮我们做到了。这才叫真正的专注于业务逻辑，尽最大可能的只写与业务逻辑有关的代码。当然这些框架的效果虽然神奇，其实只要细细<br>探究其内部原理，是完全可以理解并掌握的。二、那么问题就来了，框架到底是什么？要不要学，怎么学？上面我说过了，框架其实就是一个或一组特殊的类库，特殊在什么地方？特殊在控制权转移！框架与一般类库不同的地方是，我们调用类库，而框架调用我们。也就是说框架掌握整个程序<br>的控制权，我们必须一定程度上把程序流程的控制权交给框架，这样框架才能更好的帮助我们。下面以JavaWeb开发为例再进行一些说明，并顺便简单介绍一下JavaWeb的一些脉络。①静态网页时代本来网站都是一个个静态HTML组成的，或许这些网页还是用Dreamweaver写的，但是这样的静态页面<br>显然不能满足我们，很快我们就迎来了动态网页的时代。<br>②Servlet时代如果熟悉HTTP协议的话，我们就知道其实访问网页的过程不过是一次TCP连接罢了。浏览器发起TCP连接到服务器，服务器接受请求，然后返回HTML代码作为响应。那么我们完全可以等到接受到请求之后，再动态生成HTML代码返回给客户端。Servlet就是这么做的，其主要代码不过是<br>利用out.write()一点一点的输出HTML代码罢了。当然我们可以在其中掺杂一点动态的东西，如返回当前的时间。</p><pre><code>out.write(&quot;&lt;!DOCTYPE html&gt;\r\n&quot;);out.write(&quot;&lt;html&gt;\r\n&quot;);out.write(&quot;&lt;head&gt;\r\n&quot;);out.write(&quot;&lt;title&gt;Index Page&lt;/title&gt;\r\n&quot;);out.write(&quot;&lt;/head&gt;\r\n&quot;);out.write(&quot;&lt;body&gt;\r\n&quot;);out.write(&quot;Hello, &quot; + new Date() + &quot;\r\n&quot;);out.write(&quot;&lt;/body&gt;\r\n&quot;);out.write(&quot;&lt;/html&gt;\r\n&quot;);</code></pre><p>③ JSP包打天下的时代纯粹的Servlet很是丑陋，给前端程序员理解和修改这样的代码带来了很多困难。因此JSP技术被发明了出来，原理也不复杂，就是不直接写Servlet，而是先写好JSP文件，再由服务器将JSP文件编译成Servlet。而JSP中是以常见的HTML标签为主，这样前端程序员就能方便的修改这些代码了。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Index Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello, &lt;%=new Date()%&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>PS：由只使用 Servlet到使用JSP，虽然是一个简单的变化，但这迎合了前后端专业分工的大趋势，让前段人员只需要懂得HTML/CSS/JavaScrip代码就可以开始工作，而不需要学习Servlet那枯燥无味的用法，因此借着JSP技术的东风，JavaWeb技术迅速的扩展开来了。④ Servlet + JSP 时代随着JSP技术的发展，<br>用它写成的网站也越来越大，业务逻辑也越来越复杂。开发人员渐渐发现整个网站渐渐的再次变成了一团乱麻，不仅仅是JSP中夹杂了大量的Java代码，页面之间的耦合关系也越来越紧密。即便是要修改一个简单的按钮文本，或者是引入一段静态的内容，也需要打开越来越庞大的JSP页面，艰难到找到需要修改<br>的部分，有时还不仅仅是一处，这种修改是有很大的风险的，完全有可能引入新的错误。这时候开发者渐渐意识到，仅仅使用JSP是不行的，JSP承担了太多的责任。这时人们又想起了Servlet，Servlet中主要使用Java代码，处理业务逻辑非常轻松。如果JSP只使用HTML代码，而将业务逻辑的代码转移到Servlet中，<br>就可以大大的减轻JSP的负担，并且让前后端分工更加明确。<br>⑤MVC模式时代在Servlet + JSP模式的基础上，Java阵营进一步发展出了一种适合JavaWeb应用的设计模式，MVC设计模式，即将程序分为显示层(Viewer），控制层(Controller)，模型层(Model)。<br>一次典型的访问是这样的流程：</p><ol><li>用户输入网址或点击链接或提交表单，浏览器发起请求</li><li>–&gt; 通过互联网，通过HTTP协议 –&gt;</li><li>Tomcat接受到HTTP请求，生成HttpServletRequest对象，根据Web.xml的配置，调用开发者编写的HttpServlet，HttpServlet根据请求内容，调用JavaBean获取数据，JavaBean从数据库获取数据，返回HttpServlet，HttpServlet将数据转发给JSP，JSP负责将数据渲染为HTML，由Tomcat负责将HTML转化为HTTP响应，返回客户端。</li><li>–&gt; 通过互联网，通过HTTP协议 –&gt;</li><li>客户端浏览器接收到HTTP响应，浏览器将HTML渲染为页面，并运行其中可能存在的JavaScript进一步调整界面。<br>整个流程必须由开发者精确设计才能运作流畅，其中客户端HTML和JavaScript属于前端设计，服务器运行的其他内容属于后端设计。虽然符合J2EE规范的Tomcat等应用服务器已经帮我们实现了最复杂的一块，即HTTP协议部分，还给我们提供了JSP这个模板引擎，以及自定义<br>标签等手段。但是在控制层，在模型层，J2EE能给我们的帮助少之甚少。</li></ol><p>就拿用户提交一个表单为例，而我们在Servlet中获取参数为例，虽然不用我们解析HTTP报文，应该已经是要谢天谢地了，但是我们要做的事情仍然很多，分析一下：</p><ol><li><p>客户端传过来的数据全是文本，而我们需要的是Java对象。</p></li><li><p>凡是文本就有编码问题，而这需要前后端配合解决。</p></li><li><p>客户端的输入是不可信的，我们必须校验参数的合法性。</p></li><li><p>我们还必须将校验结果反馈给客户，并且最好不要让客户全部重新输入。</p></li><li><p>我们往往不是只有一个参数需要，而是有几个甚至更多参数，要妥善的处理各种情况组合。<br>这些事情几乎全部都需要我们手动编码来完成，几乎每一个 Servlet 都充斥着这样的代码，设置编码，获取参数，校验参数，校验通不过返回错误信息，校验通过则进行业务处理。而更重要的是，获取参数仅仅是整个流程中的一小步，我们的Servlet中存在着大量的重复性，机械性代码，而处理业务逻辑的代码可能只有一两行。</p></li></ol><p>⑥JavaWeb框架既然存在着大量的重复，我们当然不能忍，必须请出DRY大法。显然JavaWeb应用是一个规模庞大，流程复杂的应用，我们正需要JavaWeb框架的帮助。以Struts2框架为例，他能给我们什么帮助呢？</p><ol><li>在控制层，由Struts2的核心控制器接管控制权，将本来在Web.xml进行配置的一些工作，转移到自定义的struts.xml文件中，这个文件的配置形式更友好。</li><li>Struts2封装了Serlvet Api，使用POJO对象作为控制器（Action），大量使用反射，不要求继承特定类，有利于复用及单元测试。提供ActionSupport类，结合struts2标签，能很方面实现的校验信息的收集及反馈。</li><li>提供国际化支持，在显示层有国际化相关的标签，在控制层由国际化相关的API。提供基于配置的校验及JS生成技术。智能化的参数类型转换，支持自定义转换器。提供Action拦截器，方便实现AOP模式。</li><li>提供了基于OGNL表达式的数据共享模式，前后端数据交流更简单，提供了Struts2标签库，简单好用，支持多种模板，如FreeMarker，支持各种插件，如JSON，支持整合多种框架，如Spring。总之一句话，能在各方各面给我们强大的帮助。</li></ol><p>⑦所以当然要学框架，要用框架，那么要怎么学？</p><ol><li>用框架要知其然，还要知其所以然，要大体明白框架实现一个功能特性的原理，不能只是会用，只是觉得很神奇就可以了。就拿前面的Hibernate + Spring声明式事务为例，要弄明白框架这部分是怎么实现的。</li><li>首先要夯实你的语言基础，如JavaSE基础，语法掌握，用法掌握，有些同学语法还不熟练就开始学框架，等于地基没打就起高楼，你可能会快一步，但是迟早要遇到瓶颈，甚至摔跟头。</li><li>那么何时开始学习框架？我不建议新手一开始就直接使用框架。就好像一开始学习编程语言，大家都不推荐直接使用IDE，一定要用命令行自己编译运行几个文件之后，了解清楚了之后才可以使用IDE，要不然对于底层原理不了解，遇到问题没法自己手动排查。</li><li>使用框架也是一样，如果不是自己写多了重复性的代码，就很难理解框架为什么要这么设计。如果不尝试几种不同的实现，就很难理解框架为了灵活性而做出的设计和扩展点。如果不写几十个权限检查语句，就很难理解AOP到底有什么好处。</li><li>框架这么好，我该全部使用框架吗？首先只有在规模以上的程序中，才有应用框架的必要，一个简单的程序没必要使用框架，当然如果你很熟练，使用也无所谓。</li><li>要学习一下框架的核心源代码，要为扩展框架做好准备，因为虽然框架基本上还算灵活，但是面对错综复杂的业务需求，永远不可能面面俱到，而你不了解框架的话，可能会给你实现业务需求造成麻烦。这也是有些人坚持使用Servlet+JSP原生开发，而不是用框架的理由。</li><li>只要程序大了，归根究底还是要使用框架的，不是用别人写好的，就是自己写一套。这里我不建议自己写，不要重复造轮子，总有专业造轮子的。你草草写就的往往不如别人已经千锤百炼的代码。除非你是为了学习与研究的目的，自己写，那就是一件很好的事情。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;看完了struts2，看的一知半解，再看spring，虽然博文写的很不错，但也只是模糊的概念，&lt;br&gt;于是产生了一个疑问，为什么要学习框架？为什么Java有如此众多的框架？找到了令我满意&lt;br&gt;的答案，下面全文拷贝于网络，可谓是学习框架前的真正第一课。&lt;br&gt;原答案链接：&lt;a href=&quot;https://www.zhihu.com/question/25654738/answer/31302541&quot;&gt;https://www.zhihu.com/question/25654738/answer/31302541&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Spring" scheme="http://silencezheng.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java那些看不懂的术语（菜鸟必备）</title>
    <link href="http://silencezheng.top/2020/09/09/article14/"/>
    <id>http://silencezheng.top/2020/09/09/article14/</id>
    <published>2020-09-09T14:49:57.000Z</published>
    <updated>2022-02-06T03:47:26.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这几天开始学习web框架了，发现很多术语和缩写自己竟然完全不知道，<br>想到很多刚入门的人学起来应该也是这种感觉，就写一篇记录一下，<br>方便大家使用。</p><span id="more"></span><p><strong>Javabean</strong><br>JavaBean是一个遵循特定写法的Java类，它通常具有如下特点：</p><ul><li>这个Java类必须具有一个无参的构造函数</li><li>属性必须私有化。</li><li>私有化的属性必须通过public类型的方法暴露给其它程序，并且方法的命名也必须遵守一定的命名规范。</li></ul><p>JavaBean的属性可以是任意类型，并且一个JavaBean可以有多个属性。每个属性通常都需要具有相应的setter、 getter方法，setter方法称为属性修改器，getter方法称为属性访问器。<br>属性修改器必须以小写的set前缀开始，后跟属性名，且属性名的第一个字母要改为大写，例如，name属性的修改器名称为setName，password属性的修改器名称为setPassword。<br>属性访问器通常以小写的get前缀开始，后跟属性名，且属性名的第一个字母也要改为大写，例如，name属性的访问器名称为getName，password属性的访问器名称为getPassword。<br>一个JavaBean的某个属性也可以只有set方法或get方法，这样的属性通常也称之为只写、只读属性。</p><p><strong>POJO</strong><br>POJO = “Plain Ordinary Java Object”，是MartinFowler等发明的一个术语，用来表示普通的Java对象，不是JavaBean, EntityBean 或者 SessionBean。POJO不担当任何特殊的角色，<br>也不实现任何特殊的Java框架的接口如，EJB，JDBC等等。<br>即POJO是一个简单的普通的Java对象，它不包含业务逻辑或持久逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。<br>下面是摘自Martin Fowler个人网站的一句话：<br>“We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name.<br>So we gave them one, and it’s caught on very nicely.”－－Martin Fowler</p><p>我们疑惑为什么人们不喜欢在他们的系统中使用普通的对象，我们得到的结论是——普通的对象缺少一个响亮的名字，因此我们给它们起了一个，并且取得了很好的效果。——Martin Fowler</p><p><strong>EJB</strong><br>EJB是的Enterprise Java Beans技术的简称, 又被称为企业Java Beans。<br>EJB (Enterprise Java Beans) 是基于分布式事务处理的企业级应用程序的组件。Sun公司发布的文档中对EJB的定义是：EJB是用于开发和部署多层结构的、分布式的、面向对象的Java应用系统的跨平台的构件体系结构。<br>EJB实现原理： 就是把原来放到客户端实现的代码放到服务器端，并依靠RMI进行通信。<br>把EJB 这个概念变成大白话 ：<br>变成大白话就是，”把你编写的软件中那些需要执行制定的任务的类，不放到客户端软<br>件上了，而是给他打成包放到一个服务器上了”。<br>EJB 和JSP 有什么关系？EJB 和JSP 有关系，但是关系还真不怎么大，至多是在JSP 的<br>服务器端调用远端服务上的EJB 类，仅此而已。</p><p><strong>MVC模式</strong><br>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。是一种设计模式。</p><ul><li><p>Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p></li><li><p>View（视图） - 视图代表模型包含的数据的可视化。</p></li><li><p>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p></li></ul><p><strong>DAO</strong><br>DAO 模式</p><p>DAO (DataAccessobjects 数据存取对象)是指位于业务逻辑和持久化数据之间实现对持久化数据的访问。通俗来讲，就是将数据库操作都封装起来。</p><p>对外提供相应的接口</p><p>在面向对象设计过程中，有一些”套路”用于解决特定问题称为模式。<br>DAO 模式提供了访问关系型数据库系统所需操作的接口，将数据访问和业务逻辑分离对上层提供面向对象的数据访问接口。</p><p>从以上 DAO 模式使用可以看出，DAO 模式的优势就在于它实现了两次隔离。</p><ol><li><p>隔离了数据访问代码和业务逻辑代码。业务逻辑代码直接调用DAO方法即可，完全感觉不到数据库表的存在。分工明确，数据访问层代码变化不影响业务逻辑代码,这符合单一职能原则，降低了藕合性，提高了可复用性。</p></li><li><p>隔离了不同数据库实现。采用面向接口编程，如果底层数据库变化，如由 MySQL 变成 Oracle 只要增加 DAO 接口的新实现类即可，原有 MySQ 实现不用修改。这符合 “开-闭” 原则。该原则降低了代码的藕合性，提高了代码扩展性和系统的可移植性。<br>一个典型的DAO 模式主要由以下几部分组成。</p></li><li><p>DAO接口： 把对数据库的所有操作定义成抽象方法，可以提供多种实现。</p></li><li><p>DAO 实现类： 针对不同数据库给出DAO接口定义方法的具体实现。</p></li><li><p>实体类：用于存放与传输对象数据。</p></li><li><p>数据库连接和关闭工具类： 避免了数据库连接和关闭代码的重复使用，方便修改。</p></li></ol><p>下面放一个例子：<br>DAO 接口:</p><pre><code>public interface PetDao &#123;    /**     * 查询所有宠物     */    List&lt;Pet&gt; findAllPets() throws Exception;&#125;</code></pre><p>DAO 实现类:</p><pre><code>public class PetDaoImpl extends BaseDao implements PetDao &#123;    /**     * 查询所有宠物     */    public List&lt;Pet&gt; findAllPets() throws Exception &#123;        Connection conn=BaseDao.getConnection();        String sql=&quot;select * from pet&quot;;        PreparedStatement stmt= conn.prepareStatement(sql);        ResultSet rs=    stmt.executeQuery();        List&lt;Pet&gt; petList=new ArrayList&lt;Pet&gt;();        while(rs.next()) &#123;            Pet pet=new Pet(                    rs.getInt(&quot;id&quot;),                    rs.getInt(&quot;owner_id&quot;),                    rs.getInt(&quot;store_id&quot;),                    rs.getString(&quot;name&quot;),                    rs.getString(&quot;type_name&quot;),                    rs.getInt(&quot;health&quot;),                    rs.getInt(&quot;love&quot;),                    rs.getDate(&quot;birthday&quot;)                    );                petList.add(pet);        &#125;        BaseDao.closeAll(conn, stmt, rs);        return petList;    &#125;&#125;</code></pre><p>宠物实体类(里面get/set方法就不列出了)：</p><pre><code>public class Pet &#123;    private Integer id;        private Integer ownerId;    //主人ID    private Integer storeId;    //商店ID    private String name;    //姓名    private String typeName;    //类型    private int health;    //健康值    private int love;    //爱心值    private Date birthday;    //生日&#125;</code></pre><p>连接数据库：</p><pre><code>public class BaseDao &#123;    private static String driver=&quot;com.mysql.jdbc.Driver&quot;;    private static String url=&quot;jdbc:mysql://127.0.0.1:3306/epet&quot;;    private static String user=&quot;root&quot;;    private static String password=&quot;root&quot;;        static &#123;            try &#123;                Class.forName(driver);            &#125; catch (ClassNotFoundException e) &#123;                e.printStackTrace();            &#125;        &#125;    public static Connection getConnection() throws SQLException &#123;        return DriverManager.getConnection(url, user, password);        &#125;    public static void closeAll(Connection conn,Statement stmt,ResultSet rs) throws SQLException &#123;        if(rs!=null) &#123;            rs.close();        &#125;        if(stmt!=null) &#123;            stmt.close();        &#125;        if(conn!=null) &#123;            conn.close();        &#125;    &#125;    public int executeSQL(String preparedSql, Object[] param) throws ClassNotFoundException &#123;        Connection conn = null;        PreparedStatement pstmt = null;        /* 处理SQL,执行SQL */        try &#123;            conn = getConnection(); // 得到数据库连接            pstmt = conn.prepareStatement(preparedSql); // 得到PreparedStatement对象            if (param != null) &#123;                for (int i = 0; i &lt; param.length; i++) &#123;                    pstmt.setObject(i + 1, param[i]); // 为预编译sql设置参数                &#125;            &#125;        ResultSet num = pstmt.executeQuery(); // 执行SQL语句        &#125; catch (SQLException e) &#123;            e.printStackTrace(); // 处理SQLException异常        &#125; finally &#123;            try &#123;                BaseDao.closeAll(conn, pstmt, null);            &#125; catch (SQLException e) &#123;                    e.printStackTrace();            &#125;        &#125;        return 0;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这几天开始学习web框架了，发现很多术语和缩写自己竟然完全不知道，&lt;br&gt;想到很多刚入门的人学起来应该也是这种感觉，就写一篇记录一下，&lt;br&gt;方便大家使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Servlet" scheme="http://silencezheng.top/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet中的RequestDispatcher 两个方法详解</title>
    <link href="http://silencezheng.top/2020/09/09/article13/"/>
    <id>http://silencezheng.top/2020/09/09/article13/</id>
    <published>2020-09-09T14:14:57.000Z</published>
    <updated>2020-09-09T14:29:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我认为讲的很详细的对RequestDispatcher的解释，记录一下。<br>转自：<a href="https://www.jianshu.com/p/35d9e05d5989">https://www.jianshu.com/p/35d9e05d5989</a>  （翻译）<br>英文原博：<a href="https://www.javatpoint.com/requestdispatcher-in-servlet">https://www.javatpoint.com/requestdispatcher-in-servlet</a><br>下面是简单总结：</p><span id="more"></span><p>请求调度器 接口 提供调度request到另一个资源（servlet/jsp/html）的功能。<br>该接口也可以用incloude方法包含另一个资源（servlet/jsp/html）的内容。它是servlet协作的一种方式。<br>在RequestDispatcher接口中定义了两种方法： forward和include</p><p><strong>forward</strong><br>如下图所示，servlet2的response发送给客户端。而servlet1的response不会显示给用户。</p><p><img src="/assets/post_img/article13/forward.png" alt="forward"></p><p>ServletRequest接口的getRequestDispatcher（）方法返回RequestDispatcher的对象。句法：</p><p><code>public RequestDispatcher getRequestDispatcher(String resource);</code>  </p><p>例子:</p><pre><code>RequestDispatcher requestDispatcher = request.getRequestDispatcher(&quot;/sessionLoginDemo/login.jsp&quot;);//得到转发器requestDispatcher.forward(request, response);//转发（调度）请求给/sessionLoginDemo/login.jsp 并由login.jsp发送response给客户端。</code></pre><p><strong>include</strong><br>如下图所示，servlet2的response包含在（正在发送给客户端的）servlet1的response包中。</p><p><img src="/assets/post_img/article13/include.png" alt="include"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我认为讲的很详细的对RequestDispatcher的解释，记录一下。&lt;br&gt;转自：&lt;a href=&quot;https://www.jianshu.com/p/35d9e05d5989&quot;&gt;https://www.jianshu.com/p/35d9e05d5989&lt;/a&gt;  （翻译）&lt;br&gt;英文原博：&lt;a href=&quot;https://www.javatpoint.com/requestdispatcher-in-servlet&quot;&gt;https://www.javatpoint.com/requestdispatcher-in-servlet&lt;/a&gt;&lt;br&gt;下面是简单总结：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Servlet" scheme="http://silencezheng.top/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet中的路径获取</title>
    <link href="http://silencezheng.top/2020/09/09/article12/"/>
    <id>http://silencezheng.top/2020/09/09/article12/</id>
    <published>2020-09-09T14:02:10.000Z</published>
    <updated>2020-09-09T14:29:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习笔记而已~</p><span id="more"></span><p>request.getSchema()，返回的是当前连接使用的协议，一般应用返回的是http、SSL返回的是https；<br>request.getServerName()，返回当前页面所在的服务器的名字；<br>request.getServerPort()，返回当前页面所在的服务器使用的端口，80；<br>request.getContextPath()，返回当前页面所在的应用的名字。</p><p>getContextPath()是jsp中获取路径的一种方式，那么获取到结果是什么呢？jsp其他获取路径的方式是怎样的呢？表示好奇，请听分解：<br>以访问的jsp为：<a href="http://localhost:8080/dmsd-itoo-exam-log-web/course/index.jsp，工程名为/dmsd-itoo-exam-log-web为例：">http://localhost:8080/dmsd-itoo-exam-log-web/course/index.jsp，工程名为/dmsd-itoo-exam-log-web为例：</a><br>request.getContextPath()，得到工程名：/dmsd-itoo-exam-log-web；<br>request.getServletPath()，返回当前页面所在目录下全名称：/course/index.jsp；<br>request.getRequestURL()，返回IE地址栏地址：<a href="http://localhost:8080/dmsd-itoo-exam-log-web/course/index.jsp；">http://localhost:8080/dmsd-itoo-exam-log-web/course/index.jsp；</a></p><p>request.getRequestURI() ，返回包含工程名的当前页面全路径：/dmsd-itoo-exam-log-web/course/index.jsp。<br>对jsp获取当前应用的路径方法和request常用方法有了基本的了解，下面后台通过request.getScheme()获取当前页面使用协议遇到的问题：<br>request.getScheme()获取到的确实http而不是https，与request.getRequestURL()拿到的一样也是http。</p><p>这是为什么呢？原来，nginx+tomcat部署web服务，tomcat接收到的请求是来自nginx的http请求。</p><p>转自：<a href="https://blog.csdn.net/u010180031/article/details/52369537">https://blog.csdn.net/u010180031/article/details/52369537</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;学习笔记而已~&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://silencezheng.top/tags/Java/"/>
    
    <category term="Servlet" scheme="http://silencezheng.top/tags/Servlet/"/>
    
  </entry>
  
</feed>
